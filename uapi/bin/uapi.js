/*
 *	uapi.js ðŸ“º  stable-50-g5ed5eaf
 */
// Generated by Haxe 4.0.0-rc.1+1fdd3d5
(function ($hx_exports) { "use strict";
$hx_exports["uapi"] = $hx_exports["uapi"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Argan = function() { };
$hxClasses["Argan"] = Argan;
Argan.__name__ = true;
Argan.start = function(config) {
	if(null != config) {
		var args_set = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = Reflect.fields(config);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var value = Reflect.field(config,f);
			if(__map_reserved[f] != null) {
				args_set.setReserved(f,value);
			} else {
				args_set.h[f] = value;
			}
		}
		Argan.args = args_set;
	}
};
Argan.objectFromMap = function(map) {
	var obj = { };
	var k = map.keys();
	while(k.hasNext()) {
		var k1 = k.next();
		obj[k1] = __map_reserved[k1] != null ? map.getReserved(k1) : map.h[k1];
	}
	return obj;
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = true;
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Main = $hx_exports["uapi"] = function() {
	this.hooks = uapi_Hooks;
};
$hxClasses["Main"] = Main;
Main.__name__ = true;
Main.main = function() {
};
Main.getPlayers = function() {
	var players = { };
	var resources = haxe_Resource.listNames();
	resources.push("native");
	var _g = 0;
	while(_g < resources.length) {
		var n = resources[_g];
		++_g;
		if(n.indexOf("logo") == -1 && n.indexOf("template") == -1 && n != Argan.HELP_RESOURCE_KEY && !StringTools.endsWith(n,"-src") && !StringTools.endsWith(n,"-argan")) {
			players[n] = JSON.parse(haxe_Resource.getString(n + "-argan"));
		}
	}
	return players;
};
Main.getHelp = function() {
	return Argan.objectFromMap(haxe_Unserializer.run(haxe_Resource.getString("_help_map")));
};
Main.getPlayerVersions = function(player) {
	return JSON.parse(haxe_Resource.getString("" + player + "-src"));
};
Main.addPlayerSrc = function(player,urls) {
	urls = urls.map(function(url) {
		return Main.absUrl(url);
	});
	var _this = Main.playerSrcExtended;
	if(__map_reserved[player] != null) {
		_this.setReserved(player,urls);
	} else {
		_this.h[player] = urls;
	}
};
Main.overridePlayerSrcs = function(player_srcs_object) {
	Main.playerSrcOverride = player_srcs_object;
};
Main.writePlayer = function(parent,uri,player_version_string,player_config,inject_head,inject_body) {
	if(player_version_string == null) {
		player_version_string = "dashjs";
	}
	Argan.start(player_config);
	var iframe = window.document.createElement("iframe");
	iframe.src = "about:blank";
	iframe.setAttribute("importance","high");
	iframe.setAttribute("border","0");
	iframe.setAttribute("allowfullscreen","true");
	iframe.setAttribute("seamless","true");
	iframe.setAttribute("frameborder","0");
	var meta = player_version_string.split(":");
	var player = meta[0];
	if(haxe_Resource.listNames().indexOf(player) == -1 && player != "native") {
		throw new js__$Boot_HaxeError("unknown player \"" + player + "\", please select any of " + Std.string(haxe_Resource.listNames()) + ".");
	}
	var playerBody = haxe_Resource.getString("" + player);
	if(playerBody != null && Object.prototype.hasOwnProperty.call(window,"Blob")) {
		var split = playerBody.split(",");
		playerBody = URL.createObjectURL(new Blob([haxe_crypto_Base64.decode(split[1]).b.bufferValue],{ type : split[0].split(";")[0]}));
	}
	var version = meta[1];
	var head = [];
	var body = ["<script src=\"" + playerBody + "\"></script>"];
	var error = null;
	var last_src = "#";
	if(player == "native") {
		body = ["<script>video.src = uri;</script>"];
	} else {
		var _this = Main.playerSrcExtended;
		if(__map_reserved[player_version_string] != null ? _this.existsReserved(player_version_string) : _this.h.hasOwnProperty(player_version_string)) {
			var _g = 0;
			var _this1 = Main.playerSrcExtended;
			var _g1 = __map_reserved[player_version_string] != null ? _this1.getReserved(player_version_string) : _this1.h[player_version_string];
			while(_g < _g1.length) {
				var src = _g1[_g];
				++_g;
				last_src = src;
				head.push("<script crossorigin src=\"" + last_src + "\"></script>");
			}
		} else {
			var srcs = Main.playerSrcOverride == null ? JSON.parse(haxe_Resource.getString("" + player + "-src")) : Main.playerSrcOverride;
			var _g2 = 0;
			var _g11 = version == null ? Reflect.fields(srcs) : [version];
			while(_g2 < _g11.length) {
				var s = _g11[_g2];
				++_g2;
				version = s;
				if(Object.prototype.hasOwnProperty.call(srcs,s)) {
					var list = Reflect.field(srcs,s);
					var _g3 = 0;
					while(_g3 < list.length) {
						var src1 = list[_g3];
						++_g3;
						last_src = src1;
						head.push("<script crossorigin src=\"" + last_src + "\"></script>");
					}
				} else {
					error = "unknown version:" + version + " for \"" + player + "\"";
				}
				break;
			}
		}
	}
	Main.handleEitherType(inject_head,head);
	Main.handleEitherType(inject_body,body);
	var html = new haxe_Template(haxe_Resource.getString("template"));
	var html1 = encodeURIComponent(uri);
	var html2 = haxe_Resource.getString("logo");
	var _;
	var _1;
	if(Argan.args != null) {
		var _this2 = Argan.args;
		_1 = __map_reserved["autoplay"] != null ? _this2.existsReserved("autoplay") : _this2.h.hasOwnProperty("autoplay");
	} else {
		_1 = false;
	}
	if(_1) {
		var _this3 = Argan.args;
		_ = __map_reserved["autoplay"] != null ? _this3.getReserved("autoplay") : _this3.h["autoplay"];
	} else {
		_ = true;
	}
	var _2;
	var _3;
	if(Argan.args != null) {
		var _this4 = Argan.args;
		_3 = __map_reserved["muted"] != null ? _this4.existsReserved("muted") : _this4.h.hasOwnProperty("muted");
	} else {
		_3 = false;
	}
	if(_3) {
		var _this5 = Argan.args;
		_2 = __map_reserved["muted"] != null ? _this5.getReserved("muted") : _this5.h["muted"];
	} else {
		_2 = false;
	}
	var _4;
	var _5;
	if(Argan.args != null) {
		var _this6 = Argan.args;
		_5 = __map_reserved["controls"] != null ? _this6.existsReserved("controls") : _this6.h.hasOwnProperty("controls");
	} else {
		_5 = false;
	}
	if(_5) {
		var _this7 = Argan.args;
		_4 = __map_reserved["controls"] != null ? _this7.getReserved("controls") : _this7.h["controls"];
	} else {
		_4 = true;
	}
	var _6;
	var _7;
	if(Argan.args != null) {
		var _this8 = Argan.args;
		_7 = __map_reserved["playsinline"] != null ? _this8.existsReserved("playsinline") : _this8.h.hasOwnProperty("playsinline");
	} else {
		_7 = false;
	}
	if(_7) {
		var _this9 = Argan.args;
		_6 = __map_reserved["playsinline"] != null ? _this9.getReserved("playsinline") : _this9.h["playsinline"];
	} else {
		_6 = true;
	}
	var html3 = head.join("\n");
	var html4 = body.join("\n");
	var html5 = error != null ? "<pre>uapi error:\n" + error + "</pre>" : haxe_Resource.getString("controls_template");
	var html6 = html.execute({ uri : html1, loading : html2, title : player, title_version : version, title_href : last_src, attr_autoplay : _, attr_muted : _2, attr_controls : _4, attr_playsinline : _6, head : html3, body : html4, controls : html5},{ poster : function(resolve) {
		var canvasDataURL = Main.generatePosterImage(uri,player.toUpperCase());
		var split1 = canvasDataURL.split(",");
		var retval = Object.prototype.hasOwnProperty.call(window,"Blob") ? URL.createObjectURL(new Blob([haxe_crypto_Base64.decode(split1[1]).b.bufferValue],{ type : split1[0].split(";")[0]})) : canvasDataURL;
		return "poster=\"" + retval + "\"";
	}});
	var container = window.document.createElement("div");
	container.style.position = "relative";
	container.style.width = "100%";
	container.style.height = error != null ? "44px" : "0";
	container.style.boxSizing = "unset";
	iframe.id = iframe.name = "uapi.js/" + player + "(" + version + ")/" + Main.id++;
	iframe.style.position = "absolute";
	iframe.style.resize = "both";
	iframe.style.top = iframe.style.left = "0";
	iframe.style.width = iframe.style.height = "100%";
	container.appendChild(iframe);
	parent.appendChild(container);
	var retval1 = new Promise(function(resolve1,reject) {
		var iframe_loaded = false;
		var delayed_errors = [];
		iframe.addEventListener("load",function(event) {
			iframe_loaded = true;
			while(delayed_errors.length > 0) (delayed_errors.pop())();
			var hndl = null;
			hndl = { reload : function(uri1,version1,config) {
				if(version1 == null) {
					version1 = player_version_string;
				}
				if(config == null) {
					config = player_config;
				}
				hndl.frame.parentElement.parentElement.removeChild(hndl.frame.parentElement);
				return Main.writePlayer(parent,uri1,version1,config,inject_head,inject_body)["catch"](function(e) {
					hndl.frame = e.target.frameElement;
					return hndl;
				}).then(function(nframe) {
					hndl = nframe;
					return nframe;
				});
			}, destroy : function() {
				iframe.parentElement.parentElement.removeChild(iframe.parentElement);
				hndl = null;
			}, frame : iframe, player : Reflect.field(iframe.contentWindow,"player"), video : Reflect.field(iframe.contentWindow,"video"), controls_custom : Reflect.field(iframe.contentWindow,"controls_custom")};
			resolve1(hndl);
		});
		var topWindow = window;
		var handleError = null;
		var messageCount = 0;
		handleError = function(error1,message,$window,logToConsole) {
			if(logToConsole == null) {
				logToConsole = true;
			}
			var _8;
			var _9;
			if(Argan.args != null) {
				var _this10 = Argan.args;
				_9 = __map_reserved["quiet"] != null ? _this10.existsReserved("quiet") : _this10.h.hasOwnProperty("quiet");
			} else {
				_9 = false;
			}
			if(_9) {
				var _this11 = Argan.args;
				_8 = __map_reserved["quiet"] != null ? _this11.getReserved("quiet") : _this11.h["quiet"];
			} else {
				_8 = false;
			}
			if(_8) {
				return;
			}
			if(iframe_loaded) {
				var msg = $window.document.createElement("div");
				msg.className = "message";
				message = StringTools.replace(message,"\\n","\n");
				msg.innerText += "ðŸ’¬ " + message + "\n";
				$window.document.getElementById("error").appendChild(msg);
				if(logToConsole) {
					topWindow.console.error(error1);
				}
				var handleError1 = messageCount += 1;
				$window.messagecount.innerText = "" + handleError1 + " message" + (messageCount > 1 ? "s" : "");
				$window.resetControlsHeight();
				$window.resetAspectRatio();
			} else {
				var f = handleError;
				var a1 = error1;
				var a2 = message;
				var a3 = $window;
				var a4 = logToConsole;
				var handleError2 = function() {
					f(a1,a2,a3,a4);
				};
				delayed_errors.push(handleError2);
			}
		};
		var iframe1 = iframe;
		iframe1.hook = function(contentWindow) {
			contentWindow.config = Reflect.field(player_config,player);
			contentWindow.addEventListener("error",function(e1) {
				if(e1.message != "ResizeObserver loop limit exceeded") {
					reject(e1);
					handleError(e1,"error.message:" + e1.message + ", " + e1.filename + ":" + e1.lineno,contentWindow);
				}
			});
			contentWindow.onunhandledrejection = function(e2) {
				reject(e2);
				var retval2 = e2.reason.toString();
				handleError(e2,retval2,contentWindow);
			};
			uapi_Hooks.hookMethods(contentWindow.console,["error","warn"]).pipe(function(method,args) {
				handleError(args,"console." + method + ":\t" + Std.string(args),contentWindow,false);
			});
		};
		iframe1.hook_end = function(contentWindow1,video) {
			contentWindow1.messagecount.addEventListener("click",function(event1) {
				event1.target.parentElement.classList.toggle("folded");
				contentWindow1.resetControlsHeight();
				contentWindow1.resetAspectRatio();
			});
			video.addEventListener("error",function(e3) {
				window["lastError"] = video.error;
				var msg1;
				switch(video.error.code) {
				case 1:
					msg1 = "MEDIA_ERR_ABORTED";
					break;
				case 2:
					msg1 = "MEDIA_ERR_NETWORK";
					break;
				case 3:
					msg1 = "MEDIA_ERR_DECODE";
					break;
				case 4:
					msg1 = "MEDIA_ERR_SRC_NOT_SUPPORTED";
					break;
				case 5:
					msg1 = "MEDIA_ERR_ENCRYPTED";
					break;
				default:
					msg1 = "UNKNOWN";
				}
				if(Reflect.field(video.error,"message") != null) {
					msg1 += "\nMediaError.message: " + Std.string(Reflect.field(video.error,"message"));
				}
				var log = "HTMLMediaElement MediaError while playing\n" + uri + "\n\n" + msg1 + "\n\nsee\nhttps://developer.mozilla.org/en-US/docs/Web/API/MediaError for more details";
				handleError(e3,log,contentWindow1);
				if(player != "native" && !Object.prototype.hasOwnProperty.call(contentWindow1,"player")) {
					throw new js__$Boot_HaxeError("unable to load " + player_version_string);
				}
			});
		};
	});
	if(uapi_JsUtils.isIE()) {
		var doc = iframe.contentWindow != null ? iframe.contentWindow : iframe.contentDocument;
		if(doc.document) {
			doc = doc.document;
		}
		doc.open();
		doc.write(html6);
		doc.close();
	} else if(Object.prototype.hasOwnProperty.call(window,"Blob")) {
		iframe.setAttribute("sandbox","allow-scripts allow-same-origin allow-modals");
		var tmp = haxe_io_Bytes.ofString(html6).b.bufferValue;
		iframe.src = URL.createObjectURL(new Blob([tmp],{ type : "text/html"}));
	} else {
		var tmp1 = "javascript:atob(\"" + haxe_crypto_Base64.encode(haxe_io_Bytes.ofString(html6));
		iframe.src = tmp1 + "\");";
	}
	return retval1;
};
Main.handleEitherType = function(either,array) {
	if(typeof(either) == "string") {
		array.push(either);
	} else if(either != null) {
		var arr = ((either) instanceof Array) && either.__enum__ == null ? either : [either];
		var _g = 0;
		while(_g < arr.length) {
			var el = arr[_g];
			++_g;
			var pos = Object.prototype.hasOwnProperty.call(el,"index") && el.index == null;
			array.splice(pos ? el.index : -1,0,el.content);
		}
	}
};
Main.HashPipe = function(immediate) {
	return Main.HashPipeJs(immediate);
};
Main.HashPipeJs = function(immediate) {
	if(immediate == null) {
		immediate = false;
	}
	return { pipe : function(func) {
		var retval = uapi_Hooks.HashPipe(immediate).pipe(function(data) {
			var retval1 = Main.mapToDynamic(data.args);
			func({ args : retval1, values : data.values, update : function(args,values,rewrite,toggle) {
				data.update(Main.dynamicToMap(args),values,rewrite,toggle,true);
			}});
		});
		var _hx_func = retval.update;
		var _hx_args = retval.args();
		retval.args = function() {
			return Main.mapToDynamic(_hx_args);
		};
		retval.update = function(args1,values1,rewrite1,toggle1) {
			var tmp = Main.dynamicToMap(args1);
			_hx_func(tmp,values1,rewrite1,toggle1);
		};
		return retval;
	}};
};
Main.KeyValueStringParser = function(location,QueryString) {
	return Main.KeyValueStringParserJs(location,QueryString);
};
Main.KeyValueStringParserJs = function(location,QueryString) {
	if(QueryString == null) {
		QueryString = true;
	}
	return Main.mapToDynamic(uapi_Utils.KeyValueStringParser(location,QueryString));
};
Main.Version = function() {
	return "stable-50-g5ed5eaf, 2019-02-19 10:16:13";
};
Main.write = function(str) {
	uapi_JsUtils.write(str);
};
Main.absUrl = function(url) {
	var abs = window.document.createElement("a");
	abs.href = url;
	return abs.href;
};
Main.requestUrl = function(url,binary) {
	return uapi_JsUtils.HttpRequest(url,binary);
};
Main.dynamicToMap = function(object) {
	var retval = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = Reflect.fields(object);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		var value = Reflect.field(object,f);
		if(__map_reserved[f] != null) {
			retval.setReserved(f,value);
		} else {
			retval.h[f] = value;
		}
	}
	return retval;
};
Main.mapToDynamic = function(map) {
	var retval = { };
	var k = map.keys();
	while(k.hasNext()) {
		var k1 = k.next();
		retval[k1] = __map_reserved[k1] != null ? map.getReserved(k1) : map.h[k1];
	}
	return retval;
};
Main.generatePosterImage = function(uri,title) {
	var canvas = window.document.createElement("canvas");
	canvas.width = 720;
	canvas.height = 404;
	var ctx = canvas.getContext("2d");
	ctx.font = "bold 55pt sans-serif";
	ctx.fillStyle = "#333";
	ctx.textAlign = "center";
	ctx.fillText(title.toUpperCase(),360,200);
	ctx.font = "italic 12pt sans-serif";
	ctx.fillText(uri,360,250);
	return canvas.toDataURL();
};
Math.__name__ = true;
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x, x && x[0]=="0" && (x[1]=="x" || x[1]=="X") ? 16 : 10);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = true;
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = true;
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = true;
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = true;
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = true;
haxe_Resource.listNames = function() {
	var _g = [];
	var _g1 = 0;
	var _g2 = haxe_Resource.content;
	while(_g1 < _g2.length) {
		var x = _g2[_g1];
		++_g1;
		_g.push(x.name);
	}
	return _g;
};
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
var haxe__$Template_TemplateExpr = $hxEnums["haxe._Template.TemplateExpr"] = { __ename__ : true, __constructs__ : ["OpVar","OpExpr","OpIf","OpStr","OpBlock","OpForeach","OpMacro"]
	,OpVar: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["v"],$_)
	,OpExpr: ($_=function(expr) { return {_hx_index:1,expr:expr,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr"],$_)
	,OpIf: ($_=function(expr,eif,eelse) { return {_hx_index:2,expr:expr,eif:eif,eelse:eelse,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr","eif","eelse"],$_)
	,OpStr: ($_=function(str) { return {_hx_index:3,str:str,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["str"],$_)
	,OpBlock: ($_=function(l) { return {_hx_index:4,l:l,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["l"],$_)
	,OpForeach: ($_=function(expr,loop) { return {_hx_index:5,expr:expr,loop:loop,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr","loop"],$_)
	,OpMacro: ($_=function(name,params) { return {_hx_index:6,name:name,params:params,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["name","params"],$_)
};
var haxe_Template = function(str) {
	var tokens = this.parseTokens(str);
	this.expr = this.parseBlock(tokens);
	if(!tokens.isEmpty()) {
		throw new js__$Boot_HaxeError("Unexpected '" + Std.string(tokens.first().s) + "'");
	}
};
$hxClasses["haxe.Template"] = haxe_Template;
haxe_Template.__name__ = true;
haxe_Template.prototype = {
	execute: function(context,macros) {
		this.macros = macros == null ? { } : macros;
		this.context = context;
		this.stack = new haxe_ds_List();
		this.buf = new StringBuf();
		this.run(this.expr);
		return this.buf.b;
	}
	,resolve: function(v) {
		if(v == "__current__") {
			return this.context;
		}
		var value = Reflect.getProperty(this.context,v);
		if(value != null || Object.prototype.hasOwnProperty.call(this.context,v)) {
			return value;
		}
		var _g_head = this.stack.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var ctx = val;
			value = Reflect.getProperty(ctx,v);
			if(value != null || Object.prototype.hasOwnProperty.call(ctx,v)) {
				return value;
			}
		}
		return Reflect.field(haxe_Template.globals,v);
	}
	,parseTokens: function(data) {
		var tokens = new haxe_ds_List();
		while(haxe_Template.splitter.match(data)) {
			var p = haxe_Template.splitter.matchedPos();
			if(p.pos > 0) {
				tokens.add({ p : HxOverrides.substr(data,0,p.pos), s : true, l : null});
			}
			if(HxOverrides.cca(data,p.pos) == 58) {
				tokens.add({ p : HxOverrides.substr(data,p.pos + 2,p.len - 4), s : false, l : null});
				data = haxe_Template.splitter.matchedRight();
				continue;
			}
			var parp = p.pos + p.len;
			var npar = 1;
			var params = [];
			var part = "";
			while(true) {
				var c = HxOverrides.cca(data,parp);
				++parp;
				if(c == 40) {
					++npar;
				} else if(c == 41) {
					--npar;
					if(npar <= 0) {
						break;
					}
				} else if(c == null) {
					throw new js__$Boot_HaxeError("Unclosed macro parenthesis");
				}
				if(c == 44 && npar == 1) {
					params.push(part);
					part = "";
				} else {
					part += String.fromCodePoint(c);
				}
			}
			params.push(part);
			tokens.add({ p : haxe_Template.splitter.matched(2), s : false, l : params});
			data = HxOverrides.substr(data,parp,data.length - parp);
		}
		if(data.length > 0) {
			tokens.add({ p : data, s : true, l : null});
		}
		return tokens;
	}
	,parseBlock: function(tokens) {
		var l = new haxe_ds_List();
		while(true) {
			var t = tokens.first();
			if(t == null) {
				break;
			}
			if(!t.s && (t.p == "end" || t.p == "else" || HxOverrides.substr(t.p,0,7) == "elseif ")) {
				break;
			}
			l.add(this.parse(tokens));
		}
		if(l.length == 1) {
			return l.first();
		}
		return haxe__$Template_TemplateExpr.OpBlock(l);
	}
	,parse: function(tokens) {
		var t = tokens.pop();
		var p = t.p;
		if(t.s) {
			return haxe__$Template_TemplateExpr.OpStr(p);
		}
		if(t.l != null) {
			var pe = new haxe_ds_List();
			var _g = 0;
			var _g1 = t.l;
			while(_g < _g1.length) {
				var p1 = _g1[_g];
				++_g;
				pe.add(this.parseBlock(this.parseTokens(p1)));
			}
			return haxe__$Template_TemplateExpr.OpMacro(p,pe);
		}
		if(HxOverrides.substr(p,0,3) == "if ") {
			p = HxOverrides.substr(p,3,p.length - 3);
			var e = this.parseExpr(p);
			var eif = this.parseBlock(tokens);
			var t1 = tokens.first();
			var eelse;
			if(t1 == null) {
				throw new js__$Boot_HaxeError("Unclosed 'if'");
			}
			if(t1.p == "end") {
				tokens.pop();
				eelse = null;
			} else if(t1.p == "else") {
				tokens.pop();
				eelse = this.parseBlock(tokens);
				t1 = tokens.pop();
				if(t1 == null || t1.p != "end") {
					throw new js__$Boot_HaxeError("Unclosed 'else'");
				}
			} else {
				t1.p = HxOverrides.substr(t1.p,4,t1.p.length - 4);
				eelse = this.parse(tokens);
			}
			return haxe__$Template_TemplateExpr.OpIf(e,eif,eelse);
		}
		if(HxOverrides.substr(p,0,8) == "foreach ") {
			p = HxOverrides.substr(p,8,p.length - 8);
			var e1 = this.parseExpr(p);
			var efor = this.parseBlock(tokens);
			var t2 = tokens.pop();
			if(t2 == null || t2.p != "end") {
				throw new js__$Boot_HaxeError("Unclosed 'foreach'");
			}
			return haxe__$Template_TemplateExpr.OpForeach(e1,efor);
		}
		if(haxe_Template.expr_splitter.match(p)) {
			return haxe__$Template_TemplateExpr.OpExpr(this.parseExpr(p));
		}
		return haxe__$Template_TemplateExpr.OpVar(p);
	}
	,parseExpr: function(data) {
		var l = new haxe_ds_List();
		var expr = data;
		while(haxe_Template.expr_splitter.match(data)) {
			var p = haxe_Template.expr_splitter.matchedPos();
			var k = p.pos + p.len;
			if(p.pos != 0) {
				l.add({ p : HxOverrides.substr(data,0,p.pos), s : true});
			}
			var p1 = haxe_Template.expr_splitter.matched(0);
			l.add({ p : p1, s : p1.indexOf("\"") >= 0});
			data = haxe_Template.expr_splitter.matchedRight();
		}
		if(data.length != 0) {
			l.add({ p : data, s : true});
		}
		var e;
		try {
			e = this.makeExpr(l);
			if(!l.isEmpty()) {
				throw new js__$Boot_HaxeError(l.first().p);
			}
		} catch( s ) {
			var s1 = ((s) instanceof js__$Boot_HaxeError) ? s.val : s;
			if(typeof(s1) == "string") {
				throw new js__$Boot_HaxeError("Unexpected '" + s1 + "' in " + expr);
			} else {
				throw s;
			}
		}
		return function() {
			try {
				return e();
			} catch( exc ) {
				throw new js__$Boot_HaxeError("Error : " + Std.string(((exc) instanceof js__$Boot_HaxeError) ? exc.val : exc) + " in " + expr);
			}
		};
	}
	,makeConst: function(v) {
		haxe_Template.expr_trim.match(v);
		v = haxe_Template.expr_trim.matched(1);
		if(HxOverrides.cca(v,0) == 34) {
			var str = HxOverrides.substr(v,1,v.length - 2);
			return function() {
				return str;
			};
		}
		if(haxe_Template.expr_int.match(v)) {
			var i = Std.parseInt(v);
			return function() {
				return i;
			};
		}
		if(haxe_Template.expr_float.match(v)) {
			var f = parseFloat(v);
			return function() {
				return f;
			};
		}
		var me = this;
		return function() {
			return me.resolve(v);
		};
	}
	,makePath: function(e,l) {
		var p = l.first();
		if(p == null || p.p != ".") {
			return e;
		}
		l.pop();
		var field = l.pop();
		if(field == null || !field.s) {
			throw new js__$Boot_HaxeError(field.p);
		}
		var f = field.p;
		haxe_Template.expr_trim.match(f);
		f = haxe_Template.expr_trim.matched(1);
		return this.makePath(function() {
			return Reflect.field(e(),f);
		},l);
	}
	,makeExpr: function(l) {
		return this.makePath(this.makeExpr2(l),l);
	}
	,makeExpr2: function(l) {
		var p = l.pop();
		if(p == null) {
			throw new js__$Boot_HaxeError("<eof>");
		}
		if(p.s) {
			return this.makeConst(p.p);
		}
		switch(p.p) {
		case "!":
			var e = this.makeExpr(l);
			return function() {
				var v = e();
				if(v != null) {
					return v == false;
				} else {
					return true;
				}
			};
		case "(":
			var e1 = this.makeExpr(l);
			var p1 = l.pop();
			if(p1 == null || p1.s) {
				throw new js__$Boot_HaxeError(p1);
			}
			if(p1.p == ")") {
				return e1;
			}
			var e2 = this.makeExpr(l);
			var p2 = l.pop();
			if(p2 == null || p2.p != ")") {
				throw new js__$Boot_HaxeError(p2);
			}
			switch(p1.p) {
			case "!=":
				return function() {
					return e1() != e2();
				};
			case "&&":
				return function() {
					return e1() && e2();
				};
			case "*":
				return function() {
					return e1() * e2();
				};
			case "+":
				return function() {
					return e1() + e2();
				};
			case "-":
				return function() {
					return e1() - e2();
				};
			case "/":
				return function() {
					return e1() / e2();
				};
			case "<":
				return function() {
					return e1() < e2();
				};
			case "<=":
				return function() {
					return e1() <= e2();
				};
			case "==":
				return function() {
					return e1() == e2();
				};
			case ">":
				return function() {
					return e1() > e2();
				};
			case ">=":
				return function() {
					return e1() >= e2();
				};
			case "||":
				return function() {
					return e1() || e2();
				};
			default:
				throw new js__$Boot_HaxeError("Unknown operation " + p1.p);
			}
			break;
		case "-":
			var e3 = this.makeExpr(l);
			return function() {
				return -e3();
			};
		}
		throw new js__$Boot_HaxeError(p.p);
	}
	,run: function(e) {
		switch(e._hx_index) {
		case 0:
			var v = e.v;
			var _this = this.buf;
			var x = Std.string(this.resolve(v));
			_this.b += Std.string(x);
			break;
		case 1:
			var e1 = e.expr;
			var _this1 = this.buf;
			var x1 = Std.string(e1());
			_this1.b += Std.string(x1);
			break;
		case 2:
			var eelse = e.eelse;
			var eif = e.eif;
			var e2 = e.expr;
			var v1 = e2();
			if(v1 == null || v1 == false) {
				if(eelse != null) {
					this.run(eelse);
				}
			} else {
				this.run(eif);
			}
			break;
		case 3:
			var str = e.str;
			this.buf.b += str == null ? "null" : "" + str;
			break;
		case 4:
			var l = e.l;
			var _g_head = l.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var e3 = val;
				this.run(e3);
			}
			break;
		case 5:
			var loop = e.loop;
			var e4 = e.expr;
			var v2 = e4();
			try {
				var x2 = $getIterator(v2);
				if(x2.hasNext == null) {
					throw new js__$Boot_HaxeError(null);
				}
				v2 = x2;
			} catch( e5 ) {
				var e6 = ((e5) instanceof js__$Boot_HaxeError) ? e5.val : e5;
				try {
					if(v2.hasNext == null) {
						throw new js__$Boot_HaxeError(null);
					}
				} catch( e7 ) {
					var e8 = ((e7) instanceof js__$Boot_HaxeError) ? e7.val : e7;
					throw new js__$Boot_HaxeError("Cannot iter on " + Std.string(v2));
				}
			}
			this.stack.push(this.context);
			var v3 = v2;
			var ctx = v3;
			while(ctx.hasNext()) {
				var ctx1 = ctx.next();
				this.context = ctx1;
				this.run(loop);
			}
			this.context = this.stack.pop();
			break;
		case 6:
			var params = e.params;
			var m = e.name;
			var v4 = Reflect.field(this.macros,m);
			var pl = [];
			var old = this.buf;
			pl.push($bind(this,this.resolve));
			var _g_head1 = params.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var p = val1;
				if(p._hx_index == 0) {
					var v5 = p.v;
					pl.push(this.resolve(v5));
				} else {
					this.buf = new StringBuf();
					this.run(p);
					pl.push(this.buf.b);
				}
			}
			this.buf = old;
			try {
				var _this2 = this.buf;
				var x3 = Std.string(v4.apply(this.macros,pl));
				_this2.b += Std.string(x3);
			} catch( e9 ) {
				var e10 = ((e9) instanceof js__$Boot_HaxeError) ? e9.val : e9;
				var plstr;
				try {
					plstr = pl.join(",");
				} catch( e11 ) {
					var e12 = ((e11) instanceof js__$Boot_HaxeError) ? e11.val : e11;
					plstr = "???";
				}
				var msg = "Macro call " + m + "(" + plstr + ") failed (" + Std.string(e10) + ")";
				throw new js__$Boot_HaxeError(msg);
			}
			break;
		}
	}
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = true;
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = true;
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Object.create(cl1.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Object.create(cl2.prototype);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c11 << 2 | c2 >> 4;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c12 << 2 | c21 >> 4;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = c21 << 4 | c31 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = s.charCodeAt(i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g2 = 0;
		var _g3 = this.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var c = this.b[i1];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = true;
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,toString: function() {
		var s_b = "";
		var first = true;
		var l = this.h;
		s_b += "{";
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += ", ";
			}
			s_b += Std.string(Std.string(l.item));
			l = l.next;
		}
		s_b += "}";
		return s_b;
	}
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = true;
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if(((val) instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = l;
			while(_g3 < _g11) {
				var i1 = _g3++;
				str += (i1 > 0 ? "," : "") + js_Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var uapi_Hooks = $hx_exports["uapi"]["hooks"] = function() { };
$hxClasses["uapi.Hooks"] = uapi_Hooks;
uapi_Hooks.__name__ = true;
uapi_Hooks.hookMethod = function(object,methodPath) {
	var method_original = null;
	var pipe = null;
	var retval = { pipe : function(func) {
		pipe = func;
	}};
	var sub_obj = methodPath.split(".");
	var methodName = sub_obj.pop();
	var _g = 0;
	while(_g < sub_obj.length) {
		var sub = sub_obj[_g];
		++_g;
		object = Reflect.getProperty(object,sub);
	}
	method_original = Reflect.getProperty(object,methodName);
	if(null != method_original) {
		var method_new = uapi_Hooks.makeVarArgs(function($arguments) {
			var pipe_ret = pipe != null ? pipe.apply(this,[$arguments]) : null;
			if(pipe_ret != null) {
				return pipe_ret;
			} else {
				return method_original.apply(this,$arguments);
			}
		});
		Reflect.setProperty(object,methodName,method_new);
	} else {
		throw new js__$Boot_HaxeError("" + methodName + "() does not exist on " + Std.string(object));
	}
	return retval;
};
uapi_Hooks.hookMethods = function(object,methods) {
	var pipe = null;
	var retval = { pipe : function(func) {
		pipe = func;
	}};
	var _g = 0;
	while(_g < methods.length) {
		var m = [methods[_g]];
		++_g;
		uapi_Hooks.hookMethod(object,m[0]).pipe((function(m1) {
			return function($arguments) {
				return pipe.apply(this,[m1[0],$arguments]);
			};
		})(m));
	}
	return retval;
};
uapi_Hooks.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f.apply(this,[a]);
	};
};
uapi_Hooks.HashPipe = function(immediate) {
	if(immediate == null) {
		immediate = false;
	}
	var pipe = null;
	var _args = new haxe_ds_StringMap();
	var _values = [];
	var updateHash = function(args,values,rewrite,toggle,replacestate) {
		if(toggle == null) {
			toggle = true;
		}
		if(rewrite == null) {
			rewrite = false;
		}
		if(args != null) {
			if(rewrite) {
				if(args != null) {
					_args = args;
				}
				if(values != null) {
					_values = values;
				}
			} else {
				var k = args.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					if(!(__map_reserved[k1] != null ? _args.existsReserved(k1) : _args.h.hasOwnProperty(k1))) {
						var value = __map_reserved[k1] != null ? args.getReserved(k1) : args.h[k1];
						if(__map_reserved[k1] != null) {
							_args.setReserved(k1,value);
						} else {
							_args.h[k1] = value;
						}
					} else if(toggle && (__map_reserved[k1] != null ? args.getReserved(k1) : args.h[k1]) == "") {
						args.remove(k1);
					}
				}
				if(values != null) {
					var _g = 0;
					while(_g < values.length) {
						var v = values[_g];
						++_g;
						var str = v == null ? "null" : "" + v;
						if(_values.indexOf(str) == -1) {
							_values.push(str);
						} else if(toggle) {
							_values.splice(_values.indexOf(str),1);
						}
					}
				}
			}
			var k2 = _args.keys();
			while(k2.hasNext()) {
				var k3 = k2.next();
				var updateHash1 = __map_reserved[k3] != null ? _args.getReserved(k3) : _args.h[k3];
				_values.push("" + k3 + "=" + updateHash1);
			}
			var updated_hash = "!/" + _values.join("/");
			if(replacestate) {
				window.history.replaceState(null,null,"#" + updated_hash);
			} else {
				window.location.hash = updated_hash;
			}
		}
	};
	var hashChange = function(e) {
		var hash = window.location.hash;
		var toggle_arguments = [];
		if(pipe != null) {
			_args = uapi_Utils.KeyValueStringParser(hash,false);
		}
		var k4 = _args.keys();
		while(k4.hasNext()) {
			var k5 = k4.next();
			if((__map_reserved[k5] != null ? _args.getReserved(k5) : _args.h[k5]) == null) {
				_args.remove(k5);
				toggle_arguments.push(k5);
			}
		}
		_values = toggle_arguments;
		pipe({ update : updateHash, args : _args, values : _values});
	};
	var retval = { pipe : function(func) {
		pipe = func;
		if(immediate) {
			hashChange();
		}
		return { args : function() {
			return _args;
		}, values : function() {
			return _values;
		}, update : updateHash};
	}};
	window.addEventListener("hashchange",hashChange);
	return retval;
};
var uapi_JsUtils = function() { };
$hxClasses["uapi.JsUtils"] = uapi_JsUtils;
uapi_JsUtils.__name__ = true;
uapi_JsUtils.HttpRequest = function(url,binary,method,headers,body) {
	if(method == null) {
		method = "GET";
	}
	if(binary == null) {
		binary = false;
	}
	var pipe = null;
	var retval = { pipe : function(func) {
		pipe = func;
	}};
	window.fetch(url,{ "credentials" : "omit", "headers" : headers, "referrerPolicy" : "no-referrer-when-downgrade", "body" : body, "method" : method, "mode" : "cors"}).then(function(response) {
		var p = binary ? response.arrayBuffer() : response.text();
		p.then(function(res) {
			if(pipe != null) {
				pipe(res);
			}
		});
	});
	return retval;
};
uapi_JsUtils.write = function(str) {
	var last = window.document.body.lastElementChild;
	var it = last;
	while(it != null) {
		it = it.lastElementChild;
		if(it != null) {
			last = it;
		}
	}
	last.parentElement.insertAdjacentHTML("afterbegin",str);
	return;
};
uapi_JsUtils.isIE = function() {
	var ua = window.navigator.userAgent;
	if(ua.indexOf("Trident/") <= -1) {
		return ua.indexOf("Edge/") > -1;
	} else {
		return true;
	}
};
var uapi_Utils = function() { };
$hxClasses["uapi.Utils"] = uapi_Utils;
uapi_Utils.__name__ = true;
uapi_Utils.KeyValueStringParser = function(location,QueryString) {
	if(QueryString == null) {
		QueryString = true;
	}
	if(location == null) {
		location = QueryString ? window.location.search : window.location.hash;
	}
	while(QueryString == true ? location.charAt(0) == "?" : location.charAt(0) == "#" || location.charAt(0) == "!") location = HxOverrides.substr(location,1,null);
	var h = location.split(QueryString ? "&" : "/");
	var retval = new haxe_ds_StringMap();
	var t;
	var _g = 0;
	var _g1 = h.length;
	while(_g < _g1) {
		var l = _g++;
		if(h[l].length > 0) {
			var split = h[l].indexOf("=");
			t = [];
			if(split != -1) {
				t[0] = HxOverrides.substr(h[l],0,split);
				t[1] = HxOverrides.substr(h[l],split + 1,null);
			} else {
				t[0] = h[l];
			}
			var value = t.length > 1 ? decodeURIComponent(t[1].split("+").join(" ")) : null;
			var key = t[0];
			if(__map_reserved[key] != null) {
				retval.setReserved(key,value);
			} else {
				retval.h[key] = value;
			}
		}
	}
	return retval;
};
uapi_Utils.GenerateUUID = $hx_exports["uapi"]["uuid"] = function(prefix) {
	if(prefix == null) {
		prefix = "";
	}
	var t = new Date().getTime();
	var b = new haxe_io_Bytes(new ArrayBuffer(16));
	var c = 1;
	b.b[0] = t * 255 | 0;
	while(c < 16) {
		var v = Math.round(Math.random() * 255);
		b.b[c] = v;
		++c;
	}
	var retval = "" + b.toHex();
	var r = new EReg("(.{7})(.{4})(.{4})(.{4})(.*)","gi");
	if(r.match(retval)) {
		retval = retval.replace(r.r,"$1-$2-$3-$4-$5");
	}
	return "" + prefix + retval;
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
var $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
$hxClasses["Array"] = Array;
Array.__name__ = true;
Date.__name__ = "Date";
haxe_Resource.content = [{ name : "template", data : "PGh0bWw+Cgk8aGVhZD4KCQk8c3R5bGU+CgkJCWh0bWwsIGJvZHkgewoJCQkJZm9udC1mYW1pbHk6QXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjsKCQkJCWJhY2tncm91bmQ6IGRpbWdyYXk7CgkJCQljb2xvcjogYmxhY2s7CgkJCQlwYWRkaW5nOiAwOwoJCQkJbWFyZ2luOiAwOwoJCQkJd2lkdGg6IDEwMCU7CgkJCQloZWlnaHQ6IDEwMCU7CgkJCQlmb250LXNpemU6IDEwcHg7CgkJCQlmb250LWZhbWlseTogc2Fucy1zZXJpZjsKCQkJfQoJCQkudGl0bGUgewoJCQkJdG9wOiAxLjVweDsKCQkJCWJhY2tncm91bmQ6IGluaGVyaXQ7CgkJCQlwYWRkaW5nLWxlZnQ6IDVweDsKCQkJCXBhZGRpbmctcmlnaHQ6IDVweDsKCQkJfQoJCQkudGl0bGUsIC50aXRsZSBhIHsKCQkJCXBvc2l0aW9uOiBhYnNvbHV0ZTsKCQkJCXJpZ2h0OiAwcHg7CgkJCQlmb250LXdlaWdodDogMTAwOwoJCQkJZm9udC1zaXplOiAxMHB4OwoJCQkJdXNlci1zZWxlY3Q6IG5vbmU7CgkJCQlmb250LXZhcmlhbnQtY2Fwczogc21hbGwtY2FwczsKCQkJCXRleHQtZGVjb3JhdGlvbjogbm9uZTsKCQkJfQoJCQkubG9hZGluZyB7CgkJCQl3aWR0aDogMTAwJTsKCQkJCXBvc2l0aW9uOiBmaXhlZDsKCQkJCWhlaWdodDogMTAwJTsKCQkJCS8qZmlsdGVyOiBibHVyKDEuMnB4KTsqLwoJCQkJdmlzaWJpbGl0eTogdmlzaWJsZTsKCQkJfQoJCQkuaGlkZSB7CgkJCQlhbmltYXRpb246IGhpZGUgLjNzIGxpbmVhciBmb3J3YXJkczsKCQkJfQoJCQkubG9hZGluZyBkaXYgewoJCQkJd2lkdGg6IDIwJTsKCQkJCWNvbG9yOiB3aGl0ZTsKCQkJCW1hcmdpbjogMDsKCQkJCXRvcDogNTAlOwoJCQkJdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7CgkJCQlwb3NpdGlvbjogYWJzb2x1dGU7CgkJCQlsZWZ0OiA1MCU7CgkJCQlvcGFjaXR5OiAuNTsKCQkJfQoJCQkubG9hZGluZyBkaXYgc3ZnIHsKCQkJCWFuaW1hdGlvbjogbG9hZGluZyA1cyBpbmZpbml0ZSBsaW5lYXIgYmFja3dhcmRzOwoJCQl9CgkJCWEgewoJCQkJcG9zaXRpb246IHJlbGF0aXZlICFpbXBvcnRhbnQ7CgkJCQljb2xvcjogYmxhY2s7CgkJCX0KCQkJCgkJCS5tZXNzYWdlYm94ewoJCQkJb3ZlcmZsb3c6IGhpZGRlbjsKCQkJfQoJCQkjY29udHJvbHN7CgkJCQlwb3NpdGlvbjphYnNvbHV0ZTsKCQkJCWJvdHRvbTogMDsKCQkJCXdpZHRoOiAxMDAlOwoJCQkJYmFja2dyb3VuZDogZ2FpbnNib3JvOwoJCQkJb3ZlcmZsb3c6IGhpZGRlbjsKCQkJfQoJCQkjY29udHJvbHMgI2Vycm9yIHsKCQkJCW92ZXJmbG93OiBhdXRvOwoJCQkJbWFyZ2luOiAwcHggMHB4IDBweCAycHg7CgkJCQltYXgtaGVpZ2h0OiAyNTBweDsKCQkJCWRpc3BsYXk6IGlubGluZS1ibG9jazsKCQkJCXdpZHRoOiAxMDAlOwoJCQl9CgkJCSNlcnJvciAubWVzc2FnZSB7CgkJCQlmb250LXNpemU6IDEwcHggIWltcG9ydGFudDsKCQkJCWZvbnQtZmFtaWx5OiBNZW5sbywgbW9ub3NwYWNlOwoJCQkJZm9udC13ZWlnaHQ6IDEwMDsKCQkJCS13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkOwoJCQkJYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGdyZXk7CgkJCQl3aGl0ZS1zcGFjZTogcHJlOwoJCQl9CgkJCQoJCQkubWVzc2FnZTpob3ZlciB7CgkJCQliYWNrZ3JvdW5kOiBsaWdodGdyYXk7CgkJCX0KCgkJCS5mb2xkZWQgewoJCQkJaGVpZ2h0OiAxNXB4OwoJCQkJb3ZlcmZsb3c6aGlkZGVuOwoJCQkJCgkJCX0KCQkJI2Vycm9yIHsKCQkJCWRpc3BsYXk6IGJsb2NrOwoJCQl9CgoJCQkuZm9sZGVkICNlcnJvciB7CgkJCQlkaXNwbGF5OiBub25lOwoJCQl9CgkJCSNtZXNzYWdlY291bnQgewoJCQkJbWFyZ2luLWxlZnQ6IDJweDsKCQkJCXVzZXItc2VsZWN0OiBub25lOwoJCQkJY3Vyc29yOiBwb2ludGVyOwoJCQkJaGVpZ2h0OiAxNXB4OwoJCQl9CgkJCSNtZXNzYWdlY291bnQ6aG92ZXIgewoJCQkJdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7CgkJCX0KCQkJI21lc3NhZ2Vjb3VudDo6YmVmb3JlIHsKCQkJCWNvbnRlbnQ6ICLilrwiOwoJCQkJbWFyZ2luLXJpZ2h0OiAycHg7CgkJCQlkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CgkJCQl0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMTAwbXMgbGluZWFyOwoJCQl9CgkJCS5mb2xkZWQgI21lc3NhZ2Vjb3VudDo6YmVmb3JlIHsKCQkJCWNvbnRlbnQ6ICLilrwiOwoJCQkJdHJhbnNmb3JtOiByb3RhdGUoLTkwZGVnKTsKCQkJCWRpc3BsYXk6IGlubGluZS1ibG9jazsKCQkJCW1hcmdpbi1yaWdodDogMnB4OwoJCQl9CgkJCSN2aWRlb19jb250cm9sc193cmFwcGVyLCAjY29udHJvbHNfY3VzdG9tIHsKCQkJCXBvc2l0aW9uOiByZWxhdGl2ZTsKCQkJfQoJCQkjY29udHJvbHNfZWxlbWVudHMgewoJCQkJcGFkZGluZzogMTBweCAxMnB4IDVweCAxMnB4OwoJCQkJZGlzcGxheTogZmxleDsKCQkJCWZsZXgtd3JhcDogd3JhcDsKCQkJfQoJCQkjY29udHJvbHNfZWxlbWVudHMgZGl2OmhvdmVyIHsKCQkJCWJhY2tncm91bmQ6IGxpZ2h0Z3JleTsKCQkJfQoJCQkjY29udHJvbHNfZWxlbWVudHMgbGFiZWwgewoJCQkJbWFyZ2luLWxlZnQ6IDJweDsKCQkJfQoJCQkjY29udHJvbHNfZWxlbWVudHMgZGl2IHNlbGVjdCB7CgkJCQl3aWR0aDogOTklOwoJCQkJY3Vyc29yOnBvaW50ZXI7CgkJCX0KCQkJQG1lZGlhIChtYXgtd2lkdGg6IDExMDBweCkgewoJCQkJI2NvbnRyb2xzX2VsZW1lbnRzIGRpdiB7CgkJCQkJd2lkdGg6IDI1JTsKCQkJCX0KCQkJfQoJCQlAbWVkaWEgKG1heC13aWR0aDogODAwcHgpIHsKCQkJCSNjb250cm9sc19lbGVtZW50cyBkaXYgewoJCQkJCXdpZHRoOiAzMyU7CgkJCQl9CgkJCX0KCQkJQG1lZGlhIChtYXgtd2lkdGg6IDQwMHB4KSB7CgkJCQkjY29udHJvbHNfZWxlbWVudHMgZGl2IHsKCQkJCQl3aWR0aDogNTAlOwoJCQkJfQoJCQl9CgoJCQkvKiAgbWFrZSBzY3JvbGxiYXIgaW52aXNpYmxlICoKCQkJOjotd2Via2l0LXNjcm9sbGJhciB7CgkJCQl3aWR0aDogMHB4OyAgCgkJCQliYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsgIAoJCQl9Ki8KCQkJCgkJCUBrZXlmcmFtZXMgbG9hZGluZyB7CgkJCQlmcm9tIHt0cmFuc2Zvcm06cm90YXRlKDBkZWcpO30KCQkJCXRvIHt0cmFuc2Zvcm06cm90YXRlKDM2MGRlZyk7fQoJCQl9CgkJCUBrZXlmcmFtZXMgaGlkZSB7CgkJCQlmcm9tIHtvcGFjaXR5Oi44OyB2aXNpYmlsaXR5OiB2aXNpYmxlO30KCQkJCXRvIHtvcGFjaXR5OiAwLjA7IHZpc2liaWxpdHk6IGhpZGRlbjt9CgkJCX0KCgkJPC9zdHlsZT4KCQk8c2NyaXB0PgoJCQlpZighZnJhbWVFbGVtZW50KQoJCQkJdGhyb3cgImNoZWNrIHNhbWUtb3JpZ2luIHBvbGljeSI7CgkJCWVsc2UKCQkJCWlmKCdob29rJyBpbiBmcmFtZUVsZW1lbnQpCgkJCQkJZnJhbWVFbGVtZW50Lmhvb2sod2luZG93KTsKCQkJLy91c2VkIC9yZXMvcGxheWVycy8qOgoJCQl2YXIgdXJpID0gdW5lc2NhcGUoJzo6dXJpOjonKTsgCgkJCXZhciB0aXRsZSA9IHVuZXNjYXBlKCc6OnRpdGxlOjogKDo6dGl0bGVfdmVyc2lvbjo6KScpOwoJCTwvc2NyaXB0PgoJCTo6aGVhZDo6Cgk8L2hlYWQ+Cgk8Ym9keT4KCQk8ZGl2IGlkPSJsb2FkZXIiIGNsYXNzPSJsb2FkaW5nIj4KCQkJPGRpdj4KCQkJOjpsb2FkaW5nOjoKCQkJPC9kaXY+CgkJPC9kaXY+CgkJPGRpdiBpZD0idmlkZW9fY29udHJvbHNfd3JhcHBlciI+CgkJCTx2aWRlbyBpZD0idmlkZW8iIHdpZHRoPSIxMDAlIiAkJHBvc3RlcigpIDo6aWYgYXR0cl9jb250cm9sczo6Y29udHJvbHM6OmVuZDo6IDo6aWYgYXR0cl9wbGF5c2lubGluZTo6cGxheXNpbmxpbmU6OmVuZDo6IDo6aWYgYXR0cl9tdXRlZDo6bXV0ZWQ6OmVuZDo6IDo6aWYgYXR0cl9hdXRvcGxheTo6YXV0b3BsYXk6OmVuZDo6ID48L3ZpZGVvPgoJCQk8ZGl2IGlkPSJ0dG1sIj48L2Rpdj4KCQkJPGRpdiBpZD0iY29udHJvbHNfY3VzdG9tIj48L2Rpdj4KCQk8L2Rpdj4KCQk6OmJvZHk6OgoJCTxkaXYgaWQ9ImNvbnRyb2xzIj4KCQkJPHNwYW4gY2xhc3M9InRpdGxlIj46OnRpdGxlOjombmJzcDs8YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iOjp0aXRsZV9ocmVmOjoiPig6OnRpdGxlX3ZlcnNpb246Oik8L2E+PC9zcGFuPgoJCQk8ZGl2IGNsYXNzPSJtZXNzYWdlYm94IGZvbGRlZCI+CgkJCQk8ZGl2IGlkPSJtZXNzYWdlY291bnQiPm5vIG1lc3NhZ2VzPC9kaXY+CgkJCQk8ZGl2IGlkPSJlcnJvciI+PC9kaXY+CgkJCTwvZGl2PgoJCQk6OmNvbnRyb2xzOjoKCQk8L2Rpdj4KCQk8c2NyaXB0PgoJCQlpZignaG9va19lbmQnIGluIGZyYW1lRWxlbWVudCkKCQkJCWZyYW1lRWxlbWVudC5ob29rX2VuZCh3aW5kb3csIHZpZGVvKTsKCQk8L3NjcmlwdD4KCTwvYm9keT4KPC9odG1sPg"},{ name : "shaka-argan", data : "eyJkcm1fc2VydmVyX3BsYXlyZWFkeSI6eyJoZWxwIjoiY29tLm1pY3Jvc29mdC5wbGF5cmVhZHkiLCJkZWZhdWx0XyI6IltkZWZhdWx0OiBDU3RyaW5nKGh0dHBzOi8vcGxheXJlYWR5LmRpcmVjdHRhcHMubmV0L3ByL3N2Yy9yaWdodHNtYW5hZ2VyLmFzbXg/UGxheVJpZ2h0PTEmVXNlU2ltcGxlTm9uUGVyc2lzdGVudExpY2Vuc2U9MSZQbGF5RW5hYmxlcnM9Nzg2NjI3RDgtQzJBNi00NEJFLThGODgtMDhBRTI1NUIwMUE3KV0ifSwic2V0VGV4dFRyYWNrVmlzaWJpbGl0eSI6eyJoZWxwIjoiVGV4dCBUcmFja3MgdmlzaWJsZSIsImRlZmF1bHRfIjoiW2RlZmF1bHQ6IENJZGVudCh0cnVlKV0ifSwiZHJtX3NlcnZlcl93aWRldmluZSI6eyJoZWxwIjoiY29tLndpZGV2aW5lLmFscGhhIiwiZGVmYXVsdF8iOiJbZGVmYXVsdDogQ1N0cmluZyhodHRwczovL3dpZGV2aW5lLXByb3h5LmFwcHNwb3QuY29tL3Byb3h5KV0ifX0"},{ name : "_help_map", data : "Ynk1OnF1aWV0b3k0OmhlbHB5Mzg6ZG8lMjBub3QlMjBzaG93JTIwZXJyb3JzJTIwaW4lMjBvdXRwdXR5ODpkZWZhdWx0X3kzNjolNUJkZWZhdWx0JTNBJTIwQ0lkZW50JTI4ZmFsc2UlMjklNURneTExOnBsYXlzaW5saW5lb1IxeTQ4OmRpc2FibGUlMjB2aWRlb2VsZW1lbnQlMjBwbGF5c2lubGluZSUyMGF0dHJpYnV0ZVIzeTM1OiU1QmRlZmF1bHQlM0ElMjBDSWRlbnQlMjh0cnVlJTI5JTVEZ3k1Om11dGVkb1IxeTM0OnNldCUyMHZpZGVvZWxlbWVudCUyMG11dGVkJTIwc3RhdGVSM1I0Z3k4OmNvbnRyb2xzb1IxeTQ2OmRpc2FibGUlMjB2aWRlb2VsZW1lbnQlMjBidWlsdCUyMGluJTIwY29udHJvbHNSM1I3Z3k4OmF1dG9wbGF5b1IxeTM3OnNldCUyMHZpZGVvZWxlbWVudCUyMGF1dG9wbGF5JTIwc3RhdGVSM1I3Z2g"},{ name : "hlsjs-src", data : "ewogICAgIjAuMTEuMCI6IFsiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9obHMuanNAMC4xMS4wL2Rpc3QvaGxzLm1pbi5qcyJdLAogICAgIjAuMTAuMSI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvaGxzLmpzLzAuMTAuMS9obHMuanMiXQp9Cg"},{ name : "hasplayer-src", data : "ewogICAgIjEuMTUuMCI6IFsiaHR0cHM6Ly9vcmFuZ2Utb3BlbnNvdXJjZS5naXRodWIuaW8vaGFzcGxheWVyLmpzLzEuMTUuMC9kaXN0L2hhc3BsYXllci5qcyJdLAogICAgIjEuMTQuMiI6IFsiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9oYXNwbGF5ZXIuanNAMS4xNC4yL2Rpc3QvaGFzcGxheWVyLm1pbi5qcyJdCn0"},{ name : "dashjs", data : ""},{ name : "shaka", data : ""},{ name : "hasplayer-argan", data : "eyJkcm1fc2VydmVyX3BsYXlyZWFkeSI6eyJoZWxwIjoiY29tLm1pY3Jvc29mdC5wbGF5cmVhZHkiLCJkZWZhdWx0XyI6IltkZWZhdWx0OiBDU3RyaW5nKGh0dHBzOi8vcGxheXJlYWR5LmRpcmVjdHRhcHMubmV0L3ByL3N2Yy9yaWdodHNtYW5hZ2VyLmFzbXg/UGxheVJpZ2h0PTEmVXNlU2ltcGxlTm9uUGVyc2lzdGVudExpY2Vuc2U9MSZQbGF5RW5hYmxlcnM9Nzg2NjI3RDgtQzJBNi00NEJFLThGODgtMDhBRTI1NUIwMUE3KV0ifSwiZHJtX3NlcnZlcl93aWRldmluZSI6eyJoZWxwIjoiY29tLndpZGV2aW5lLmFscGhhIiwiZGVmYXVsdF8iOiJbZGVmYXVsdDogQ1N0cmluZyhodHRwczovL3dpZGV2aW5lLXByb3h5LmFwcHNwb3QuY29tL3Byb3h5KV0ifX0"},{ name : "shaka-src", data : ""},{ name : "hasplayer", data : ""},{ name : "dashjs-src", data : "ewogICAgIjIuOS4zIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi45LjMvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjkuMiI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuOS4yL2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi45LjEiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjkuMS9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuOS4wIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi45LjAvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjguMCI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuOC4wL2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi43LjAiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjcuMC9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuNi44IjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi42LjgvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjYuNyI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuNi43L2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi42LjYiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjYuNi9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuNi41IjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi42LjUvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjYuNCI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuNi40L2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi42LjMiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjYuMy9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuNi4yIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi42LjIvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjYuMSI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuNi4xL2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi42LjAiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjYuMC9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuNS4wIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi41LjAvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjQuMSI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuNC4xL2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi40LjAiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjQuMC9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuMy4wIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi4zLjAvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjIuMCI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuMi4wL2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi4xLjEiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjEuMS9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuMS4wIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi4xLjAvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjAuMC1yYzUiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjAuMC1yYzUvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjAuMC1yYzQiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjAuMC1yYzQvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjAuMCI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuMC4wL2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMS42LjAiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8xLjYuMC9kYXNoLmRlYnVnLmpzIl0sCiAgICAiMS41LjEiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8xLjUuMS9kYXNoLmRlYnVnLmpzIl0sCiAgICAiMS41LjAiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8xLjUuMC9kYXNoLmRlYnVnLmpzIl0sCiAgICAiMS40IjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMS40L2Rhc2guZGVidWcuanMiXSwKICAgICIxLjMuMCI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzEuMy4wL2Rhc2guZGVidWcuanMiXSwKICAgICIxLjIuMCI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzEuMi4wL2Rhc2guYWxsLmpzIl0sCiAgICAiMS4xLjIiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8xLjEuMi9kYXNoLmFsbC5qcyJdLAogICAgIjEuMC4wIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMS4wLjAvZGFzaC5hbGwuanMiXSwKICAgICIwLjIuNSI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzAuMi41L2Rhc2guYWxsLmpzIl0sCiAgICAiMC4yLjQiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8wLjIuNC9kYXNoLmFsbC5qcyJdCn0"},{ name : "hlsjs", data : ""},{ name : "logo", data : "PHN2ZyB2aWV3Qm94PSIwIDAgMjM1IDI2MCIgdmVyc2lvbj0iMS4xIiAKICAgICAgICAgICAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciPgogICAgPHN0eWxlIHR5cGU9InRleHQvY3NzIiA+CiAgICAgICAgPCFbQ0RBVEFbCiAgICAgICAgICAgIC5saW5lIGxpbmUgewogICAgICAgICAgICAgICAgbWFya2VyLWVuZDogdXJsKCNjYXBweSk7CiAgICAgICAgICAgICAgICBzdHJva2UtbGluZWNhcDogInJvdW5kIjsKICAgICAgICAgICAgICAgIHN0cm9rZS13aWR0aDogMTQ7CiAgICAgICAgICAgICAgICBzdHJva2U6IGN1cnJlbnRDb2xvcjsKICAgICAgICAgICAgICAgIHN0cm9rZS1kYXNoYXJyYXk6IDEwMCAxMDA7CiAgICAgICAgICAgICAgICBzdHJva2UtZGFzaG9mZnNldDogLTQ7CiAgICAgICAgICAgIH0KICAgICAgICBdXT4KICAgIDwvc3R5bGU+CiAgICA8ZGVmcz4KICAgIDxtYXJrZXIgaWQ9ImNhcHB5IgogICAgICAgIHZpZXdCb3g9Ii0yIDAgMzAgMTAiIHJlZlg9IjAiIHJlZlk9IjUiIAogICAgICAgIG1hcmtlclVuaXRzPSJzdHJva2VXaWR0aCIKICAgICAgICBtYXJrZXJXaWR0aD0iMy4wIiBtYXJrZXJIZWlnaHQ9IjEiCiAgICAgICAgb3JpZW50PSJhdXRvIj4KICAgICAgICA8cmVjdCBmaWxsPSJjdXJyZW50Q29sb3IiIHg9Ii01IiB3aWR0aD0iMzAiIGhlaWdodD0iMTAiIHJ4PSI1IiByeT0iNSI+PC9yZWN0PgogICAgPC9tYXJrZXI+CiAgICA8L2RlZnM+CiAgICA8ZyBjbGFzcz0ibGluZSIgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMzAsMzApIj4KICAgICAgICA8cG9seWxpbmUgaWQ9ImhleGFnb24iIHBvaW50cz0iODcsMCAxNzQsNTAgMTc0LDE1MCA4NywyMDAgMCwxNTAgMCw1MCA4NywwIiBmaWxsPSIjRUJFQkVCMDAiPjwvcG9seWxpbmU+CiAgICAgICAgPGxpbmUgeDE9Ijg3IiAgIHkxPSIwIiAgICAgIHgyPSIxNzQiICAgIHkyPSI1MCIgLz4KICAgICAgICA8bGluZSB4MT0iMTc0IiAgeTE9IjUwIiAgICAgeDI9IjE3NCIgICAgeTI9IjE1MCIvPgogICAgICAgIDxsaW5lIHgxPSIxNzQiICB5MT0iMTUwIiAgICB4Mj0iODciICAgICB5Mj0iMjAwIi8+CiAgICAgICAgPGxpbmUgeDE9Ijg3IiAgIHkxPSIyMDAiICAgIHgyPSIwIiAgICAgIHkyPSIxNTAiLz4KICAgICAgICA8bGluZSB4MT0iMCIgICAgeTE9IjE1MCIgICAgeDI9IjAiICAgICAgeTI9IjUwIiAvPgogICAgICAgIDxsaW5lIHgxPSIwIiAgICB5MT0iNTAiICAgIHgyPSI4NyIgICAgICB5Mj0iMCIgIC8+CiAgICAgICAgPGcgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoNzAsNzUpIj4KICAgICAgICAgICAgPCEtLXBvbHlsaW5lIGlkPSJwbGF5IiBwb2ludHM9IjAsMCA1MCwyNSAwLDUwIDAsMCIgZmlsbD0iY3VycmVudENvbG9yIi8tLT4KICAgICAgICA8L2c+CiAgICA8L2c+Cjwvc3ZnPg"},{ name : "hlsjs-argan", data : "eyJkcm1fc2VydmVyX3dpZGV2aW5lIjp7ImhlbHAiOiJjb20ud2lkZXZpbmUuYWxwaGEiLCJkZWZhdWx0XyI6IltkZWZhdWx0OiBDU3RyaW5nKGh0dHBzOi8vd2lkZXZpbmUtcHJveHkuYXBwc3BvdC5jb20vcHJveHkpXSJ9fQ"},{ name : "controls_template", data : "PGRpdiBpZD0iY29udHJvbHNfZWxlbWVudHMiPgogICAgPHNjcmlwdD4KICAgICAgICAvKgogICAgICAgIHZhciBjb250cm9sc19lbGVtZW50cyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgIHZhciB0YXJnZXQgPSB3aW5kb3cuZnJhbWVFbGVtZW50LnBhcmVudEVsZW1lbnQ7CiAgICAgICAgdGFyZ2V0LnBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNvbnRyb2xzX2VsZW1lbnRzLCB0YXJnZXQubmV4dFNpYmxpbmcpOwogICAgICAgICovCiAgICAgICAgdmFyIGxvYWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJsb2FkZXIiKTsKICAgICAgICAKICAgICAgICB2YXIgY29udGFpbmVyID0gd2luZG93LmZyYW1lRWxlbWVudC5wYXJlbnRFbGVtZW50OwogICAgICAgIGNsZWFyTWVudSA9IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHdoaWxlKGNvbnRyb2xzX2VsZW1lbnRzLmZpcnN0Q2hpbGQpCiAgICAgICAgICAgICAgICBjb250cm9sc19lbGVtZW50cy5yZW1vdmVDaGlsZChjb250cm9sc19lbGVtZW50cy5maXJzdENoaWxkKTsKICAgICAgICB9CiAgICAgICAgdmFyIHJlc2V0Q29udHJvbHNIZWlnaHQgPSBmdW5jdGlvbigpewogICAgICAgICAgICAvL29mZnNldCBjb250YWluZXIgaGVpZ2h0IHdpdGggaGVpZ2h0IG9mIGNvbnRyb2xzCiAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBjb250cm9sc19lbGVtZW50cy5wYXJlbnRFbGVtZW50Lm9mZnNldEhlaWdodCArICJweCI7CiAgICAgICAgfQogICAgICAgIHZhciByZXNldEFzcGVjdFJhdGlvID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgLy9jb3JyZWN0IGNvbnRhaW5lciBhc3BlY3QgcmF0aW8gd2l0aCB2aWRlbyBhc3BlY3QgcmF0aW8KICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLnBhZGRpbmdCb3R0b20gPSAxMDAvdmlkZW8ub2Zmc2V0V2lkdGgqdmlkZW8ub2Zmc2V0SGVpZ2h0ICsgIiUiOwogICAgICAgICAgICBsb2FkZXIuc3R5bGUuaGVpZ2h0ID0gdmlkZW8ub2Zmc2V0SGVpZ2h0ICsgInB4IjsKICAgICAgICB9CiAgICAgICAgdmFyIG1lbnVzID0ge307CiAgICAgICAgcmVtb3ZlTWVudSA9IGZ1bmN0aW9uKHRpdGxlKSB7CiAgICAgICAgICAgIGlmKHRpdGxlIGluIG1lbnVzKXsKICAgICAgICAgICAgICAgIG1lbnVzW3RpdGxlXS5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKG1lbnVzW3RpdGxlXSk7CiAgICAgICAgICAgICAgICBkZWxldGUgbWVudXNbdGl0bGVdOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGFkZE1lbnUgPSBmdW5jdGlvbih0aXRsZSwgb3B0aW9ucywgaGFuZGxlciwgc2VsZWN0ZWRJbmRleCl7CiAgICAgICAgICAgIHZhciBkaXYgPSBtZW51c1t0aXRsZV0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgICAgICAgICAgdmFyIGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgibGFiZWwiKTsKICAgICAgICAgICAgbGFiZWwuaW5uZXJUZXh0ID0gdGl0bGU7CiAgICAgICAgICAgIGRpdi5hcHBlbmRDaGlsZChsYWJlbCk7CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNlbGVjdCIpOwogICAgICAgICAgICBsYWJlbC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIGZ1bmN0aW9uKGUpewogICAgICAgICAgICAgICAgc2VsZWN0LmNsaWNrKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgb3B0aW9ucy5sZW5ndGg7IGkrKyl7CiAgICAgICAgICAgICAgICB2YXIgbyA9IG9wdGlvbnNbaV07CiAgICAgICAgICAgICAgICB2YXIgb3B0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgib3B0aW9uIik7CiAgICAgICAgICAgICAgICBvcHQuaW5uZXJUZXh0ID0gby50aXRsZTsKICAgICAgICAgICAgICAgIG9wdC5pbmZvID0gby5pbmZvOwogICAgICAgICAgICAgICAgaWYoaSA9PSBzZWxlY3RlZEluZGV4KQogICAgICAgICAgICAgICAgICAgIG9wdC5zZWxlY3RlZCA9IHRydWU7CiAgICAgICAgICAgICAgICBzZWxlY3QuYXBwZW5kQ2hpbGQob3B0KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoc2VsZWN0KTsKICAgICAgICAgICAgc2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoImNoYW5nZSIsIGhhbmRsZXIpOwogICAgICAgICAgICBjb250cm9sc19lbGVtZW50cy5hcHBlbmRDaGlsZChkaXYpOwogICAgICAgICAgICAKICAgICAgICAgICAgcmVzZXRDb250cm9sc0hlaWdodCgpOwogICAgICAgIH07CiAgICAgICAgdmFyIGxvYWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJsb2FkZXIiKTsKICAgICAgICBmdW5jdGlvbiBoaWRlTG9hZGVyKCl7CiAgICAgICAgICAgIGlmKCFsb2FkZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCJoaWRlIikpCiAgICAgICAgICAgICAgICBsb2FkZXIuY2xhc3NMaXN0LmFkZCgiaGlkZSIpOwogICAgICAgIH0KICAgICAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCJsb2FkZWRkYXRhIiwgcmVzZXRBc3BlY3RSYXRpbyk7CiAgICAgICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcigiZXJyb3IiLCBoaWRlTG9hZGVyKTsKICAgICAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCJsb2Fkc3RhcnQiLCByZXNldEFzcGVjdFJhdGlvKTsKICAgICAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCJwbGF5aW5nIiwgcmVzZXRBc3BlY3RSYXRpbyk7CiAgICAgICAgdmFyIGJvdGggPSBmdW5jdGlvbihlKXsKICAgICAgICAgICAgcmVzZXRBc3BlY3RSYXRpbygpOwogICAgICAgICAgICByZXNldENvbnRyb2xzSGVpZ2h0KCk7CiAgICAgICAgICAgIGhpZGVMb2FkZXIoKTsKICAgICAgICB9OwogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJyZXNpemUiLCBib3RoKTsKICAgICAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCJsb2FkZWRtZXRhZGF0YSIsIGJvdGgpOwogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJsb2FkIiwgYm90aCk7CiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoImtleWRvd24iLCBmdW5jdGlvbihlKXsKICAgICAgICAgICAgY29udGFpbmVyLmRpc3BhdGNoRXZlbnQobmV3IGUuY29uc3RydWN0b3IoZS50eXBlLCBlKSk7CiAgICAgICAgfSk7CiAgICA8L3NjcmlwdD4KPC9kaXY+Cg"},{ name : "dashjs-argan", data : "eyJkcm1fc2VydmVyX3BsYXlyZWFkeSI6eyJoZWxwIjoiY29tLm1pY3Jvc29mdC5wbGF5cmVhZHkiLCJkZWZhdWx0XyI6IltkZWZhdWx0OiBDU3RyaW5nKGh0dHBzOi8vcGxheXJlYWR5LmRpcmVjdHRhcHMubmV0L3ByL3N2Yy9yaWdodHNtYW5hZ2VyLmFzbXg/UGxheVJpZ2h0PTEmVXNlU2ltcGxlTm9uUGVyc2lzdGVudExpY2Vuc2U9MSZQbGF5RW5hYmxlcnM9Nzg2NjI3RDgtQzJBNi00NEJFLThGODgtMDhBRTI1NUIwMUE3KV0ifSwiZHJtX3NlcnZlcl93aWRldmluZSI6eyJoZWxwIjoiY29tLndpZGV2aW5lLmFscGhhIiwiZGVmYXVsdF8iOiJbZGVmYXVsdDogQ1N0cmluZyhodHRwczovL3dpZGV2aW5lLXByb3h5LmFwcHNwb3QuY29tL3Byb3h5KV0ifSwiZGFzaGpzX2xvZ2xldmVsIjp7ImhlbHAiOiIwID09IG5vbmUgdG8gNSA9PSBkZWJ1ZyIsImRlZmF1bHRfIjoiW2RlZmF1bHQ6IENJbnQoNCldIn19"}];
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
Argan.HELP_RESOURCE_KEY = "_help_map";
Main.playerSrcExtended = new haxe_ds_StringMap();
Main.id = 0;
haxe_Template.splitter = new EReg("(::[A-Za-z0-9_ ()&|!+=/><*.\"-]+::|\\$\\$([A-Za-z0-9_-]+)\\()","");
haxe_Template.expr_splitter = new EReg("(\\(|\\)|[ \r\n\t]*\"[^\"]*\"[ \r\n\t]*|[!+=/><*.&|-]+)","");
haxe_Template.expr_trim = new EReg("^[ ]*([^ ]+)[ ]*$","");
haxe_Template.expr_int = new EReg("^[0-9]+$","");
haxe_Template.expr_float = new EReg("^([+-]?)(?=\\d|,\\d)\\d*(,\\d*)?([Ee]([+-]?\\d+))?$","");
haxe_Template.globals = { };
haxe_Template.hxKeepArrayIterator = HxOverrides.iter([]);
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this);
