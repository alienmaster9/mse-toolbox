/*
 *	uapi.js ðŸ“º  stable-20-gfd45ad3
 */
// Generated by Haxe 4.0.0-rc.2+77068e1
(function ($hx_exports, $global) { "use strict";
$hx_exports["uapi"] = $hx_exports["uapi"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Argan = function() { };
$hxClasses["Argan"] = Argan;
Argan.__name__ = "Argan";
Argan.start = function(config) {
	if(null != config) {
		var args_set = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = Reflect.fields(config);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var value = Reflect.field(config,f);
			if(__map_reserved[f] != null) {
				args_set.setReserved(f,value);
			} else {
				args_set.h[f] = value;
			}
		}
		Argan.args = args_set;
	}
};
Argan.objectFromMap = function(map) {
	var obj = { };
	var k = map.keys();
	while(k.hasNext()) {
		var k1 = k.next();
		obj[k1] = __map_reserved[k1] != null ? map.getReserved(k1) : map.h[k1];
	}
	return obj;
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Main = $hx_exports["uapi"] = function() {
	this.hooks = uapi_Hooks;
};
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.main = function() {
};
Main.getPlayers = function() {
	var players = { };
	var resources = haxe_Resource.listNames();
	resources.push("native");
	var _g = 0;
	while(_g < resources.length) {
		var n = resources[_g];
		++_g;
		if(n.indexOf("logo") == -1 && n.indexOf("template") == -1 && n != Argan.HELP_RESOURCE_KEY && !StringTools.endsWith(n,"-src") && !StringTools.endsWith(n,"-argan")) {
			players[n] = JSON.parse(haxe_Resource.getString(n + "-argan"));
		}
	}
	return players;
};
Main.getHelp = function() {
	return Argan.objectFromMap(haxe_Unserializer.run(haxe_Resource.getString("_help_map")));
};
Main.getPlayerVersions = function(player) {
	return JSON.parse(haxe_Resource.getString("" + player + "-src"));
};
Main.addPlayerSrc = function(player,urls) {
	urls = urls.map(function(url) {
		return Main.absUrl(url);
	});
	var _this = Main.playerSrcExtended;
	if(__map_reserved[player] != null) {
		_this.setReserved(player,urls);
	} else {
		_this.h[player] = urls;
	}
};
Main.overridePlayerSrcs = function(player_srcs_object) {
	Main.playerSrcOverride = player_srcs_object;
};
Main.writePlayer = function(parent,uri,player_version_string,player_config,inject_head,inject_body) {
	if(player_version_string == null) {
		player_version_string = "dashjs";
	}
	Argan.start(player_config);
	var iframe = window.document.createElement("iframe");
	iframe.src = "about:blank";
	iframe.setAttribute("importance","high");
	iframe.setAttribute("border","0");
	iframe.setAttribute("allowfullscreen","true");
	iframe.setAttribute("seamless","true");
	iframe.setAttribute("frameborder","0");
	var meta = player_version_string.split(":");
	var player = meta[0];
	if(haxe_Resource.listNames().indexOf(player) == -1 && player != "native") {
		throw new js__$Boot_HaxeError("unknown player \"" + player + "\", please select any of " + Std.string(haxe_Resource.listNames()) + ".");
	}
	var playerBody = haxe_Resource.getString("" + player);
	if(playerBody != null && Object.prototype.hasOwnProperty.call(window,"Blob")) {
		var split = playerBody.split(",");
		playerBody = URL.createObjectURL(new Blob([haxe_crypto_Base64.decode(split[1]).b.bufferValue],{ type : split[0].split(";")[0]}));
	}
	var version = meta[1];
	var head = [];
	var body = ["<script src=\"" + playerBody + "\"></script>"];
	var error = null;
	var last_src = "#";
	if(player == "native") {
		body = ["\n\t\t\t\t<script>\n\t\t\t\t\tvideo.src = uri;\n\t\t\t\t\tif(!!window.ApplePaySession){ //safari\n\t\t\t\t\t\tvideo.addEventListener(\"webkitneedkey\", (e) => {});\n\t\t\t\t\t\tvideo.addEventListener(\"webkitkeymessage\", (e) => {});\n\t\t\t\t\t\tvideo.addEventListener(\"webkitkeyadded\", (e) => {});\n\t\t\t\t\t\tvideo.addEventListener(\"webkitkeyerror\", (e) => {});\n\t\t\t\t\t}\n\t\t\t\t</script>\n\t\t\t"];
	} else {
		var _this = Main.playerSrcExtended;
		if(__map_reserved[player_version_string] != null ? _this.existsReserved(player_version_string) : _this.h.hasOwnProperty(player_version_string)) {
			var _g = 0;
			var _this1 = Main.playerSrcExtended;
			var _g1 = __map_reserved[player_version_string] != null ? _this1.getReserved(player_version_string) : _this1.h[player_version_string];
			while(_g < _g1.length) {
				var src = _g1[_g];
				++_g;
				last_src = src;
				head.push("<script crossorigin src=\"" + last_src + "\"></script>");
			}
		} else {
			var srcs = Main.playerSrcOverride == null ? JSON.parse(haxe_Resource.getString("" + player + "-src")) : Main.playerSrcOverride;
			var _g2 = 0;
			var _g11 = version == null ? Reflect.fields(srcs) : [version];
			while(_g2 < _g11.length) {
				var s = _g11[_g2];
				++_g2;
				version = s;
				if(Object.prototype.hasOwnProperty.call(srcs,s)) {
					var list = Reflect.field(srcs,s);
					var _g3 = 0;
					while(_g3 < list.length) {
						var src1 = list[_g3];
						++_g3;
						last_src = src1;
						head.push("<script crossorigin src=\"" + last_src + "\"></script>");
					}
				} else {
					error = "unknown version:" + version + " for \"" + player + "\"";
				}
				break;
			}
		}
	}
	Main.handleEitherType(inject_head,head);
	Main.handleEitherType(inject_body,body);
	var html = new haxe_Template(haxe_Resource.getString("template"));
	var html1 = encodeURIComponent(uri);
	var html2 = haxe_Resource.getString("logo");
	var html3;
	var html4;
	if(Argan.args != null) {
		var _this2 = Argan.args;
		html4 = __map_reserved["autoplay"] != null ? _this2.existsReserved("autoplay") : _this2.h.hasOwnProperty("autoplay");
	} else {
		html4 = false;
	}
	if(html4) {
		var _this3 = Argan.args;
		html3 = (__map_reserved["autoplay"] != null ? _this3.getReserved("autoplay") : _this3.h["autoplay"]) != "false";
	} else {
		html3 = true;
	}
	var html5;
	var html6;
	if(Argan.args != null) {
		var _this4 = Argan.args;
		html6 = __map_reserved["muted"] != null ? _this4.existsReserved("muted") : _this4.h.hasOwnProperty("muted");
	} else {
		html6 = false;
	}
	if(html6) {
		var _this5 = Argan.args;
		html5 = (__map_reserved["muted"] != null ? _this5.getReserved("muted") : _this5.h["muted"]) != "false";
	} else {
		html5 = false;
	}
	var html7;
	var html8;
	if(Argan.args != null) {
		var _this6 = Argan.args;
		html8 = __map_reserved["controls"] != null ? _this6.existsReserved("controls") : _this6.h.hasOwnProperty("controls");
	} else {
		html8 = false;
	}
	if(html8) {
		var _this7 = Argan.args;
		html7 = (__map_reserved["controls"] != null ? _this7.getReserved("controls") : _this7.h["controls"]) != "false";
	} else {
		html7 = true;
	}
	var html9;
	var html10;
	if(Argan.args != null) {
		var _this8 = Argan.args;
		html10 = __map_reserved["playsinline"] != null ? _this8.existsReserved("playsinline") : _this8.h.hasOwnProperty("playsinline");
	} else {
		html10 = false;
	}
	if(html10) {
		var _this9 = Argan.args;
		html9 = (__map_reserved["playsinline"] != null ? _this9.getReserved("playsinline") : _this9.h["playsinline"]) != "false";
	} else {
		html9 = true;
	}
	var html11 = head.join("\n");
	var html12 = body.join("\n");
	var html13 = error != null ? "<pre>uapi error:\n" + error + "</pre>" : haxe_Resource.getString("controls_template");
	var html14 = html.execute({ uri : html1, loading : html2, title : player, title_version : version, title_href : last_src, attr_autoplay : html3, attr_muted : html5, attr_controls : html7, attr_playsinline : html9, head : html11, body : html12, controls : html13},{ poster : function(resolve) {
		var canvasDataURL = Main.generatePosterImage(uri,player.toUpperCase());
		var split1 = canvasDataURL.split(",");
		var retval = Object.prototype.hasOwnProperty.call(window,"Blob") ? URL.createObjectURL(new Blob([haxe_crypto_Base64.decode(split1[1]).b.bufferValue],{ type : split1[0].split(";")[0]})) : canvasDataURL;
		return "poster=\"" + retval + "\"";
	}});
	var container = window.document.createElement("div");
	container.style.position = "relative";
	container.style.width = "100%";
	container.style.height = error != null ? "44px" : "0";
	container.style.boxSizing = "unset";
	iframe.id = iframe.name = "uapi.js/" + player + "(" + version + ")/" + Main.id++;
	iframe.style.position = "absolute";
	iframe.style.resize = "both";
	iframe.style.top = iframe.style.left = "0";
	iframe.style.width = iframe.style.height = "100%";
	container.appendChild(iframe);
	parent.appendChild(container);
	var retval1 = new Promise(function(resolve1,reject) {
		var iframe_loaded = false;
		var delayed_errors = [];
		iframe.addEventListener("load",function(event) {
			iframe_loaded = true;
			while(delayed_errors.length > 0) (delayed_errors.pop())();
			var hndl = null;
			hndl = { reload : function(uri1,version1,config) {
				if(version1 == null) {
					version1 = player_version_string;
				}
				if(config == null) {
					config = player_config;
				}
				hndl.frame.parentElement.parentElement.removeChild(hndl.frame.parentElement);
				return Main.writePlayer(parent,uri1,version1,config,inject_head,inject_body).catch(function(e) {
					hndl.frame = e.target.frameElement;
					return hndl;
				}).then(function(nframe) {
					var _g4 = 0;
					var _g12 = Reflect.fields(nframe);
					while(_g4 < _g12.length) {
						var k = _g12[_g4];
						++_g4;
						hndl[k] = Reflect.field(nframe,k);
					}
					return nframe;
				});
			}, destroy : function() {
				iframe.parentElement.parentElement.removeChild(iframe.parentElement);
				hndl = null;
			}, frame : iframe, player : Reflect.field(iframe.contentWindow,"player"), video : Reflect.field(iframe.contentWindow,"video"), controls_custom : Reflect.field(iframe.contentWindow,"controls_custom")};
			var vview = Reflect.field(window,"vview");
			if(vview != null) {
				var h = Reflect.field(vview,"frameAdded");
				h.apply(vview,[]);
			}
			resolve1(hndl);
		});
		var topWindow = window;
		var handleError = null;
		var messageCount = 0;
		handleError = function(error1,message,$window,logToConsole) {
			if(logToConsole == null) {
				logToConsole = true;
			}
			var handleError1;
			var handleError2;
			if(Argan.args != null) {
				var _this10 = Argan.args;
				handleError2 = __map_reserved["quiet"] != null ? _this10.existsReserved("quiet") : _this10.h.hasOwnProperty("quiet");
			} else {
				handleError2 = false;
			}
			if(handleError2) {
				var _this11 = Argan.args;
				handleError1 = (__map_reserved["quiet"] != null ? _this11.getReserved("quiet") : _this11.h["quiet"]) != "false";
			} else {
				handleError1 = false;
			}
			if(handleError1) {
				return;
			}
			if(iframe_loaded) {
				var msg = $window.document.createElement("div");
				msg.className = "message";
				message = StringTools.replace(message,"\\n","\n");
				msg.innerText += "ðŸ’¬ " + message + "\n";
				$window.document.getElementById("error").appendChild(msg);
				if(logToConsole) {
					topWindow.console.error(error1);
				}
				var handleError3 = messageCount += 1;
				$window.messagecount.innerText = "" + handleError3 + " message" + (messageCount > 1 ? "s" : "");
				$window.resetControlsHeight();
				$window.resetAspectRatio();
			} else {
				var f = handleError;
				var a1 = error1;
				var a2 = message;
				var a3 = $window;
				var a4 = logToConsole;
				var handleError4 = function() {
					f(a1,a2,a3,a4);
				};
				delayed_errors.push(handleError4);
			}
		};
		var iframe1 = iframe;
		iframe1.hook = function(contentWindow) {
			contentWindow.config = player_config != null ? Reflect.field(player_config,player) : player_config;
			contentWindow.addEventListener("error",function(e1) {
				if(e1.message != "ResizeObserver loop limit exceeded") {
					reject(e1);
					handleError(e1,"error.message:" + e1.message + ", " + e1.filename + ":" + e1.lineno,contentWindow);
				}
			});
			contentWindow.onunhandledrejection = function(e2) {
				reject(e2);
				var retval2 = e2.reason.toString();
				handleError(e2,retval2,contentWindow);
			};
			uapi_Hooks.hookMethods(contentWindow.console,["error","warn"]).pipe(function(method,args) {
				handleError(args,"console." + method + ":\t" + Std.string(args),contentWindow,false);
			});
		};
		iframe1.hook_end = function(contentWindow1,video) {
			contentWindow1.messagecount.addEventListener("click",function(event1) {
				event1.target.parentElement.classList.toggle("folded");
				contentWindow1.resetControlsHeight();
				contentWindow1.resetAspectRatio();
			});
			video.addEventListener("error",function(e3) {
				window["lastError"] = video.error;
				var msg1;
				switch(video.error.code) {
				case 1:
					msg1 = "MEDIA_ERR_ABORTED";
					break;
				case 2:
					msg1 = "MEDIA_ERR_NETWORK";
					break;
				case 3:
					msg1 = "MEDIA_ERR_DECODE";
					break;
				case 4:
					msg1 = "MEDIA_ERR_SRC_NOT_SUPPORTED";
					break;
				case 5:
					msg1 = "MEDIA_ERR_ENCRYPTED";
					break;
				default:
					msg1 = "UNKNOWN";
				}
				if(Reflect.field(video.error,"message") != null) {
					msg1 += "\nMediaError.message: " + Std.string(Reflect.field(video.error,"message"));
				}
				var log = "HTMLMediaElement MediaError while playing\n" + uri + "\n\n" + msg1 + "\n\nsee\nhttps://developer.mozilla.org/en-US/docs/Web/API/MediaError for more details";
				handleError(e3,log,contentWindow1);
				if(player != "native" && !Object.prototype.hasOwnProperty.call(contentWindow1,"player")) {
					throw new js__$Boot_HaxeError("unable to load " + player_version_string);
				}
			});
		};
	});
	if(uapi_JsUtils.isIE()) {
		var doc = iframe.contentWindow != null ? iframe.contentWindow : iframe.contentDocument;
		if(doc.document) {
			doc = doc.document;
		}
		doc.open();
		doc.write(html14);
		doc.close();
	} else if(Object.prototype.hasOwnProperty.call(window,"Blob")) {
		iframe.setAttribute("sandbox","allow-scripts allow-same-origin allow-modals");
		var tmp = haxe_io_Bytes.ofString(html14).b.bufferValue;
		iframe.src = URL.createObjectURL(new Blob([tmp],{ type : "text/html"}));
	} else {
		var tmp1 = "javascript:atob(\"" + haxe_crypto_Base64.encode(haxe_io_Bytes.ofString(html14));
		iframe.src = tmp1 + "\");";
	}
	return retval1;
};
Main.handleEitherType = function(either,array) {
	if(typeof(either) == "string") {
		array.push(either);
	} else if(either != null) {
		var arr = ((either) instanceof Array) && either.__enum__ == null ? either : [either];
		var _g = 0;
		while(_g < arr.length) {
			var el = arr[_g];
			++_g;
			var pos = Object.prototype.hasOwnProperty.call(el,"index") && el.index == null;
			array.splice(pos ? el.index : -1,0,el.content);
		}
	}
};
Main.HashPipe = function(immediate) {
	return Main.HashPipeJs(immediate);
};
Main.HashPipeJs = function(immediate) {
	if(immediate == null) {
		immediate = false;
	}
	return { pipe : function(func) {
		var retval = uapi_Hooks.HashPipe(immediate).pipe(function(data) {
			var retval1 = Main.mapToDynamic(data.args);
			func({ args : retval1, values : data.values, update : function(args,values,rewrite,toggle) {
				data.update(Main.dynamicToMap(args),values,rewrite,toggle,true);
			}});
		});
		var _hx_func = retval.update;
		var _hx_args = retval.args();
		retval.args = function() {
			return Main.mapToDynamic(_hx_args);
		};
		retval.update = function(args1,values1,rewrite1,toggle1) {
			var tmp = Main.dynamicToMap(args1);
			_hx_func(tmp,values1,rewrite1,toggle1);
		};
		return retval;
	}};
};
Main.KeyValueStringParser = function(location,QueryString) {
	return Main.KeyValueStringParserJs(location,QueryString);
};
Main.KeyValueStringParserJs = function(location,QueryString) {
	if(QueryString == null) {
		QueryString = true;
	}
	return Main.mapToDynamic(uapi_Utils.KeyValueStringParser(location,QueryString));
};
Main.Version = function() {
	return "stable-20-gfd45ad3, 2019-06-04 15:37:14";
};
Main.write = function(str) {
	uapi_JsUtils.write(str);
};
Main.loadScript = function(str) {
	uapi_JsUtils.loadScript(str);
};
Main.absUrl = function(url) {
	var abs = window.document.createElement("a");
	abs.href = url;
	return abs.href;
};
Main.requestUrl = function(url,binary,method,headers,body) {
	return uapi_JsUtils.HttpRequest(url,binary,method,headers,body);
};
Main.dynamicToMap = function(object) {
	var retval = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = Reflect.fields(object);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		var value = Reflect.field(object,f);
		if(__map_reserved[f] != null) {
			retval.setReserved(f,value);
		} else {
			retval.h[f] = value;
		}
	}
	return retval;
};
Main.mapToDynamic = function(map) {
	var retval = { };
	var k = map.keys();
	while(k.hasNext()) {
		var k1 = k.next();
		retval[k1] = __map_reserved[k1] != null ? map.getReserved(k1) : map.h[k1];
	}
	return retval;
};
Main.generatePosterImage = function(uri,title) {
	var canvas = window.document.createElement("canvas");
	canvas.width = 720;
	canvas.height = 404;
	var ctx = canvas.getContext("2d");
	ctx.font = "bold 55pt sans-serif";
	ctx.fillStyle = "#333";
	ctx.textAlign = "center";
	ctx.fillText(title.toUpperCase(),360,200);
	ctx.font = "italic 12pt sans-serif";
	ctx.fillText(uri,360,250);
	return canvas.toDataURL();
};
Main.prototype = {
	hooks: null
	,__class__: Main
};
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x, x && x[0]=="0" && (x[1]=="x" || x[1]=="X") ? 16 : 10);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var c = _g_s.charCodeAt(_g_offset++);
		if(c >= 55296 && c < 56319) {
			c = c - 55232 << 10 | _g_s.charCodeAt(_g_offset++) & 1023;
		}
		var code = c;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,remove: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		this.attributeMap.remove(att);
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		return this.attributeMap.keys();
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return HxOverrides.iter(ret);
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.prototype = {
	set: null
	,exists: null
	,__class__: haxe_IMap
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = "haxe.Resource";
haxe_Resource.listNames = function() {
	var _g = [];
	var _g1 = 0;
	var _g2 = haxe_Resource.content;
	while(_g1 < _g2.length) {
		var x = _g2[_g1];
		++_g1;
		_g.push(x.name);
	}
	return _g;
};
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
var haxe__$Template_TemplateExpr = $hxEnums["haxe._Template.TemplateExpr"] = { __ename__ : true, __constructs__ : ["OpVar","OpExpr","OpIf","OpStr","OpBlock","OpForeach","OpMacro"]
	,OpVar: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["v"],$_)
	,OpExpr: ($_=function(expr) { return {_hx_index:1,expr:expr,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr"],$_)
	,OpIf: ($_=function(expr,eif,eelse) { return {_hx_index:2,expr:expr,eif:eif,eelse:eelse,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr","eif","eelse"],$_)
	,OpStr: ($_=function(str) { return {_hx_index:3,str:str,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["str"],$_)
	,OpBlock: ($_=function(l) { return {_hx_index:4,l:l,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["l"],$_)
	,OpForeach: ($_=function(expr,loop) { return {_hx_index:5,expr:expr,loop:loop,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr","loop"],$_)
	,OpMacro: ($_=function(name,params) { return {_hx_index:6,name:name,params:params,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["name","params"],$_)
};
var haxe_Template = function(str) {
	var tokens = this.parseTokens(str);
	this.expr = this.parseBlock(tokens);
	if(!tokens.isEmpty()) {
		throw new js__$Boot_HaxeError("Unexpected '" + Std.string(tokens.first().s) + "'");
	}
};
$hxClasses["haxe.Template"] = haxe_Template;
haxe_Template.__name__ = "haxe.Template";
haxe_Template.prototype = {
	expr: null
	,context: null
	,macros: null
	,stack: null
	,buf: null
	,execute: function(context,macros) {
		this.macros = macros == null ? { } : macros;
		this.context = context;
		this.stack = new haxe_ds_List();
		this.buf = new StringBuf();
		this.run(this.expr);
		return this.buf.b;
	}
	,resolve: function(v) {
		if(v == "__current__") {
			return this.context;
		}
		var value = Reflect.getProperty(this.context,v);
		if(value != null || Object.prototype.hasOwnProperty.call(this.context,v)) {
			return value;
		}
		var _g_head = this.stack.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var ctx = val;
			value = Reflect.getProperty(ctx,v);
			if(value != null || Object.prototype.hasOwnProperty.call(ctx,v)) {
				return value;
			}
		}
		return Reflect.field(haxe_Template.globals,v);
	}
	,parseTokens: function(data) {
		var tokens = new haxe_ds_List();
		while(haxe_Template.splitter.match(data)) {
			var p = haxe_Template.splitter.matchedPos();
			if(p.pos > 0) {
				tokens.add({ p : HxOverrides.substr(data,0,p.pos), s : true, l : null});
			}
			if(HxOverrides.cca(data,p.pos) == 58) {
				tokens.add({ p : HxOverrides.substr(data,p.pos + 2,p.len - 4), s : false, l : null});
				data = haxe_Template.splitter.matchedRight();
				continue;
			}
			var parp = p.pos + p.len;
			var npar = 1;
			var params = [];
			var part = "";
			while(true) {
				var c = HxOverrides.cca(data,parp);
				++parp;
				if(c == 40) {
					++npar;
				} else if(c == 41) {
					--npar;
					if(npar <= 0) {
						break;
					}
				} else if(c == null) {
					throw new js__$Boot_HaxeError("Unclosed macro parenthesis");
				}
				if(c == 44 && npar == 1) {
					params.push(part);
					part = "";
				} else {
					part += String.fromCodePoint(c);
				}
			}
			params.push(part);
			tokens.add({ p : haxe_Template.splitter.matched(2), s : false, l : params});
			data = HxOverrides.substr(data,parp,data.length - parp);
		}
		if(data.length > 0) {
			tokens.add({ p : data, s : true, l : null});
		}
		return tokens;
	}
	,parseBlock: function(tokens) {
		var l = new haxe_ds_List();
		while(true) {
			var t = tokens.first();
			if(t == null) {
				break;
			}
			if(!t.s && (t.p == "end" || t.p == "else" || HxOverrides.substr(t.p,0,7) == "elseif ")) {
				break;
			}
			l.add(this.parse(tokens));
		}
		if(l.length == 1) {
			return l.first();
		}
		return haxe__$Template_TemplateExpr.OpBlock(l);
	}
	,parse: function(tokens) {
		var t = tokens.pop();
		var p = t.p;
		if(t.s) {
			return haxe__$Template_TemplateExpr.OpStr(p);
		}
		if(t.l != null) {
			var pe = new haxe_ds_List();
			var _g = 0;
			var _g1 = t.l;
			while(_g < _g1.length) {
				var p1 = _g1[_g];
				++_g;
				pe.add(this.parseBlock(this.parseTokens(p1)));
			}
			return haxe__$Template_TemplateExpr.OpMacro(p,pe);
		}
		if(HxOverrides.substr(p,0,3) == "if ") {
			p = HxOverrides.substr(p,3,p.length - 3);
			var e = this.parseExpr(p);
			var eif = this.parseBlock(tokens);
			var t1 = tokens.first();
			var eelse;
			if(t1 == null) {
				throw new js__$Boot_HaxeError("Unclosed 'if'");
			}
			if(t1.p == "end") {
				tokens.pop();
				eelse = null;
			} else if(t1.p == "else") {
				tokens.pop();
				eelse = this.parseBlock(tokens);
				t1 = tokens.pop();
				if(t1 == null || t1.p != "end") {
					throw new js__$Boot_HaxeError("Unclosed 'else'");
				}
			} else {
				t1.p = HxOverrides.substr(t1.p,4,t1.p.length - 4);
				eelse = this.parse(tokens);
			}
			return haxe__$Template_TemplateExpr.OpIf(e,eif,eelse);
		}
		if(HxOverrides.substr(p,0,8) == "foreach ") {
			p = HxOverrides.substr(p,8,p.length - 8);
			var e1 = this.parseExpr(p);
			var efor = this.parseBlock(tokens);
			var t2 = tokens.pop();
			if(t2 == null || t2.p != "end") {
				throw new js__$Boot_HaxeError("Unclosed 'foreach'");
			}
			return haxe__$Template_TemplateExpr.OpForeach(e1,efor);
		}
		if(haxe_Template.expr_splitter.match(p)) {
			return haxe__$Template_TemplateExpr.OpExpr(this.parseExpr(p));
		}
		return haxe__$Template_TemplateExpr.OpVar(p);
	}
	,parseExpr: function(data) {
		var l = new haxe_ds_List();
		var expr = data;
		while(haxe_Template.expr_splitter.match(data)) {
			var p = haxe_Template.expr_splitter.matchedPos();
			var k = p.pos + p.len;
			if(p.pos != 0) {
				l.add({ p : HxOverrides.substr(data,0,p.pos), s : true});
			}
			var p1 = haxe_Template.expr_splitter.matched(0);
			l.add({ p : p1, s : p1.indexOf("\"") >= 0});
			data = haxe_Template.expr_splitter.matchedRight();
		}
		if(data.length != 0) {
			l.add({ p : data, s : true});
		}
		var e;
		try {
			e = this.makeExpr(l);
			if(!l.isEmpty()) {
				throw new js__$Boot_HaxeError(l.first().p);
			}
		} catch( s ) {
			var s1 = ((s) instanceof js__$Boot_HaxeError) ? s.val : s;
			if(typeof(s1) == "string") {
				throw new js__$Boot_HaxeError("Unexpected '" + s1 + "' in " + expr);
			} else {
				throw s;
			}
		}
		return function() {
			try {
				return e();
			} catch( exc ) {
				throw new js__$Boot_HaxeError("Error : " + Std.string(((exc) instanceof js__$Boot_HaxeError) ? exc.val : exc) + " in " + expr);
			}
		};
	}
	,makeConst: function(v) {
		haxe_Template.expr_trim.match(v);
		v = haxe_Template.expr_trim.matched(1);
		if(HxOverrides.cca(v,0) == 34) {
			var str = HxOverrides.substr(v,1,v.length - 2);
			return function() {
				return str;
			};
		}
		if(haxe_Template.expr_int.match(v)) {
			var i = Std.parseInt(v);
			return function() {
				return i;
			};
		}
		if(haxe_Template.expr_float.match(v)) {
			var f = parseFloat(v);
			return function() {
				return f;
			};
		}
		var me = this;
		return function() {
			return me.resolve(v);
		};
	}
	,makePath: function(e,l) {
		var p = l.first();
		if(p == null || p.p != ".") {
			return e;
		}
		l.pop();
		var field = l.pop();
		if(field == null || !field.s) {
			throw new js__$Boot_HaxeError(field.p);
		}
		var f = field.p;
		haxe_Template.expr_trim.match(f);
		f = haxe_Template.expr_trim.matched(1);
		return this.makePath(function() {
			return Reflect.field(e(),f);
		},l);
	}
	,makeExpr: function(l) {
		return this.makePath(this.makeExpr2(l),l);
	}
	,makeExpr2: function(l) {
		var p = l.pop();
		if(p == null) {
			throw new js__$Boot_HaxeError("<eof>");
		}
		if(p.s) {
			return this.makeConst(p.p);
		}
		switch(p.p) {
		case "!":
			var e = this.makeExpr(l);
			return function() {
				var v = e();
				if(v != null) {
					return v == false;
				} else {
					return true;
				}
			};
		case "(":
			var e1 = this.makeExpr(l);
			var p1 = l.pop();
			if(p1 == null || p1.s) {
				throw new js__$Boot_HaxeError(p1);
			}
			if(p1.p == ")") {
				return e1;
			}
			var e2 = this.makeExpr(l);
			var p2 = l.pop();
			if(p2 == null || p2.p != ")") {
				throw new js__$Boot_HaxeError(p2);
			}
			switch(p1.p) {
			case "!=":
				return function() {
					return e1() != e2();
				};
			case "&&":
				return function() {
					return e1() && e2();
				};
			case "*":
				return function() {
					return e1() * e2();
				};
			case "+":
				return function() {
					return e1() + e2();
				};
			case "-":
				return function() {
					return e1() - e2();
				};
			case "/":
				return function() {
					return e1() / e2();
				};
			case "<":
				return function() {
					return e1() < e2();
				};
			case "<=":
				return function() {
					return e1() <= e2();
				};
			case "==":
				return function() {
					return e1() == e2();
				};
			case ">":
				return function() {
					return e1() > e2();
				};
			case ">=":
				return function() {
					return e1() >= e2();
				};
			case "||":
				return function() {
					return e1() || e2();
				};
			default:
				throw new js__$Boot_HaxeError("Unknown operation " + p1.p);
			}
			break;
		case "-":
			var e3 = this.makeExpr(l);
			return function() {
				return -e3();
			};
		}
		throw new js__$Boot_HaxeError(p.p);
	}
	,run: function(e) {
		switch(e._hx_index) {
		case 0:
			var v = e.v;
			var _this = this.buf;
			var x = Std.string(this.resolve(v));
			_this.b += Std.string(x);
			break;
		case 1:
			var e1 = e.expr;
			var _this1 = this.buf;
			var x1 = Std.string(e1());
			_this1.b += Std.string(x1);
			break;
		case 2:
			var eelse = e.eelse;
			var eif = e.eif;
			var e2 = e.expr;
			var v1 = e2();
			if(v1 == null || v1 == false) {
				if(eelse != null) {
					this.run(eelse);
				}
			} else {
				this.run(eif);
			}
			break;
		case 3:
			var str = e.str;
			this.buf.b += str == null ? "null" : "" + str;
			break;
		case 4:
			var l = e.l;
			var _g_head = l.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var e3 = val;
				this.run(e3);
			}
			break;
		case 5:
			var loop = e.loop;
			var e4 = e.expr;
			var v2 = e4();
			try {
				var x2 = $getIterator(v2);
				if(x2.hasNext == null) {
					throw new js__$Boot_HaxeError(null);
				}
				v2 = x2;
			} catch( e5 ) {
				var e6 = ((e5) instanceof js__$Boot_HaxeError) ? e5.val : e5;
				try {
					if(v2.hasNext == null) {
						throw new js__$Boot_HaxeError(null);
					}
				} catch( e7 ) {
					var e8 = ((e7) instanceof js__$Boot_HaxeError) ? e7.val : e7;
					throw new js__$Boot_HaxeError("Cannot iter on " + Std.string(v2));
				}
			}
			this.stack.push(this.context);
			var v3 = v2;
			var ctx = v3;
			while(ctx.hasNext()) {
				var ctx1 = ctx.next();
				this.context = ctx1;
				this.run(loop);
			}
			this.context = this.stack.pop();
			break;
		case 6:
			var params = e.params;
			var m = e.name;
			var v4 = Reflect.field(this.macros,m);
			var pl = [];
			var old = this.buf;
			pl.push($bind(this,this.resolve));
			var _g_head1 = params.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var p = val1;
				if(p._hx_index == 0) {
					var v5 = p.v;
					pl.push(this.resolve(v5));
				} else {
					this.buf = new StringBuf();
					this.run(p);
					pl.push(this.buf.b);
				}
			}
			this.buf = old;
			try {
				var _this2 = this.buf;
				var x3 = Std.string(v4.apply(this.macros,pl));
				_this2.b += Std.string(x3);
			} catch( e9 ) {
				var e10 = ((e9) instanceof js__$Boot_HaxeError) ? e9.val : e9;
				var plstr;
				try {
					plstr = pl.join(",");
				} catch( e11 ) {
					var e12 = ((e11) instanceof js__$Boot_HaxeError) ? e11.val : e11;
					plstr = "???";
				}
				var msg = "Macro call " + m + "(" + plstr + ") failed (" + Std.string(e10) + ")";
				throw new js__$Boot_HaxeError(msg);
			}
			break;
		}
	}
	,__class__: haxe_Template
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Object.create(cl1.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Object.create(cl2.prototype);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c11 << 2 | c2 >> 4;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c12 << 2 | c21 >> 4;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = c21 << 4 | c31 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = s.charCodeAt(i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g2 = 0;
		var _g3 = this.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var c = this.b[i1];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,toString: function() {
		var s_b = "";
		var first = true;
		var l = this.h;
		s_b += "{";
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += ", ";
			}
			s_b += Std.string(Std.string(l.item));
			l = l.next;
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	message: null
	,lineNumber: null
	,positionAtLine: null
	,position: null
	,xml: null
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						var x = __map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s];
						buf.b += Std.string(x);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
			}
			throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len7 = p - start;
		buf.b += len7 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	output: null
	,pretty: null
	,writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType);
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
				}
				var child = HxOverrides.iter(value.children);
				while(child.hasNext()) {
					var child1 = child.next();
					this.writeNode(child1,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType);
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input1 = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input1);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input2 = StringTools.trim(commentContent);
			this.output.b += Std.string(input2);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
			}
			var child2 = HxOverrides.iter(value.children);
			while(child2.hasNext()) {
				var child3 = child2.next();
				this.writeNode(child3,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
		}
		var child = HxOverrides.iter(value.children);
		while(child.hasNext()) {
			var child1 = child.next();
			switch(child1.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child1.nodeType == Xml.Document || child1.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + child1.nodeType);
				}
				if(StringTools.ltrim(child1.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.wrap = function(val) {
	if(((val) instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(((o) instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = l;
			while(_g3 < _g11) {
				var i1 = _g3++;
				str += (i1 > 0 ? "," : "") + js_Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var uapi_Hooks = $hx_exports["uapi"]["hooks"] = function() { };
$hxClasses["uapi.Hooks"] = uapi_Hooks;
uapi_Hooks.__name__ = "uapi.Hooks";
uapi_Hooks.hookMethod = function(object,methodPath) {
	var method_original = null;
	var pipe = null;
	var retval = { pipe : function(func) {
		pipe = func;
	}};
	var sub_obj = methodPath.split(".");
	var methodName = sub_obj.pop();
	var _g = 0;
	while(_g < sub_obj.length) {
		var sub = sub_obj[_g];
		++_g;
		object = Reflect.getProperty(object,sub);
	}
	method_original = Reflect.getProperty(object,methodName);
	if(null != method_original) {
		var method_new = uapi_Hooks.makeVarArgs(function($arguments) {
			var pipe_ret;
			if(pipe != null) {
				var o = this;
				var func1 = method_original;
				var args = [$arguments,function(args1) {
					return func1.apply(o,args1);
				}];
				pipe_ret = pipe.apply(this,args);
			} else {
				pipe_ret = null;
			}
			if(pipe_ret != null) {
				return pipe_ret;
			} else {
				return method_original.apply(this,$arguments);
			}
		});
		Reflect.setProperty(object,methodName,method_new);
	} else {
		throw new js__$Boot_HaxeError("" + methodName + "() does not exist on " + Std.string(object));
	}
	return retval;
};
uapi_Hooks.hookMethods = function(object,methods) {
	var pipe = null;
	var retval = { pipe : function(func) {
		pipe = func;
	}};
	var _g = 0;
	while(_g < methods.length) {
		var m = [methods[_g]];
		++_g;
		uapi_Hooks.hookMethod(object,m[0]).pipe((function(m1) {
			return function($arguments,method_original) {
				return pipe.apply(this,[m1[0],$arguments,method_original]);
			};
		})(m));
	}
	return retval;
};
uapi_Hooks.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f.apply(this,[a]);
	};
};
uapi_Hooks.HashPipe = function(immediate) {
	if(immediate == null) {
		immediate = false;
	}
	var pipe = null;
	var _args = new haxe_ds_StringMap();
	var _values = [];
	var updateHash = function(args,values,rewrite,toggle,replacestate) {
		if(toggle == null) {
			toggle = true;
		}
		if(rewrite == null) {
			rewrite = false;
		}
		if(args != null) {
			if(rewrite) {
				if(args != null) {
					_args = args;
				}
				if(values != null) {
					_values = values;
				}
			} else {
				var k = args.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					if(toggle && (__map_reserved[k1] != null ? args.getReserved(k1) : args.h[k1]) == "") {
						args.remove(k1);
					} else {
						var value = __map_reserved[k1] != null ? args.getReserved(k1) : args.h[k1];
						if(__map_reserved[k1] != null) {
							_args.setReserved(k1,value);
						} else {
							_args.h[k1] = value;
						}
					}
				}
				if(values != null) {
					var _g = 0;
					while(_g < values.length) {
						var v = values[_g];
						++_g;
						var str = v == null ? "null" : "" + v;
						if(_values.indexOf(str) == -1) {
							_values.push(str);
						} else if(toggle) {
							_values.splice(_values.indexOf(str),1);
						}
					}
				}
			}
			var _g1 = 0;
			while(_g1 < _values.length) {
				var v1 = _values[_g1];
				++_g1;
				v1 = encodeURIComponent(v1);
			}
			var k2 = _args.keys();
			while(k2.hasNext()) {
				var k3 = k2.next();
				var s = __map_reserved[k3] != null ? _args.getReserved(k3) : _args.h[k3];
				var updateHash1 = "" + k3 + "=" + encodeURIComponent(s);
				_values.push(updateHash1);
			}
			var updated_hash = "!/" + _values.join("/");
			if(replacestate) {
				window.history.replaceState(null,null,"#" + updated_hash);
			} else {
				window.location.hash = updated_hash;
			}
		}
	};
	var hashChange = function(e) {
		var hash = window.location.hash;
		var toggle_arguments = [];
		if(pipe != null) {
			_args = uapi_Utils.KeyValueStringParser(hash,false);
		}
		var k4 = _args.keys();
		while(k4.hasNext()) {
			var k5 = k4.next();
			if((__map_reserved[k5] != null ? _args.getReserved(k5) : _args.h[k5]) == null) {
				_args.remove(k5);
				toggle_arguments.push(k5);
			}
		}
		_values = toggle_arguments;
		pipe({ update : updateHash, args : _args, values : _values});
	};
	var retval = { pipe : function(func) {
		pipe = func;
		if(immediate) {
			hashChange();
		}
		return { args : function() {
			return _args;
		}, values : function() {
			return _values;
		}, update : updateHash};
	}};
	window.addEventListener("hashchange",hashChange);
	return retval;
};
var uapi_JsUtils = function() { };
$hxClasses["uapi.JsUtils"] = uapi_JsUtils;
uapi_JsUtils.__name__ = "uapi.JsUtils";
uapi_JsUtils.HttpRequest = function(url,binary,method,headers,body) {
	if(method == null) {
		method = "GET";
	}
	if(binary == null) {
		binary = false;
	}
	var pipe = null;
	var retval = { pipe : function(func) {
		pipe = func;
	}};
	window.fetch(url,{ "credentials" : "omit", "headers" : headers, "referrerPolicy" : "no-referrer-when-downgrade", "body" : body, "method" : method, "mode" : "cors"}).then(function(response) {
		var p = binary ? response.arrayBuffer() : response.text();
		p.then(function(res) {
			if(pipe != null) {
				pipe(res);
			}
		});
	});
	return retval;
};
uapi_JsUtils.write = function(str) {
	var last = window.document.body.lastElementChild;
	var it = last;
	while(it != null) {
		it = it.lastElementChild;
		if(it != null) {
			last = it;
		}
	}
	last.parentElement.insertAdjacentHTML("afterbegin",str);
	return;
};
uapi_JsUtils.loadScript = function(src) {
	var pipe = null;
	var retval = { pipe : function(func) {
		pipe = func;
	}};
	var script = window.document.createElement("script");
	script.type = "text/javascript";
	script.src = src;
	script.defer = true;
	script.async = false;
	script.addEventListener("load",function(e) {
		if(pipe != null) {
			pipe(script);
		}
		return;
	});
	window.document.head.appendChild(script);
	return retval;
};
uapi_JsUtils.AddEventListeners = function(target,fields,func,opt) {
	var _g = 0;
	while(_g < fields.length) {
		var field = fields[_g];
		++_g;
		target.addEventListener(field,func,opt);
	}
};
uapi_JsUtils.isIE = function() {
	var ua = window.navigator.userAgent;
	if(ua.indexOf("Trident/") <= -1) {
		return ua.indexOf("Edge/") > -1;
	} else {
		return true;
	}
};
var uapi_Utils = function() { };
$hxClasses["uapi.Utils"] = uapi_Utils;
uapi_Utils.__name__ = "uapi.Utils";
uapi_Utils.KeyValueStringParser = function(location,QueryString) {
	if(QueryString == null) {
		QueryString = true;
	}
	if(location == null) {
		location = QueryString ? window.location.search : window.location.hash;
	}
	while(QueryString == true ? location.charAt(0) == "?" : location.charAt(0) == "#" || location.charAt(0) == "!") location = HxOverrides.substr(location,1,null);
	var h = location.split(QueryString ? "&" : "/");
	var retval = new haxe_ds_StringMap();
	var t;
	var _g = 0;
	var _g1 = h.length;
	while(_g < _g1) {
		var l = _g++;
		if(h[l].length > 0) {
			var split = h[l].indexOf("=");
			t = [];
			if(split != -1) {
				t[0] = HxOverrides.substr(h[l],0,split);
				t[1] = HxOverrides.substr(h[l],split + 1,null);
			} else {
				t[0] = h[l];
			}
			var value = t.length > 1 ? decodeURIComponent(t[1].split("+").join(" ")) : null;
			var key = t[0];
			if(__map_reserved[key] != null) {
				retval.setReserved(key,value);
			} else {
				retval.h[key] = value;
			}
		}
	}
	return retval;
};
uapi_Utils.GenerateUUID = $hx_exports["uapi"]["uuid"] = function(prefix) {
	if(prefix == null) {
		prefix = "";
	}
	var t = new Date().getTime();
	var b = new haxe_io_Bytes(new ArrayBuffer(16));
	var c = 1;
	b.b[0] = t * 255 | 0;
	while(c < 16) {
		var v = Math.round(Math.random() * 255);
		b.b[c] = v;
		++c;
	}
	var retval = "" + b.toHex();
	var r = new EReg("(.{7})(.{4})(.{4})(.{4})(.*)","gi");
	if(r.match(retval)) {
		retval = retval.replace(r.r,"$1-$2-$3-$4-$5");
	}
	return "" + prefix + retval;
};
var uapi_ui_Mal = function(container,xml) {
	this.tempElementsCache = null;
	this.addedElements = null;
	this.templates = null;
	this.shadowDom = null;
	this.container = container;
	this.tempElementsCache = new haxe_ds_StringMap();
	if(xml != null) {
		this.parseGui(container,xml);
	}
};
$hxClasses["uapi.ui.Mal"] = uapi_ui_Mal;
uapi_ui_Mal.__name__ = "uapi.ui.Mal";
uapi_ui_Mal.prototype = {
	container: null
	,shadowDom: null
	,templates: null
	,addedElements: null
	,tempElementsCache: null
	,addTemplate: function(name,args,rename,alwaysAppendLast,parentName) {
		if(alwaysAppendLast == null) {
			alwaysAppendLast = false;
		}
		var _gthis = this;
		var _this = this.addedElements;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			window.console.warn("an element with the name:" + name + " already exists, overwriting");
		}
		var _this1 = this.addedElements;
		if(__map_reserved[rename] != null ? _this1.existsReserved(rename) : _this1.h.hasOwnProperty(rename)) {
			window.console.warn("an renamed element with the name:" + rename + " already exists, overwriting");
		}
		var retval = null;
		var _this2 = this.templates;
		var template = __map_reserved[name] != null ? _this2.getReserved(name) : _this2.h[name];
		var append = function(element,parent) {
			var guiElement = { element : element.cloneNode(true), param : new haxe_ds_StringMap()};
			if(args != null) {
				var mapParams = function(param) {
					var paramNode = param;
					var paramEl = param;
					if(paramEl != null) {
						var paramName = paramEl.getAttribute("param");
						paramEl.removeAttribute("param");
						var _g = 0;
						var _g1 = paramName.split(",");
						while(_g < _g1.length) {
							var paramName1 = _g1[_g];
							++_g;
							if(StringTools.startsWith(paramName1,"@")) {
								var parms = new EReg("@(.*):(.*)","");
								if(parms.match(paramName1)) {
									paramName1 = parms.matched(2);
									paramNode = paramEl.getAttributeNode(parms.matched(1));
								}
							}
							var _this3 = guiElement.param;
							if(__map_reserved[paramName1] != null) {
								_this3.setReserved(paramName1,paramNode);
							} else {
								_this3.h[paramName1] = paramNode;
							}
							if(__map_reserved[paramName1] != null ? args.existsReserved(paramName1) : args.h.hasOwnProperty(paramName1)) {
								paramNode.textContent = __map_reserved[paramName1] != null ? args.getReserved(paramName1) : args.h[paramName1];
							}
						}
					}
				};
				var _g2 = 0;
				var _g11 = guiElement.element.querySelectorAll("*[" + "param" + "]");
				while(_g2 < _g11.length) {
					var param1 = _g11[_g2];
					++_g2;
					mapParams(param1);
				}
				if(guiElement.element.hasAttribute("param")) {
					mapParams(guiElement.element);
				}
			}
			if(!alwaysAppendLast && template.index <= parent.children.length) {
				parent.insertBefore(guiElement.element,parent.children[template.index]);
			} else {
				parent.appendChild(guiElement.element);
			}
			var _this4 = _gthis.addedElements;
			if(__map_reserved[name] != null) {
				_this4.setReserved(name,guiElement);
			} else {
				_this4.h[name] = guiElement;
			}
			return guiElement.element;
		};
		var parent1;
		if(parentName == null) {
			parent1 = null;
		} else {
			var _this5 = this.addedElements;
			parent1 = (__map_reserved[parentName] != null ? _this5.getReserved(parentName) : _this5.h[parentName]).element.querySelector("*[" + "data-malhx-template" + "=\"" + template.parentId + "\"]");
		}
		if(template != null) {
			if(rename != null) {
				name = rename;
			}
			var key = template.name;
			var _this6 = this.tempElementsCache;
			var el = __map_reserved[key] != null ? _this6.getReserved(key) : _this6.h[key];
			if(el != null) {
				retval = append(el.element,parent1 != null ? parent1 : el.parent);
				if(args != null) {
					var k = args.keys();
					while(k.hasNext()) {
						var k1 = k.next();
						var _this7 = this.addedElements;
						var _this8 = (__map_reserved[name] != null ? _this7.getReserved(name) : _this7.h[name]).param;
						var el1 = __map_reserved[k1] != null ? _this8.getReserved(k1) : _this8.h[k1];
						if(el1 != null) {
							el1.textContent = __map_reserved[k1] != null ? args.getReserved(k1) : args.h[k1];
						}
					}
				}
				return retval;
			}
			var parentSelector = "*[" + "data-malhx-template" + "=\"" + template.parentId + "\"]";
			if(parent1 == null) {
				parent1 = this.container.querySelector(parentSelector);
			}
			if(parent1 != null) {
				var tempParent = this.shadowDom.querySelector(parentSelector);
				if(tempParent != null) {
					tempParent.innerHTML += haxe_xml_Printer.print(template.xml);
					if(tempParent.children.length > 0) {
						var key1 = template.name;
						var value = { element : tempParent.lastElementChild, parent : parent1};
						var _this9 = this.tempElementsCache;
						if(__map_reserved[key1] != null) {
							_this9.setReserved(key1,value);
						} else {
							_this9.h[key1] = value;
						}
						retval = append(tempParent.lastElementChild,parent1);
					}
				} else {
					throw new js__$Boot_HaxeError("" + parentSelector + "\" is not in shadowDom");
				}
			} else {
				throw new js__$Boot_HaxeError("" + parentSelector + "\" is not in DOMTree");
			}
		} else {
			throw new js__$Boot_HaxeError("template " + name + " not found");
		}
		return retval;
	}
	,parseGui: function(container,rootNode) {
		if(rootNode.nodeType != 0) {
			throw new js__$Boot_HaxeError("expected rootNode to be an XmlType Element");
		}
		this.templates = new haxe_ds_StringMap();
		this.addedElements = new haxe_ds_StringMap();
		var att = rootNode.get("template");
		var count = 0;
		var sub = rootNode.elements();
		while(sub.hasNext()) {
			var sub1 = sub.next();
			var index = count++;
			var att1 = sub1.get("template");
			var count1 = 0;
			var sub2 = sub1.elements();
			while(sub2.hasNext()) {
				var sub3 = sub2.next();
				this.shake(sub3,count1++);
			}
			if(att1 != null) {
				var parent = sub1.parent;
				var uuid;
				if(parent.exists("data-malhx-template")) {
					uuid = parent.get("data-malhx-template");
				} else {
					uuid = uapi_Utils.GenerateUUID();
					parent.set("data-malhx-template",uuid);
				}
				var name = att1;
				if(this.templates.exists(name)) {
					throw new js__$Boot_HaxeError("duplicate template name (" + name + ") found, aborting");
				}
				this.templates.set(name,{ name : name, xml : sub1, parentId : uuid, index : index});
			}
		}
		if(att != null) {
			var parent1 = rootNode.parent;
			var uuid1;
			if(parent1.exists("data-malhx-template")) {
				uuid1 = parent1.get("data-malhx-template");
			} else {
				uuid1 = uapi_Utils.GenerateUUID();
				parent1.set("data-malhx-template",uuid1);
			}
			var name1 = att;
			var _this = this.templates;
			if(__map_reserved[name1] != null ? _this.existsReserved(name1) : _this.h.hasOwnProperty(name1)) {
				throw new js__$Boot_HaxeError("duplicate template name (" + name1 + ") found, aborting");
			}
			var _this1 = this.templates;
			var value = { name : name1, xml : rootNode, parentId : uuid1, index : 0};
			if(__map_reserved[name1] != null) {
				_this1.setReserved(name1,value);
			} else {
				_this1.h[name1] = value;
			}
		}
		this.shadowDom = window.document.createElement("div");
		this.shadowDom.innerHTML = haxe_xml_Printer.print(rootNode);
		var sub4 = rootNode.elements();
		while(sub4.hasNext()) {
			var sub5 = sub4.next();
			var sub6 = sub5.elements();
			while(sub6.hasNext()) {
				var sub7 = sub6.next();
				this.cleanupTemplateNodes(sub7);
			}
			var att2 = sub5.attributes();
			while(att2.hasNext()) {
				var att3 = att2.next();
				if(att3 == "template") {
					sub5.remove("template");
					sub5.parent.removeChild(sub5);
				}
			}
		}
		var att4 = rootNode.attributes();
		while(att4.hasNext()) {
			var att5 = att4.next();
			if(att5 == "template") {
				rootNode.remove("template");
				rootNode.parent.removeChild(rootNode);
			}
		}
		var tmp = window.document.createElement("div");
		tmp.innerHTML = haxe_xml_Printer.print(rootNode);
		var _g = 0;
		var _g1 = tmp.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			container.appendChild(tmp.removeChild(child));
		}
		tmp = null;
	}
	,shake: function(rootNode,index) {
		if(index == null) {
			index = 0;
		}
		var att = rootNode.get("template");
		var count = 0;
		var sub = rootNode.elements();
		while(sub.hasNext()) {
			var sub1 = sub.next();
			this.shake(sub1,count++);
		}
		if(att != null) {
			var parent = rootNode.parent;
			var uuid;
			if(parent.exists("data-malhx-template")) {
				uuid = parent.get("data-malhx-template");
			} else {
				uuid = uapi_Utils.GenerateUUID();
				parent.set("data-malhx-template",uuid);
			}
			var name = att;
			var _this = this.templates;
			if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
				throw new js__$Boot_HaxeError("duplicate template name (" + name + ") found, aborting");
			}
			var _this1 = this.templates;
			var value = { name : name, xml : rootNode, parentId : uuid, index : index};
			if(__map_reserved[name] != null) {
				_this1.setReserved(name,value);
			} else {
				_this1.h[name] = value;
			}
		}
	}
	,cleanupTemplateNodes: function(rootNode) {
		var sub = rootNode.elements();
		while(sub.hasNext()) {
			var sub1 = sub.next();
			this.cleanupTemplateNodes(sub1);
		}
		var att = rootNode.attributes();
		while(att.hasNext()) {
			var att1 = att.next();
			if(att1 == "template") {
				rootNode.remove("template");
				rootNode.parent.removeChild(rootNode);
			}
		}
	}
	,__class__: uapi_ui_Mal
};
var uapi_ui_Timeline = $hx_exports["uapi"]["timeline"] = function(parent,timelineLength,maxSelectors,updateTextCb,resizable,defaultLength) {
	if(defaultLength == null) {
		defaultLength = 15;
	}
	if(resizable == null) {
		resizable = false;
	}
	this.tl = null;
	this.timelineLength = null;
	this.defaultLength = null;
	this.resizable = null;
	this.updateTextCb = null;
	this.innerOffsetX = null;
	this.timepoints = [];
	var _gthis = this;
	var _this = this.SRC();
	if(_this.nodeType != Xml.Document && _this.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _this.nodeType);
	}
	var mal = new uapi_ui_Mal(parent,_this.children[0]);
	this.updateTextCb = updateTextCb;
	this.resizable = resizable;
	this.defaultLength = defaultLength;
	this.timelineLength = timelineLength;
	if(maxSelectors == null) {
		maxSelectors = 6;
	}
	this.tl = mal.addTemplate("timeline_base").getElementsByClassName("timeline")[0].firstElementChild;
	this.tl.addEventListener("click",function(e) {
		if(!uapi_ui_Timeline.dragging && e.target == _gthis.tl && _gthis.timepoints.length < maxSelectors) {
			var tlrect = _gthis.tl.getBoundingClientRect();
			_gthis.createTimePoint(e.clientX - tlrect.left - _gthis.innerOffsetX,defaultLength);
		}
	});
	window.addEventListener("resize",function(e1) {
		var tlrect1 = _gthis.tl.getBoundingClientRect();
		var _g = 0;
		var _g1 = _gthis.timepoints;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.el.style.width = "" + tlrect1.width / timelineLength * t.pos.duration + "px";
			_gthis.updateTimePoint(t.el,t.pos,false,tlrect1.width * (t.pos.start / timelineLength),false);
		}
	});
	var tlrect2 = this.tl.getBoundingClientRect();
	this.innerOffsetX = this.defaultLength / timelineLength * tlrect2.width / 2;
};
$hxClasses["uapi.ui.Timeline"] = uapi_ui_Timeline;
uapi_ui_Timeline.__name__ = "uapi.ui.Timeline";
uapi_ui_Timeline.prototype = {
	timepoints: null
	,innerOffsetX: null
	,updateTextCb: null
	,resizable: null
	,defaultLength: null
	,timelineLength: null
	,tl: null
	,createGrabbable: function(el,callback) {
		var $window = window;
		uapi_JsUtils.AddEventListeners(el,["mouseleave","mouseover","mousedown","mouseup"],function(e) {
			if(e.type == "mousedown") {
				uapi_ui_Timeline.dragging = true;
				el.style.cursor = "grabbing";
				$window.addEventListener("mouseup",function(e1) {
					el.style.cursor = "grab";
					$window.removeEventListener("mousemove",callback);
					callback(e1);
					return false;
				},{ once : true});
				$window.addEventListener("mousemove",callback);
			}
			if(e.type == "mouseup") {
				uapi_ui_Timeline.dragging = false;
				return false;
			}
			callback(e);
			return false;
		});
	}
	,updateTimePoint: function(tp,pos,allowOverlap,offsetX,updateStart) {
		if(updateStart == null) {
			updateStart = true;
		}
		var tlrect = this.tl.getBoundingClientRect();
		var tprect = tp.getBoundingClientRect();
		var lowerLimit = 0;
		var upperLimit = tlrect.width;
		if(!allowOverlap) {
			var _g = 0;
			var _g1 = this.timepoints;
			while(_g < _g1.length) {
				var t = _g1[_g];
				++_g;
				if(t.pos != pos) {
					var trect = t.el.getBoundingClientRect();
					if(offsetX < trect.right - tlrect.left && offsetX > trect.left - tlrect.left) {
						offsetX = trect.right - tlrect.left;
						break;
					}
					if(offsetX + this.innerOffsetX + tprect.width > trect.left - tlrect.left && offsetX + this.innerOffsetX + tprect.width < trect.right - tlrect.left) {
						offsetX = trect.left - tprect.width - tlrect.left;
						break;
					}
				}
			}
		}
		if(offsetX < lowerLimit) {
			offsetX = lowerLimit;
		}
		if(offsetX + tprect.width > upperLimit) {
			offsetX = upperLimit - tprect.width;
		}
		if(pos.duration < this.timelineLength) {
			tp.style.marginLeft = "" + offsetX + "px";
			this.updateTimePointData(tp,pos,updateStart);
		}
	}
	,updateTimePointData: function(tp,tr,updateStart) {
		if(updateStart == null) {
			updateStart = true;
		}
		var label = tp.getElementsByTagName("span")[0];
		var rect = tp.getBoundingClientRect();
		var tlrect = this.tl.getBoundingClientRect();
		if(updateStart) {
			tr.start = (rect.left - tlrect.left) / tlrect.width * this.timelineLength;
		}
		tr.end = tr.start + tr.duration;
		if(this.timelineLength - tr.end < .33) {
			if(updateStart) {
				tr.start = this.timelineLength - tr.duration;
			}
			tr.end = this.timelineLength;
			tr.duration = tr.end - tr.start;
		}
		if(this.updateTextCb != null) {
			label.innerHTML = this.updateTextCb(tr);
		} else {
			label.innerHTML = tr.start.toFixed(2) + "<br>";
			label.innerHTML += tr.end.toFixed(2);
		}
		return false;
	}
	,createTimePoint: function(start,length,overlap) {
		if(overlap == null) {
			overlap = false;
		}
		var _gthis = this;
		if(length == null) {
			length = this.defaultLength;
		}
		var tp = window.document.createElement("div");
		var pos = { start : start, end : length, duration : length};
		var tlrect = this.tl.getBoundingClientRect();
		tp.className = "point";
		tp.tabIndex = 0;
		var f = $bind(this,this.updateTimePoint);
		var tp1 = tp;
		var pos1 = pos;
		var allowOverlap = overlap;
		var tmp = function(offsetX) {
			f(tp1,pos1,allowOverlap,offsetX);
		};
		var f1 = $bind(this,this.deleteTimePoint);
		var pos2 = pos;
		var tmp1 = function() {
			f1(pos2);
		};
		this.timepoints.push({ pos : pos, el : tp, updateTimePoint : tmp, 'delete' : tmp1});
		tp.style.width = "" + tlrect.width / this.timelineLength * length + "px";
		if(this.resizable) {
			var hndl_r = window.document.createElement("div");
			hndl_r.className = "grabber";
			this.createGrabbable(hndl_r,function(e) {
				var tlrect1 = _gthis.tl.getBoundingClientRect();
				if(e.type == "mousedown") {
					var hndl_rect = hndl_r.getBoundingClientRect();
					_gthis.innerOffsetX = hndl_rect.width - (e.clientX - hndl_rect.left);
				}
				if(e.type == "mousemove") {
					var tprect = tp.getBoundingClientRect();
					var size = tprect.right + (e.clientX + _gthis.innerOffsetX - tprect.right);
					if(size <= tlrect1.right) {
						tp.style.width = e.clientX - tprect.left + _gthis.innerOffsetX + "px";
						pos.end = (e.clientX - tlrect1.left + _gthis.innerOffsetX) / tlrect1.width * _gthis.timelineLength;
						pos.duration = pos.end - pos.start;
					}
					_gthis.updateTimePointData(tp,pos,false);
				}
				e.stopImmediatePropagation();
				return false;
			});
			tp.appendChild(hndl_r);
		}
		var label = window.document.createElement("span");
		tp.appendChild(label);
		this.createGrabbable(tp,function(e1) {
			var tlrect2 = _gthis.tl.getBoundingClientRect();
			switch(e1.type) {
			case "mousedown":
				_gthis.innerOffsetX = e1.clientX - tp.getBoundingClientRect().left;
				return false;
			case "mousemove":
				var offsetX1 = e1.clientX - tlrect2.left - _gthis.innerOffsetX;
				_gthis.updateTimePoint(tp,pos,overlap,offsetX1);
				break;
			case "mouseup":
				_gthis.innerOffsetX = 0;
				return false;
			}
			e1.stopImmediatePropagation();
			return false;
		});
		this.tl.appendChild(tp);
		this.updateTimePoint(tp,pos,overlap,start / this.timelineLength * tlrect.width,false);
		var f2 = $bind(this,this.updateTimePoint);
		var tp2 = tp;
		var pos3 = pos;
		var allowOverlap1 = overlap;
		return function(offsetX2) {
			f2(tp2,pos3,allowOverlap1,offsetX2);
		};
	}
	,deleteTimePoint: function(pos) {
		var _g = 0;
		var _g1 = this.timepoints;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.pos == pos) {
				HxOverrides.remove(this.timepoints,o);
				o.el.parentElement.removeChild(o.el);
				break;
			}
		}
	}
	,updateLabel: function(text,left_right) {
		if(left_right == null) {
			left_right = "right";
		}
		var field = this.tl.parentElement.parentElement.getElementsByClassName("tfield")[left_right == "right" ? 1 : 0];
		field.innerHTML = text;
	}
	,SRC: function() {
		return Xml.parse(haxe_crypto_Base64.decode("PGRpdj48c3R5bGU+LnRpbWVsaW5lIHtib3JkZXI6IDFweCBzb2xpZCBibGFjazstd2Via2l0LXRvdWNoLWNhbGxvdXQ6IG5vbmU7LXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTsta2h0bWwtdXNlci1zZWxlY3Q6IG5vbmU7LW1vei11c2VyLXNlbGVjdDogbm9uZTstbXMtdXNlci1zZWxlY3Q6IG5vbmU7dXNlci1zZWxlY3Q6IG5vbmU7fS50aW1lbGluZSAjdGltZWxpbmUge2JhY2tncm91bmQ6bGlnaHRncmV5O3dpZHRoOiAxMDAlO2hlaWdodDogNTBweDtjdXJzb3I6IHBvaW50ZXI7Zm9udC1mYW1pbHk6IG1vbm9zcGFjZTtmb250LXN0cmV0Y2g6IGV4dHJhLWNvbmRlbnNlZDtib3gtc2hhZG93OiBpbnNldCAwIDBweCAxZW0gMC4xZW0gIzAwMDAwMDY2O30udGltZWxpbmUgLnBvaW50IHtwb3NpdGlvbjogYWJzb2x1dGU7Y3Vyc29yOiBncmFiO3dpZHRoOiA1MHB4O2hlaWdodDogaW5oZXJpdDtiYWNrZ3JvdW5kOiB3aGl0ZXNtb2tlO29wYWNpdHk6IC44Njtib3JkZXItbGVmdDogMXB4IHNvbGlkIGJsYWNrO2JvcmRlci1yaWdodDogMXB4IHNvbGlkIGJsYWNrO3RyYW5zaXRpb246IG9wYWNpdHkgMTAwbXMgZWFzZTt6LWluZGV4OiAxO30ucG9pbnQgLmdyYWJiZXIge3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0OjBweDt3aWR0aDo5cHg7aGVpZ2h0OjEwMCU7fS5wb2ludDo6YWZ0ZXJ7Y29udGVudDoi4pa8Ijtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OiAtN3B4O3RvcDogLTE3cHg7fS5wb2ludDpob3ZlciAucG9pbnR7b3BhY2l0eTogMS4wO30ucG9pbnQ6Zm9jdXMge291dGxpbmUtd2lkdGg6IDFweDtvdXRsaW5lLXN0eWxlOiBkYXNoZWQ7b3V0bGluZS1jb2xvcjogcmVkO30uZ3JhYmJlcjpob3ZlciB7YmFja2dyb3VuZDpjcmltc29uO29wYWNpdHk6IC44O30ucG9pbnQgc3BhbiB7Zm9udC1zaXplOiAxMHB4O3VzZXItc2VsZWN0OiBub25lO3RleHQtYWxpZ246IGNlbnRlcjt1c2VyLXNlbGVjdDogbm9uZTt9LmNhcmV0IHt0b3A6IDA7cG9zaXRpb246IGFic29sdXRlO3dpZHRoOiAxcHg7aGVpZ2h0OiAxMDBweDtiYWNrZ3JvdW5kOiByZWQ7bWFyZ2luOiAwO2JvcmRlcjogMDt9LnRmaWVsZHtwb3NpdGlvbjphYnNvbHV0ZTt9PC9zdHlsZT48ZGl2IHRlbXBsYXRlPSJ0aW1lbGluZV9iYXNlIiBzdHlsZT0id2lkdGg6MTAwJTtwb3NpdGlvbjpyZWxhdGl2ZTtwYWRkaW5nLXRvcDogMjRweDtwYWRkaW5nLWJvdHRvbTogMjRweDsiPjxkaXYgY2xhc3M9InRpbWVsaW5lIj48ZGl2IGlkPSJ0aW1lbGluZSI+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz0iY2FyZXQiIHN0eWxlPSJsZWZ0OjA7Ij48L2Rpdj48ZGl2IGNsYXNzPSJjYXJldCIgc3R5bGU9InJpZ2h0OjA7Ij48L2Rpdj48ZGl2IGNsYXNzPSJ0ZmllbGQiIHN0eWxlPSJsZWZ0OjZweDsiPjAwOjAwOjAwPC9kaXY+PGRpdiBjbGFzcz0idGZpZWxkIiBzdHlsZT0icmlnaHQ6NnB4OyI+MDA6MDA6MDA8L2Rpdj48L2Rpdj48L2Rpdj4=").toString());
	}
	,__class__: uapi_ui_Timeline
};
var uapi_ui_Tree = $hx_exports["uapi"]["tree"] = function(parent,obj,maxDepth) {
	if(maxDepth == null) {
		maxDepth = 3;
	}
	obj = obj == null ? { aa : 1, bb : [2,3,4], cc : { dd : { ee : [123], ff : "aa"}}} : obj;
	var base = window.document.createElement("div");
	var walk = null;
	walk = function(obj1,base1,depth) {
		if(depth == null) {
			depth = 0;
		}
		var sections = base1.getElementsByTagName("section");
		base1 = sections.length > 0 ? sections.item(0) : base1;
		base1.style.marginLeft = 100 * depth + "px";
		var fields = Reflect.fields(obj1);
		var cls = obj1 == null ? null : js_Boot.getClass(obj1);
		if(depth > maxDepth) {
			return;
		}
		if(cls != null) {
			fields = fields.concat(Type.getInstanceFields(cls));
		}
		var _g = 0;
		while(_g < fields.length) {
			var o = fields[_g];
			++_g;
			var field = Reflect.field(obj1,o);
			if(typeof(field) != "string" && typeof(field) != "boolean" && !(typeof(field) == "number" && ((field | 0) === field)) && typeof(field) != "number") {
				var walk1 = Reflect.field(obj1,o);
				var walk2 = base1.appendChild(uapi_ui_Tree.node({ _class : "treenode", key : "" + o, value : ""}));
				walk(walk1,walk2,depth + 1);
			} else {
				base1.appendChild(uapi_ui_Tree.node({ _class : "treenode", key : "" + o, value : "" + JSON.stringify(field)}));
			}
		}
	};
	walk(obj,base);
	window.document.body.appendChild(uapi_ui_Tree.styles({ }));
	parent.appendChild(base);
};
$hxClasses["uapi.ui.Tree"] = uapi_ui_Tree;
uapi_ui_Tree.__name__ = "uapi.ui.Tree";
uapi_ui_Tree.node = function(obj) {
	var el_0 = window.document.createElement("div");
	Reflect.setProperty(el_0,"onclick",new Function(new haxe_Template("if(event.target == this) this.classList.toggle('collapsed'); return false;").execute(obj)));
	Reflect.setProperty(el_0,"className",new haxe_Template("::_class::").execute(obj));
	el_0.innerText = new haxe_Template("::key::").execute(obj);
	var el_1 = window.document.createElement("section");
	el_1.innerText = new haxe_Template("::value::").execute(obj);
	el_0.appendChild(el_1);
	return el_0;
};
uapi_ui_Tree.styles = function(obj) {
	var el_0 = window.document.createElement("style");
	el_0.innerText = new haxe_Template(".collapsed section{height: 0px;}.treenode::before {content: 'â–²';transform: rotate(180deg);position: absolute;left: -15px;transition: transform 220ms ease-out;}.treenode.collapsed::before {transform: rotate(90deg);}.treenode {margin-left: 20px;display: flex;justify-content: space-between;position: relative;border-bottom: 1px solid grey;}.treenode section {background:honeydew;overflow:hidden;}").execute(obj);
	return el_0;
};
uapi_ui_Tree.prototype = {
	__class__: uapi_ui_Tree
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
var $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
haxe_Resource.content = [{ name : "template", data : "PGh0bWw+Cgk8aGVhZD4KCQk8c3R5bGU+CgkJCWh0bWwsIGJvZHkgewoJCQkJZm9udC1mYW1pbHk6QXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjsKCQkJCWJhY2tncm91bmQ6IGRpbWdyYXk7CgkJCQljb2xvcjogYmxhY2s7CgkJCQlwYWRkaW5nOiAwOwoJCQkJbWFyZ2luOiAwOwoJCQkJd2lkdGg6IDEwMCU7CgkJCQloZWlnaHQ6IDEwMCU7CgkJCQlmb250LXNpemU6IDEwcHg7CgkJCQlmb250LWZhbWlseTogc2Fucy1zZXJpZjsKCQkJfQoJCQkudGl0bGUgewoJCQkJdG9wOiAxLjVweDsKCQkJCWJhY2tncm91bmQ6IGluaGVyaXQ7CgkJCQlwYWRkaW5nLWxlZnQ6IDVweDsKCQkJCXBhZGRpbmctcmlnaHQ6IDVweDsKCQkJfQoJCQkudGl0bGUsIC50aXRsZSBhIHsKCQkJCXBvc2l0aW9uOiBhYnNvbHV0ZTsKCQkJCXJpZ2h0OiAwcHg7CgkJCQlmb250LXdlaWdodDogMTAwOwoJCQkJZm9udC1zaXplOiAxMHB4OwoJCQkJdXNlci1zZWxlY3Q6IG5vbmU7CgkJCQlmb250LXZhcmlhbnQtY2Fwczogc21hbGwtY2FwczsKCQkJCXRleHQtZGVjb3JhdGlvbjogbm9uZTsKCQkJfQoJCQkubG9hZGluZyB7CgkJCQl3aWR0aDogMTAwJTsKCQkJCXBvc2l0aW9uOiBmaXhlZDsKCQkJCWhlaWdodDogMTAwJTsKCQkJCS8qZmlsdGVyOiBibHVyKDEuMnB4KTsqLwoJCQkJdmlzaWJpbGl0eTogdmlzaWJsZTsKCQkJfQoJCQkuaGlkZSB7CgkJCQlhbmltYXRpb246IGhpZGUgLjNzIGxpbmVhciBmb3J3YXJkczsKCQkJfQoJCQkubG9hZGluZyBkaXYgewoJCQkJd2lkdGg6IDIwJTsKCQkJCWNvbG9yOiB3aGl0ZTsKCQkJCW1hcmdpbjogMDsKCQkJCXRvcDogNTAlOwoJCQkJdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7CgkJCQlwb3NpdGlvbjogYWJzb2x1dGU7CgkJCQlsZWZ0OiA1MCU7CgkJCQlvcGFjaXR5OiAuNTsKCQkJfQoJCQkubG9hZGluZyBkaXYgc3ZnIHsKCQkJCWFuaW1hdGlvbjogbG9hZGluZyA1cyBpbmZpbml0ZSBsaW5lYXIgYmFja3dhcmRzOwoJCQl9CgkJCWEgewoJCQkJcG9zaXRpb246IHJlbGF0aXZlICFpbXBvcnRhbnQ7CgkJCQljb2xvcjogYmxhY2s7CgkJCX0KCQkJCgkJCS5tZXNzYWdlYm94ewoJCQkJb3ZlcmZsb3c6IGhpZGRlbjsKCQkJfQoJCQkjY29udHJvbHN7CgkJCQlwb3NpdGlvbjphYnNvbHV0ZTsKCQkJCWJvdHRvbTogMDsKCQkJCXdpZHRoOiAxMDAlOwoJCQkJYmFja2dyb3VuZDogZ2FpbnNib3JvOwoJCQkJb3ZlcmZsb3c6IGhpZGRlbjsKCQkJfQoJCQkjY29udHJvbHMgI2Vycm9yIHsKCQkJCW92ZXJmbG93OiBhdXRvOwoJCQkJbWFyZ2luOiAwcHggMHB4IDBweCAycHg7CgkJCQltYXgtaGVpZ2h0OiAyNTBweDsKCQkJCWRpc3BsYXk6IGlubGluZS1ibG9jazsKCQkJCXdpZHRoOiAxMDAlOwoJCQl9CgkJCSNlcnJvciAubWVzc2FnZSB7CgkJCQlmb250LXNpemU6IDEwcHggIWltcG9ydGFudDsKCQkJCWZvbnQtZmFtaWx5OiBNZW5sbywgbW9ub3NwYWNlOwoJCQkJZm9udC13ZWlnaHQ6IDEwMDsKCQkJCS13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkOwoJCQkJYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGdyZXk7CgkJCQl3aGl0ZS1zcGFjZTogcHJlOwoJCQl9CgkJCQoJCQkubWVzc2FnZTpob3ZlciB7CgkJCQliYWNrZ3JvdW5kOiBsaWdodGdyYXk7CgkJCX0KCgkJCS5mb2xkZWQgewoJCQkJaGVpZ2h0OiAxNXB4OwoJCQkJb3ZlcmZsb3c6aGlkZGVuOwoJCQkJCgkJCX0KCQkJI2Vycm9yIHsKCQkJCWRpc3BsYXk6IGJsb2NrOwoJCQl9CgoJCQkuZm9sZGVkICNlcnJvciB7CgkJCQlkaXNwbGF5OiBub25lOwoJCQl9CgkJCSNtZXNzYWdlY291bnQgewoJCQkJbWFyZ2luLWxlZnQ6IDJweDsKCQkJCXVzZXItc2VsZWN0OiBub25lOwoJCQkJY3Vyc29yOiBwb2ludGVyOwoJCQkJaGVpZ2h0OiAxNXB4OwoJCQl9CgkJCSNtZXNzYWdlY291bnQ6aG92ZXIgewoJCQkJdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7CgkJCX0KCQkJI21lc3NhZ2Vjb3VudDo6YmVmb3JlIHsKCQkJCWNvbnRlbnQ6ICLilrwiOwoJCQkJbWFyZ2luLXJpZ2h0OiAycHg7CgkJCQlkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CgkJCQl0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMTAwbXMgbGluZWFyOwoJCQl9CgkJCS5mb2xkZWQgI21lc3NhZ2Vjb3VudDo6YmVmb3JlIHsKCQkJCWNvbnRlbnQ6ICLilrwiOwoJCQkJdHJhbnNmb3JtOiByb3RhdGUoLTkwZGVnKTsKCQkJCWRpc3BsYXk6IGlubGluZS1ibG9jazsKCQkJCW1hcmdpbi1yaWdodDogMnB4OwoJCQl9CgkJCSN2aWRlb19jb250cm9sc193cmFwcGVyLCAjY29udHJvbHNfY3VzdG9tIHsKCQkJCXBvc2l0aW9uOiByZWxhdGl2ZTsKCQkJfQoJCQkjY29udHJvbHNfZWxlbWVudHMgewoJCQkJcGFkZGluZzogMTBweCAxMnB4IDVweCAxMnB4OwoJCQkJZGlzcGxheTogZmxleDsKCQkJCWZsZXgtd3JhcDogd3JhcDsKCQkJfQoJCQkjY29udHJvbHNfZWxlbWVudHMgZGl2OmhvdmVyIHsKCQkJCWJhY2tncm91bmQ6IGxpZ2h0Z3JleTsKCQkJfQoJCQkjY29udHJvbHNfZWxlbWVudHMgbGFiZWwgewoJCQkJbWFyZ2luLWxlZnQ6IDJweDsKCQkJfQoJCQkjY29udHJvbHNfZWxlbWVudHMgZGl2IHNlbGVjdCB7CgkJCQl3aWR0aDogOTklOwoJCQkJY3Vyc29yOnBvaW50ZXI7CgkJCX0KCQkJQG1lZGlhIChtYXgtd2lkdGg6IDExMDBweCkgewoJCQkJI2NvbnRyb2xzX2VsZW1lbnRzIGRpdiB7CgkJCQkJd2lkdGg6IDI1JTsKCQkJCX0KCQkJfQoJCQlAbWVkaWEgKG1heC13aWR0aDogODAwcHgpIHsKCQkJCSNjb250cm9sc19lbGVtZW50cyBkaXYgewoJCQkJCXdpZHRoOiAzMyU7CgkJCQl9CgkJCX0KCQkJQG1lZGlhIChtYXgtd2lkdGg6IDQwMHB4KSB7CgkJCQkjY29udHJvbHNfZWxlbWVudHMgZGl2IHsKCQkJCQl3aWR0aDogNTAlOwoJCQkJfQoJCQl9CgoJCQkvKiAgbWFrZSBzY3JvbGxiYXIgaW52aXNpYmxlICoKCQkJOjotd2Via2l0LXNjcm9sbGJhciB7CgkJCQl3aWR0aDogMHB4OyAgCgkJCQliYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsgIAoJCQl9Ki8KCQkJCgkJCUBrZXlmcmFtZXMgbG9hZGluZyB7CgkJCQlmcm9tIHt0cmFuc2Zvcm06cm90YXRlKDBkZWcpO30KCQkJCXRvIHt0cmFuc2Zvcm06cm90YXRlKDM2MGRlZyk7fQoJCQl9CgkJCUBrZXlmcmFtZXMgaGlkZSB7CgkJCQlmcm9tIHtvcGFjaXR5Oi44OyB2aXNpYmlsaXR5OiB2aXNpYmxlO30KCQkJCXRvIHtvcGFjaXR5OiAwLjA7IHZpc2liaWxpdHk6IGhpZGRlbjt9CgkJCX0KCgkJPC9zdHlsZT4KCQk8c2NyaXB0PgoJCQlpZighZnJhbWVFbGVtZW50KQoJCQkJdGhyb3cgImNoZWNrIHNhbWUtb3JpZ2luIHBvbGljeSI7CgkJCWVsc2UKCQkJCWlmKCdob29rJyBpbiBmcmFtZUVsZW1lbnQpCgkJCQkJZnJhbWVFbGVtZW50Lmhvb2sod2luZG93KTsKCQkJLy91c2VkIC9yZXMvcGxheWVycy8qOgoJCQl2YXIgdXJpID0gdW5lc2NhcGUoJzo6dXJpOjonKTsgCgkJCXZhciB0aXRsZSA9IHVuZXNjYXBlKCc6OnRpdGxlOjogKDo6dGl0bGVfdmVyc2lvbjo6KScpOwoJCTwvc2NyaXB0PgoJCTo6aGVhZDo6Cgk8L2hlYWQ+Cgk8Ym9keT4KCQk8ZGl2IGlkPSJsb2FkZXIiIGNsYXNzPSJsb2FkaW5nIj4KCQkJPGRpdj4KCQkJOjpsb2FkaW5nOjoKCQkJPC9kaXY+CgkJPC9kaXY+CgkJPGRpdiBpZD0idmlkZW9fY29udHJvbHNfd3JhcHBlciI+CgkJCTx2aWRlbyBpZD0idmlkZW8iIHdpZHRoPSIxMDAlIiAkJHBvc3RlcigpIDo6aWYgYXR0cl9jb250cm9sczo6Y29udHJvbHM6OmVuZDo6IDo6aWYgYXR0cl9wbGF5c2lubGluZTo6cGxheXNpbmxpbmU6OmVuZDo6IDo6aWYgYXR0cl9tdXRlZDo6bXV0ZWQ6OmVuZDo6IDo6aWYgYXR0cl9hdXRvcGxheTo6YXV0b3BsYXk6OmVuZDo6ID48L3ZpZGVvPgoJCQk8ZGl2IGlkPSJ0dG1sIj48L2Rpdj4KCQkJPGRpdiBpZD0iY29udHJvbHNfY3VzdG9tIj48L2Rpdj4KCQk8L2Rpdj4KCQk6OmJvZHk6OgoJCTxkaXYgaWQ9ImNvbnRyb2xzIj4KCQkJPHNwYW4gY2xhc3M9InRpdGxlIj46OnRpdGxlOjombmJzcDs8YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iOjp0aXRsZV9ocmVmOjoiPig6OnRpdGxlX3ZlcnNpb246Oik8L2E+PC9zcGFuPgoJCQk8ZGl2IGNsYXNzPSJtZXNzYWdlYm94IGZvbGRlZCI+CgkJCQk8ZGl2IGlkPSJtZXNzYWdlY291bnQiPm5vIG1lc3NhZ2VzPC9kaXY+CgkJCQk8ZGl2IGlkPSJlcnJvciI+PC9kaXY+CgkJCTwvZGl2PgoJCQk6OmNvbnRyb2xzOjoKCQk8L2Rpdj4KCQk8c2NyaXB0PgoJCQlpZignaG9va19lbmQnIGluIGZyYW1lRWxlbWVudCkKCQkJCWZyYW1lRWxlbWVudC5ob29rX2VuZCh3aW5kb3csIHZpZGVvKTsKCQk8L3NjcmlwdD4KCTwvYm9keT4KPC9odG1sPg"},{ name : "_help_map", data : "Ynk1OnF1aWV0b3k0OmhlbHB5Mzg6ZG8lMjBub3QlMjBzaG93JTIwZXJyb3JzJTIwaW4lMjBvdXRwdXR5ODpkZWZhdWx0X3kzNjolNUJkZWZhdWx0JTNBJTIwQ0lkZW50JTI4ZmFsc2UlMjklNURneTExOnBsYXlzaW5saW5lb1IxeTQ4OmRpc2FibGUlMjB2aWRlb2VsZW1lbnQlMjBwbGF5c2lubGluZSUyMGF0dHJpYnV0ZVIzeTM1OiU1QmRlZmF1bHQlM0ElMjBDSWRlbnQlMjh0cnVlJTI5JTVEZ3k1Om11dGVkb1IxeTM0OnNldCUyMHZpZGVvZWxlbWVudCUyMG11dGVkJTIwc3RhdGVSM1I0Z3k4OmNvbnRyb2xzb1IxeTQ2OmRpc2FibGUlMjB2aWRlb2VsZW1lbnQlMjBidWlsdCUyMGluJTIwY29udHJvbHNSM1I3Z3k4OmF1dG9wbGF5b1IxeTM3OnNldCUyMHZpZGVvZWxlbWVudCUyMGF1dG9wbGF5JTIwc3RhdGVSM1I3Z2g"},{ name : "hlsjs-src", data : "ewogICAgIjAuMTIuMyI6IFsiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9obHMuanNAMC4xMi4zL2Rpc3QvaGxzLm1pbi5qcyJdLAogICAgIjAuMTIuMiI6IFsiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9obHMuanNAMC4xMi4yL2Rpc3QvaGxzLm1pbi5qcyJdLAogICAgIjAuMTEuMCI6IFsiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9obHMuanNAMC4xMS4wL2Rpc3QvaGxzLm1pbi5qcyJdLAogICAgIjAuMTAuMSI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvaGxzLmpzLzAuMTAuMS9obHMuanMiXQp9Cg"},{ name : "hasplayer-src", data : "ewogICAgIjEuMTUuMSI6IFsiaHR0cHM6Ly9vcmFuZ2Utb3BlbnNvdXJjZS5naXRodWIuaW8vaGFzcGxheWVyLmpzLzEuMTUuMS9kaXN0L2hhc3BsYXllci5qcyJdLAogICAgIjEuMTUuMCI6IFsiaHR0cHM6Ly9vcmFuZ2Utb3BlbnNvdXJjZS5naXRodWIuaW8vaGFzcGxheWVyLmpzLzEuMTUuMC9kaXN0L2hhc3BsYXllci5qcyJdLAogICAgIjEuMTQuMiI6IFsiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9oYXNwbGF5ZXIuanNAMS4xNC4yL2Rpc3QvaGFzcGxheWVyLm1pbi5qcyJdCn0"},{ name : "dashjs", data : ""},{ name : "hasplayer-argan", data : "eyJkcm1fc2VydmVyX3BsYXlyZWFkeSI6eyJoZWxwIjoiY29tLm1pY3Jvc29mdC5wbGF5cmVhZHkiLCJkZWZhdWx0XyI6IltkZWZhdWx0OiBDU3RyaW5nKGh0dHBzOi8vcGxheXJlYWR5LmRpcmVjdHRhcHMubmV0L3ByL3N2Yy9yaWdodHNtYW5hZ2VyLmFzbXg/UGxheVJpZ2h0PTEmVXNlU2ltcGxlTm9uUGVyc2lzdGVudExpY2Vuc2U9MSZQbGF5RW5hYmxlcnM9Nzg2NjI3RDgtQzJBNi00NEJFLThGODgtMDhBRTI1NUIwMUE3KV0ifSwiZHJtX3NlcnZlcl93aWRldmluZSI6eyJoZWxwIjoiY29tLndpZGV2aW5lLmFscGhhIiwiZGVmYXVsdF8iOiJbZGVmYXVsdDogQ1N0cmluZyhodHRwczovL3dpZGV2aW5lLXByb3h5LmFwcHNwb3QuY29tL3Byb3h5KV0ifX0"},{ name : "shaka-src", data : ""},{ name : "hasplayer", data : "ZGF0YTp0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTg7YmFzZTY0LEx5OGdSMlZ1WlhKaGRHVmtJR0o1SUVoaGVHVWdOQzR3TGpBdGNtTXVNaXMzTnpBMk9HVXhDaWhtZFc1amRHbHZiaUFvS1NCN0lDSjFjMlVnYzNSeWFXTjBJanNLZG1GeUlDUm9lRU5zWVhOelpYTWdQU0I3ZlN3a1pYTjBjaUE5SUdaMWJtTjBhVzl1S0NrZ2V5QnlaWFIxY200Z2FuTmZRbTl2ZEM1ZlgzTjBjbWx1WjE5eVpXTW9kR2hwY3l3bkp5azdJSDBzSkdoNFJXNTFiWE1nUFNBa2FIaEZiblZ0Y3lCOGZDQjdmU3drWHpzS1puVnVZM1JwYjI0Z0pHVjRkR1Z1WkNobWNtOXRMQ0JtYVdWc1pITXBJSHNLQ1haaGNpQndjbTkwYnlBOUlFOWlhbVZqZEM1amNtVmhkR1VvWm5KdmJTazdDZ2xtYjNJZ0tIWmhjaUJ1WVcxbElHbHVJR1pwWld4a2N5a2djSEp2ZEc5YmJtRnRaVjBnUFNCbWFXVnNaSE5iYm1GdFpWMDdDZ2xwWmlnZ1ptbGxiR1J6TG5SdlUzUnlhVzVuSUNFOVBTQlBZbXBsWTNRdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bklDa2djSEp2ZEc4dWRHOVRkSEpwYm1jZ1BTQm1hV1ZzWkhNdWRHOVRkSEpwYm1jN0NnbHlaWFIxY200Z2NISnZkRzg3Q24wS2RtRnlJRUZ5WjJGdUlEMGdablZ1WTNScGIyNG9LU0I3SUgwN0NpUm9lRU5zWVhOelpYTmJJa0Z5WjJGdUlsMGdQU0JCY21kaGJqc0tRWEpuWVc0dVgxOXVZVzFsWDE4Z1BTQjBjblZsT3dwQmNtZGhiaTV6ZEdGeWRDQTlJR1oxYm1OMGFXOXVLR052Ym1acFp5a2dld29KYVdZb2JuVnNiQ0FoUFNCamIyNW1hV2NwSUhzS0NRbDJZWElnWVhKbmMxOXpaWFFnUFNCdVpYY2dhR0Y0WlY5a2MxOVRkSEpwYm1kTllYQW9LVHNLQ1FsMllYSWdYMmNnUFNBd093b0pDWFpoY2lCZlp6RWdQU0JTWldac1pXTjBMbVpwWld4a2N5aGpiMjVtYVdjcE93b0pDWGRvYVd4bEtGOW5JRHdnWDJjeExteGxibWQwYUNrZ2V3b0pDUWwyWVhJZ1ppQTlJRjluTVZ0ZloxMDdDZ2tKQ1NzclgyYzdDZ2tKQ1haaGNpQjJZV3gxWlNBOUlGSmxabXhsWTNRdVptbGxiR1FvWTI5dVptbG5MR1lwT3dvSkNRbHBaaWhmWDIxaGNGOXlaWE5sY25abFpGdG1YU0FoUFNCdWRXeHNLU0I3Q2drSkNRbGhjbWR6WDNObGRDNXpaWFJTWlhObGNuWmxaQ2htTEhaaGJIVmxLVHNLQ1FrSmZTQmxiSE5sSUhzS0NRa0pDV0Z5WjNOZmMyVjBMbWhiWmwwZ1BTQjJZV3gxWlRzS0NRa0pmUW9KQ1gwS0NRbEJjbWRoYmk1aGNtZHpJRDBnWVhKbmMxOXpaWFE3Q2dsOUNuMDdDa0Z5WjJGdUxtOWlhbVZqZEVaeWIyMU5ZWEFnUFNCbWRXNWpkR2x2YmlodFlYQXBJSHNLQ1haaGNpQnZZbW9nUFNCN0lIMDdDZ2wyWVhJZ2F5QTlJRzFoY0M1clpYbHpLQ2s3Q2dsM2FHbHNaU2hyTG1oaGMwNWxlSFFvS1NrZ2V3b0pDWFpoY2lCck1TQTlJR3N1Ym1WNGRDZ3BPd29KQ1c5aWFsdHJNVjBnUFNCZlgyMWhjRjl5WlhObGNuWmxaRnRyTVYwZ0lUMGdiblZzYkNBL0lHMWhjQzVuWlhSU1pYTmxjblpsWkNock1Ta2dPaUJ0WVhBdWFGdHJNVjA3Q2dsOUNnbHlaWFIxY200Z2IySnFPd3A5T3dwMllYSWdTR0Z6VUd4aGVXVnlJRDBnWm5WdVkzUnBiMjRvS1NCN0lIMDdDaVJvZUVOc1lYTnpaWE5iSWtoaGMxQnNZWGxsY2lKZElEMGdTR0Z6VUd4aGVXVnlPd3BJWVhOUWJHRjVaWEl1WDE5dVlXMWxYMThnUFNCMGNuVmxPd3BJWVhOUWJHRjVaWEl1YldGcGJpQTlJR1oxYm1OMGFXOXVLQ2tnZXdvSmRtRnlJSEJzWVhsbGNpQTlJRWhoYzFCc1lYbGxjaTVsZUhCdmMyVmZjR3hoZVdWeUtHNWxkeUJOWldScFlWQnNZWGxsY2lncEtUc0tDWGRwYm1SdmR5NW9aV3h3SUQwZ1puVnVZM1JwYjI0b0tTQjdDZ2tKY21WMGRYSnVJRUZ5WjJGdUxtOWlhbVZqZEVaeWIyMU5ZWEFvYUdGNFpWOVZibk5sY21saGJHbDZaWEl1Y25WdUtHaGhlR1ZmVW1WemIzVnlZMlV1WjJWMFUzUnlhVzVuS0NKZmFHVnNjRjl0WVhBaUtTa3BPd29KZlRzS0NVRnlaMkZ1TG5OMFlYSjBLSGRwYm1SdmR5NWpiMjVtYVdjcE93b0pkSEo1SUhzS0NRbDJZWElnZG1sa1pXOWZaV3hsYldWdWRDQTlJR1J2WTNWdFpXNTBMbWRsZEVWc1pXMWxiblJDZVVsa0tDSjJhV1JsYnlJcE93b0pDWEJzWVhsbGNpNXBibWwwS0hacFpHVnZYMlZzWlcxbGJuUXBPd29KQ1haaGNpQjBiWEFnUFNCMmFXUmxiMTlsYkdWdFpXNTBMbWhoYzBGMGRISnBZblYwWlNnaVlYVjBiM0JzWVhraUtUc0tDUWx3YkdGNVpYSXVjMlYwUVhWMGIxQnNZWGtvZEcxd0tUc0tDUWx3YkdGNVpYSXVaMlYwUkdWaWRXY29LUzV6WlhSTVpYWmxiQ2cwS1RzS0NRbDJZWElnYzNSeVpXRnRPd29KQ1haaGNpQnpkSEpsWVcweE93b0pDV2xtS0VGeVoyRnVMbUZ5WjNNZ0lUMGdiblZzYkNrZ2V3b0pDUWwyWVhJZ1gzUm9hWE1nUFNCQmNtZGhiaTVoY21kek93b0pDUWx6ZEhKbFlXMHhJRDBnWDE5dFlYQmZjbVZ6WlhKMlpXUmJJbVJ5YlY5elpYSjJaWEpmZDJsa1pYWnBibVVpWFNBaFBTQnVkV3hzSUQ4Z1gzUm9hWE11WlhocGMzUnpVbVZ6WlhKMlpXUW9JbVJ5YlY5elpYSjJaWEpmZDJsa1pYWnBibVVpS1NBNklGOTBhR2x6TG1ndWFHRnpUM2R1VUhKdmNHVnlkSGtvSW1SeWJWOXpaWEoyWlhKZmQybGtaWFpwYm1VaUtUc0tDUWw5SUdWc2MyVWdld29KQ1FsemRISmxZVzB4SUQwZ1ptRnNjMlU3Q2drSmZRb0pDV2xtS0hOMGNtVmhiVEVwSUhzS0NRa0pkbUZ5SUY5MGFHbHpNU0E5SUVGeVoyRnVMbUZ5WjNNN0Nna0pDWE4wY21WaGJTQTlJRjlmYldGd1gzSmxjMlZ5ZG1Wa1d5SmtjbTFmYzJWeWRtVnlYM2RwWkdWMmFXNWxJbDBnSVQwZ2JuVnNiQ0EvSUY5MGFHbHpNUzVuWlhSU1pYTmxjblpsWkNnaVpISnRYM05sY25abGNsOTNhV1JsZG1sdVpTSXBJRG9nWDNSb2FYTXhMbWhiSW1SeWJWOXpaWEoyWlhKZmQybGtaWFpwYm1VaVhUc0tDUWw5SUdWc2MyVWdld29KQ1FsemRISmxZVzBnUFNBaWFIUjBjSE02THk5M2FXUmxkbWx1WlMxd2NtOTRlUzVoY0hCemNHOTBMbU52YlM5d2NtOTRlU0k3Q2drSmZRb0pDWFpoY2lCemRISmxZVzB5T3dvSkNYWmhjaUJ6ZEhKbFlXMHpPd29KQ1dsbUtFRnlaMkZ1TG1GeVozTWdJVDBnYm5Wc2JDa2dld29KQ1FsMllYSWdYM1JvYVhNeUlEMGdRWEpuWVc0dVlYSm5jenNLQ1FrSmMzUnlaV0Z0TXlBOUlGOWZiV0Z3WDNKbGMyVnlkbVZrV3lKa2NtMWZjMlZ5ZG1WeVgzQnNZWGx5WldGa2VTSmRJQ0U5SUc1MWJHd2dQeUJmZEdocGN6SXVaWGhwYzNSelVtVnpaWEoyWldRb0ltUnliVjl6WlhKMlpYSmZjR3hoZVhKbFlXUjVJaWtnT2lCZmRHaHBjekl1YUM1b1lYTlBkMjVRY205d1pYSjBlU2dpWkhKdFgzTmxjblpsY2w5d2JHRjVjbVZoWkhraUtUc0tDUWw5SUdWc2MyVWdld29KQ1FsemRISmxZVzB6SUQwZ1ptRnNjMlU3Q2drSmZRb0pDV2xtS0hOMGNtVmhiVE1wSUhzS0NRa0pkbUZ5SUY5MGFHbHpNeUE5SUVGeVoyRnVMbUZ5WjNNN0Nna0pDWE4wY21WaGJUSWdQU0JmWDIxaGNGOXlaWE5sY25abFpGc2laSEp0WDNObGNuWmxjbDl3YkdGNWNtVmhaSGtpWFNBaFBTQnVkV3hzSUQ4Z1gzUm9hWE16TG1kbGRGSmxjMlZ5ZG1Wa0tDSmtjbTFmYzJWeWRtVnlYM0JzWVhseVpXRmtlU0lwSURvZ1gzUm9hWE16TG1oYkltUnliVjl6WlhKMlpYSmZjR3hoZVhKbFlXUjVJbDA3Q2drSmZTQmxiSE5sSUhzS0NRa0pjM1J5WldGdE1pQTlJQ0pvZEhSd2N6b3ZMM0JzWVhseVpXRmtlUzVrYVhKbFkzUjBZWEJ6TG01bGRDOXdjaTl6ZG1NdmNtbG5hSFJ6YldGdVlXZGxjaTVoYzIxNFAxQnNZWGxTYVdkb2REMHhKbFZ6WlZOcGJYQnNaVTV2YmxCbGNuTnBjM1JsYm5STWFXTmxibk5sUFRFbVVHeGhlVVZ1WVdKc1pYSnpQVGM0TmpZeU4wUTRMVU15UVRZdE5EUkNSUzA0UmpnNExUQTRRVVV5TlRWQ01ERkJOeUk3Q2drSmZRb0pDWFpoY2lCemRISmxZVzAwSUQwZ2V5QjFjbXdnT2lCMWNta3NJSEJ5YjNSRVlYUmhJRG9nZXlBaVkyOXRMbmRwWkdWMmFXNWxMbUZzY0doaElpQTZJSHNnSW14aFZWSk1JaUE2SUhOMGNtVmhiWDBzSUNKamIyMHViV2xqY205emIyWjBMbkJzWVhseVpXRmtlU0lnT2lCN0lDSnNZVlZTVENJZ09pQnpkSEpsWVcweWZYMTlPd29KQ1hCc1lYbGxjaTVzYjJGa0tITjBjbVZoYlRRcE93b0pmU0JqWVhSamFDZ2daU0FwSUhzS0NRbDNhVzVrYjNjdVkyOXVjMjlzWlM1c2IyY29LQ2hsS1NCcGJuTjBZVzVqWlc5bUlHcHpYMThrUW05dmRGOUlZWGhsUlhKeWIzSXBJRDhnWlM1MllXd2dPaUJsS1RzS0NYMEtmVHNLU0dGelVHeGhlV1Z5TG1WNGNHOXpaVjl3YkdGNVpYSWdQU0JtZFc1amRHbHZiaWh3S1NCN0NnbDNhVzVrYjNjdWNHeGhlV1Z5SUQwZ2NEc0tDWEpsZEhWeWJpQndPd3A5T3dwMllYSWdTSGhQZG1WeWNtbGtaWE1nUFNCbWRXNWpkR2x2YmlncElIc2dmVHNLSkdoNFEyeGhjM05sYzFzaVNIaFBkbVZ5Y21sa1pYTWlYU0E5SUVoNFQzWmxjbkpwWkdWek93cEllRTkyWlhKeWFXUmxjeTVmWDI1aGJXVmZYeUE5SUhSeWRXVTdDa2g0VDNabGNuSnBaR1Z6TG5OMGNrUmhkR1VnUFNCbWRXNWpkR2x2YmloektTQjdDZ2x6ZDJsMFkyZ29jeTVzWlc1bmRHZ3BJSHNLQ1dOaGMyVWdPRG9LQ1FsMllYSWdheUE5SUhNdWMzQnNhWFFvSWpvaUtUc0tDUWwyWVhJZ1pDQTlJRzVsZHlCRVlYUmxLQ2s3Q2drSlpGc2ljMlYwVkdsdFpTSmRLREFwT3dvSkNXUmJJbk5sZEZWVVEwaHZkWEp6SWwwb2Exc3dYU2s3Q2drSlpGc2ljMlYwVlZSRFRXbHVkWFJsY3lKZEtHdGJNVjBwT3dvSkNXUmJJbk5sZEZWVVExTmxZMjl1WkhNaVhTaHJXekpkS1RzS0NRbHlaWFIxY200Z1pEc0tDV05oYzJVZ01UQTZDZ2tKZG1GeUlHc3hJRDBnY3k1emNHeHBkQ2dpTFNJcE93b0pDWEpsZEhWeWJpQnVaWGNnUkdGMFpTaHJNVnN3WFN4ck1Wc3hYU0F0SURFc2F6RmJNbDBzTUN3d0xEQXBPd29KWTJGelpTQXhPVG9LQ1FsMllYSWdheklnUFNCekxuTndiR2wwS0NJZ0lpazdDZ2tKZG1GeUlIa2dQU0JyTWxzd1hTNXpjR3hwZENnaUxTSXBPd29KQ1haaGNpQjBJRDBnYXpKYk1WMHVjM0JzYVhRb0lqb2lLVHNLQ1FseVpYUjFjbTRnYm1WM0lFUmhkR1VvZVZzd1hTeDVXekZkSUMwZ01TeDVXekpkTEhSYk1GMHNkRnN4WFN4MFd6SmRLVHNLQ1dSbFptRjFiSFE2Q2drSmRHaHliM2NnYm1WM0lHcHpYMThrUW05dmRGOUlZWGhsUlhKeWIzSW9Ja2x1ZG1Gc2FXUWdaR0YwWlNCbWIzSnRZWFFnT2lBaUlDc2djeWs3Q2dsOUNuMDdDa2g0VDNabGNuSnBaR1Z6TG1OallTQTlJR1oxYm1OMGFXOXVLSE1zYVc1a1pYZ3BJSHNLQ1haaGNpQjRJRDBnY3k1amFHRnlRMjlrWlVGMEtHbHVaR1Y0S1RzS0NXbG1LSGdnSVQwZ2VDa2dld29KQ1hKbGRIVnliaUIxYm1SbFptbHVaV1E3Q2dsOUNnbHlaWFIxY200Z2VEc0tmVHNLU0hoUGRtVnljbWxrWlhNdWMzVmljM1J5SUQwZ1puVnVZM1JwYjI0b2N5eHdiM01zYkdWdUtTQjdDZ2xwWmloc1pXNGdQVDBnYm5Wc2JDa2dld29KQ1d4bGJpQTlJSE11YkdWdVozUm9Pd29KZlNCbGJITmxJR2xtS0d4bGJpQThJREFwSUhzS0NRbHBaaWh3YjNNZ1BUMGdNQ2tnZXdvSkNRbHNaVzRnUFNCekxteGxibWQwYUNBcklHeGxianNLQ1FsOUlHVnNjMlVnZXdvSkNRbHlaWFIxY200Z0lpSTdDZ2tKZlFvSmZRb0pjbVYwZFhKdUlITXVjM1ZpYzNSeUtIQnZjeXhzWlc0cE93cDlPd3BJZUU5MlpYSnlhV1JsY3k1cGRHVnlJRDBnWm5WdVkzUnBiMjRvWVNrZ2V3b0pjbVYwZFhKdUlIc2dZM1Z5SURvZ01Dd2dZWEp5SURvZ1lTd2dhR0Z6VG1WNGRDQTZJR1oxYm1OMGFXOXVLQ2tnZXdvSkNYSmxkSFZ5YmlCMGFHbHpMbU4xY2lBOElIUm9hWE11WVhKeUxteGxibWQwYURzS0NYMHNJRzVsZUhRZ09pQm1kVzVqZEdsdmJpZ3BJSHNLQ1FseVpYUjFjbTRnZEdocGN5NWhjbkpiZEdocGN5NWpkWElySzEwN0NnbDlmVHNLZlRzS1RXRjBhQzVmWDI1aGJXVmZYeUE5SUhSeWRXVTdDblpoY2lCU1pXWnNaV04wSUQwZ1puVnVZM1JwYjI0b0tTQjdJSDA3Q2lSb2VFTnNZWE56WlhOYklsSmxabXhsWTNRaVhTQTlJRkpsWm14bFkzUTdDbEpsWm14bFkzUXVYMTl1WVcxbFgxOGdQU0IwY25WbE93cFNaV1pzWldOMExtWnBaV3hrSUQwZ1puVnVZM1JwYjI0b2J5eG1hV1ZzWkNrZ2V3b0pkSEo1SUhzS0NRbHlaWFIxY200Z2IxdG1hV1ZzWkYwN0NnbDlJR05oZEdOb0tDQmxJQ2tnZXdvSkNYWmhjaUJsTVNBOUlDZ29aU2tnYVc1emRHRnVZMlZ2WmlCcWMxOWZKRUp2YjNSZlNHRjRaVVZ5Y205eUtTQS9JR1V1ZG1Gc0lEb2daVHNLQ1FseVpYUjFjbTRnYm5Wc2JEc0tDWDBLZlRzS1VtVm1iR1ZqZEM1bWFXVnNaSE1nUFNCbWRXNWpkR2x2YmlodktTQjdDZ2wyWVhJZ1lTQTlJRnRkT3dvSmFXWW9ieUFoUFNCdWRXeHNLU0I3Q2drSmRtRnlJR2hoYzA5M2JsQnliM0JsY25SNUlEMGdUMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVRzS0NRbG1iM0lvSUhaaGNpQm1JR2x1SUc4Z0tTQjdDZ2tKYVdZb1ppQWhQU0FpWDE5cFpGOWZJaUFtSmlCbUlDRTlJQ0pvZUY5ZlkyeHZjM1Z5WlhOZlh5SWdKaVlnYUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNodkxHWXBLU0I3Q2drSkNXRXVjSFZ6YUNobUtUc0tDUWw5Q2drSmZRb0pmUW9KY21WMGRYSnVJR0U3Q24wN0NsSmxabXhsWTNRdWFYTkdkVzVqZEdsdmJpQTlJR1oxYm1OMGFXOXVLR1lwSUhzS0NXbG1LSFI1Y0dWdlppaG1LU0E5UFNBaVpuVnVZM1JwYjI0aUtTQjdDZ2tKY21WMGRYSnVJQ0VvWmk1ZlgyNWhiV1ZmWHlCOGZDQm1MbDlmWlc1aGJXVmZYeWs3Q2dsOUlHVnNjMlVnZXdvSkNYSmxkSFZ5YmlCbVlXeHpaVHNLQ1gwS2ZUc0tkbUZ5SUZSNWNHVWdQU0JtZFc1amRHbHZiaWdwSUhzZ2ZUc0tKR2g0UTJ4aGMzTmxjMXNpVkhsd1pTSmRJRDBnVkhsd1pUc0tWSGx3WlM1ZlgyNWhiV1ZmWHlBOUlIUnlkV1U3Q2xSNWNHVXVZM0psWVhSbFJXNTFiU0E5SUdaMWJtTjBhVzl1S0dVc1kyOXVjM1J5TEhCaGNtRnRjeWtnZXdvSmRtRnlJR1lnUFNCU1pXWnNaV04wTG1acFpXeGtLR1VzWTI5dWMzUnlLVHNLQ1dsbUtHWWdQVDBnYm5Wc2JDa2dld29KQ1hSb2NtOTNJRzVsZHlCcWMxOWZKRUp2YjNSZlNHRjRaVVZ5Y205eUtDSk9ieUJ6ZFdOb0lHTnZibk4wY25WamRHOXlJQ0lnS3lCamIyNXpkSElwT3dvSmZRb0phV1lvVW1WbWJHVmpkQzVwYzBaMWJtTjBhVzl1S0dZcEtTQjdDZ2tKYVdZb2NHRnlZVzF6SUQwOUlHNTFiR3dwSUhzS0NRa0pkR2h5YjNjZ2JtVjNJR3B6WDE4a1FtOXZkRjlJWVhobFJYSnliM0lvSWtOdmJuTjBjblZqZEc5eUlDSWdLeUJqYjI1emRISWdLeUFpSUc1bFpXUWdjR0Z5WVcxbGRHVnljeUlwT3dvSkNYMEtDUWx5WlhSMWNtNGdaaTVoY0hCc2VTaGxMSEJoY21GdGN5azdDZ2w5Q2dscFppaHdZWEpoYlhNZ0lUMGdiblZzYkNBbUppQndZWEpoYlhNdWJHVnVaM1JvSUNFOUlEQXBJSHNLQ1FsMGFISnZkeUJ1WlhjZ2FuTmZYeVJDYjI5MFgwaGhlR1ZGY25KdmNpZ2lRMjl1YzNSeWRXTjBiM0lnSWlBcklHTnZibk4wY2lBcklDSWdaRzlsY3lCdWIzUWdibVZsWkNCd1lYSmhiV1YwWlhKeklpazdDZ2w5Q2dseVpYUjFjbTRnWmpzS2ZUc0tkbUZ5SUdoaGVHVmZTVTFoY0NBOUlHWjFibU4wYVc5dUtDa2dleUI5T3dva2FIaERiR0Z6YzJWeld5Sm9ZWGhsTGtsTllYQWlYU0E5SUdoaGVHVmZTVTFoY0RzS2FHRjRaVjlKVFdGd0xsOWZibUZ0WlY5ZklEMGdkSEoxWlRzS2RtRnlJR2hoZUdWZlVtVnpiM1Z5WTJVZ1BTQm1kVzVqZEdsdmJpZ3BJSHNnZlRzS0pHaDRRMnhoYzNObGMxc2lhR0Y0WlM1U1pYTnZkWEpqWlNKZElEMGdhR0Y0WlY5U1pYTnZkWEpqWlRzS2FHRjRaVjlTWlhOdmRYSmpaUzVmWDI1aGJXVmZYeUE5SUhSeWRXVTdDbWhoZUdWZlVtVnpiM1Z5WTJVdVoyVjBVM1J5YVc1bklEMGdablZ1WTNScGIyNG9ibUZ0WlNrZ2V3b0pkbUZ5SUY5bklEMGdNRHNLQ1haaGNpQmZaekVnUFNCb1lYaGxYMUpsYzI5MWNtTmxMbU52Ym5SbGJuUTdDZ2wzYUdsc1pTaGZaeUE4SUY5bk1TNXNaVzVuZEdncElIc0tDUWwyWVhJZ2VDQTlJRjluTVZ0ZloxMDdDZ2tKS3l0Zlp6c0tDUWxwWmloNExtNWhiV1VnUFQwZ2JtRnRaU2tnZXdvSkNRbHBaaWg0TG5OMGNpQWhQU0J1ZFd4c0tTQjdDZ2tKQ1FseVpYUjFjbTRnZUM1emRISTdDZ2tKQ1gwS0NRa0pkbUZ5SUdJZ1BTQm9ZWGhsWDJOeWVYQjBiMTlDWVhObE5qUXVaR1ZqYjJSbEtIZ3VaR0YwWVNrN0Nna0pDWEpsZEhWeWJpQmlMblJ2VTNSeWFXNW5LQ2s3Q2drSmZRb0pmUW9KY21WMGRYSnVJRzUxYkd3N0NuMDdDblpoY2lCb1lYaGxYMThrVlc1elpYSnBZV3hwZW1WeVgwUmxabUYxYkhSU1pYTnZiSFpsY2lBOUlHWjFibU4wYVc5dUtDa2dld3A5T3dva2FIaERiR0Z6YzJWeld5Sm9ZWGhsTGw5VmJuTmxjbWxoYkdsNlpYSXVSR1ZtWVhWc2RGSmxjMjlzZG1WeUlsMGdQU0JvWVhobFgxOGtWVzV6WlhKcFlXeHBlbVZ5WDBSbFptRjFiSFJTWlhOdmJIWmxjanNLYUdGNFpWOWZKRlZ1YzJWeWFXRnNhWHBsY2w5RVpXWmhkV3gwVW1WemIyeDJaWEl1WDE5dVlXMWxYMThnUFNCMGNuVmxPd3BvWVhobFgxOGtWVzV6WlhKcFlXeHBlbVZ5WDBSbFptRjFiSFJTWlhOdmJIWmxjaTV3Y205MGIzUjVjR1VnUFNCN0NnbHlaWE52YkhabFEyeGhjM002SUdaMWJtTjBhVzl1S0c1aGJXVXBJSHNLQ1FseVpYUjFjbTRnSkdoNFEyeGhjM05sYzF0dVlXMWxYVHNLQ1gwS0NTeHlaWE52YkhabFJXNTFiVG9nWm5WdVkzUnBiMjRvYm1GdFpTa2dld29KQ1hKbGRIVnliaUFrYUhoRmJuVnRjMXR1WVcxbFhUc0tDWDBLZlRzS2RtRnlJR2hoZUdWZlZXNXpaWEpwWVd4cGVtVnlJRDBnWm5WdVkzUnBiMjRvWW5WbUtTQjdDZ2wwYUdsekxtSjFaaUE5SUdKMVpqc0tDWFJvYVhNdWJHVnVaM1JvSUQwZ1luVm1MbXhsYm1kMGFEc0tDWFJvYVhNdWNHOXpJRDBnTURzS0NYUm9hWE11YzJOaFkyaGxJRDBnVzEwN0NnbDBhR2x6TG1OaFkyaGxJRDBnVzEwN0NnbDJZWElnY2lBOUlHaGhlR1ZmVlc1elpYSnBZV3hwZW1WeUxrUkZSa0ZWVEZSZlVrVlRUMHhXUlZJN0NnbHBaaWh5SUQwOUlHNTFiR3dwSUhzS0NRbHlJRDBnYm1WM0lHaGhlR1ZmWHlSVmJuTmxjbWxoYkdsNlpYSmZSR1ZtWVhWc2RGSmxjMjlzZG1WeUtDazdDZ2tKYUdGNFpWOVZibk5sY21saGJHbDZaWEl1UkVWR1FWVk1WRjlTUlZOUFRGWkZVaUE5SUhJN0NnbDlDZ2wwYUdsekxuSmxjMjlzZG1WeUlEMGdjanNLZlRzS0pHaDRRMnhoYzNObGMxc2lhR0Y0WlM1VmJuTmxjbWxoYkdsNlpYSWlYU0E5SUdoaGVHVmZWVzV6WlhKcFlXeHBlbVZ5T3dwb1lYaGxYMVZ1YzJWeWFXRnNhWHBsY2k1ZlgyNWhiV1ZmWHlBOUlIUnlkV1U3Q21oaGVHVmZWVzV6WlhKcFlXeHBlbVZ5TG1sdWFYUkRiMlJsY3lBOUlHWjFibU4wYVc5dUtDa2dld29KZG1GeUlHTnZaR1Z6SUQwZ1cxMDdDZ2wyWVhJZ1gyY2dQU0F3T3dvSmRtRnlJRjluTVNBOUlHaGhlR1ZmVlc1elpYSnBZV3hwZW1WeUxrSkJVMFUyTkM1c1pXNW5kR2c3Q2dsM2FHbHNaU2hmWnlBOElGOW5NU2tnZXdvSkNYWmhjaUJwSUQwZ1gyY3JLenNLQ1FsamIyUmxjMXRvWVhobFgxVnVjMlZ5YVdGc2FYcGxjaTVDUVZORk5qUXVZMmhoY2tOdlpHVkJkQ2hwS1YwZ1BTQnBPd29KZlFvSmNtVjBkWEp1SUdOdlpHVnpPd3A5T3dwb1lYaGxYMVZ1YzJWeWFXRnNhWHBsY2k1eWRXNGdQU0JtZFc1amRHbHZiaWgyS1NCN0NnbHlaWFIxY200Z2JtVjNJR2hoZUdWZlZXNXpaWEpwWVd4cGVtVnlLSFlwTG5WdWMyVnlhV0ZzYVhwbEtDazdDbjA3Q21oaGVHVmZWVzV6WlhKcFlXeHBlbVZ5TG5CeWIzUnZkSGx3WlNBOUlIc0tDWEpsWVdSRWFXZHBkSE02SUdaMWJtTjBhVzl1S0NrZ2V3b0pDWFpoY2lCcklEMGdNRHNLQ1FsMllYSWdjeUE5SUdaaGJITmxPd29KQ1haaGNpQm1jRzl6SUQwZ2RHaHBjeTV3YjNNN0Nna0pkMmhwYkdVb2RISjFaU2tnZXdvSkNRbDJZWElnWXlBOUlIUm9hWE11WW5WbUxtTm9ZWEpEYjJSbFFYUW9kR2hwY3k1d2IzTXBPd29KQ1FscFppaGpJQ0U5SUdNcElIc0tDUWtKQ1dKeVpXRnJPd29KQ1FsOUNna0pDV2xtS0dNZ1BUMGdORFVwSUhzS0NRa0pDV2xtS0hSb2FYTXVjRzl6SUNFOUlHWndiM01wSUhzS0NRa0pDUWxpY21WaGF6c0tDUWtKQ1gwS0NRa0pDWE1nUFNCMGNuVmxPd29KQ1FrSmRHaHBjeTV3YjNNckt6c0tDUWtKQ1dOdmJuUnBiblZsT3dvSkNRbDlDZ2tKQ1dsbUtHTWdQQ0EwT0NCOGZDQmpJRDRnTlRjcElIc0tDUWtKQ1dKeVpXRnJPd29KQ1FsOUNna0pDV3NnUFNCcklDb2dNVEFnS3lBb1l5QXRJRFE0S1RzS0NRa0pkR2hwY3k1d2IzTXJLenNLQ1FsOUNna0phV1lvY3lrZ2V3b0pDUWxySUNvOUlDMHhPd29KQ1gwS0NRbHlaWFIxY200Z2F6c0tDWDBLQ1N4eVpXRmtSbXh2WVhRNklHWjFibU4wYVc5dUtDa2dld29KQ1haaGNpQndNU0E5SUhSb2FYTXVjRzl6T3dvSkNYZG9hV3hsS0hSeWRXVXBJSHNLQ1FrSmRtRnlJR01nUFNCMGFHbHpMbUoxWmk1amFHRnlRMjlrWlVGMEtIUm9hWE11Y0c5ektUc0tDUWtKYVdZb1l5QWhQU0JqS1NCN0Nna0pDUWxpY21WaGF6c0tDUWtKZlFvSkNRbHBaaWhqSUQ0OUlEUXpJQ1ltSUdNZ1BDQTFPQ0I4ZkNCaklEMDlJREV3TVNCOGZDQmpJRDA5SURZNUtTQjdDZ2tKQ1FsMGFHbHpMbkJ2Y3lzck93b0pDUWw5SUdWc2MyVWdld29KQ1FrSlluSmxZV3M3Q2drSkNYMEtDUWw5Q2drSmNtVjBkWEp1SUhCaGNuTmxSbXh2WVhRb1NIaFBkbVZ5Y21sa1pYTXVjM1ZpYzNSeUtIUm9hWE11WW5WbUxIQXhMSFJvYVhNdWNHOXpJQzBnY0RFcEtUc0tDWDBLQ1N4MWJuTmxjbWxoYkdsNlpVOWlhbVZqZERvZ1puVnVZM1JwYjI0b2J5a2dld29KQ1hkb2FXeGxLSFJ5ZFdVcElIc0tDUWtKYVdZb2RHaHBjeTV3YjNNZ1BqMGdkR2hwY3k1c1pXNW5kR2dwSUhzS0NRa0pDWFJvY205M0lHNWxkeUJxYzE5ZkpFSnZiM1JmU0dGNFpVVnljbTl5S0NKSmJuWmhiR2xrSUc5aWFtVmpkQ0lwT3dvSkNRbDlDZ2tKQ1dsbUtIUm9hWE11WW5WbUxtTm9ZWEpEYjJSbFFYUW9kR2hwY3k1d2IzTXBJRDA5SURFd015a2dld29KQ1FrSlluSmxZV3M3Q2drSkNYMEtDUWtKZG1GeUlHc2dQU0IwYUdsekxuVnVjMlZ5YVdGc2FYcGxLQ2s3Q2drSkNXbG1LSFI1Y0dWdlppaHJLU0FoUFNBaWMzUnlhVzVuSWlrZ2V3b0pDUWtKZEdoeWIzY2dibVYzSUdwelgxOGtRbTl2ZEY5SVlYaGxSWEp5YjNJb0lrbHVkbUZzYVdRZ2IySnFaV04wSUd0bGVTSXBPd29KQ1FsOUNna0pDWFpoY2lCMklEMGdkR2hwY3k1MWJuTmxjbWxoYkdsNlpTZ3BPd29KQ1FsdlcydGRJRDBnZGpzS0NRbDlDZ2tKZEdocGN5NXdiM01yS3pzS0NYMEtDU3gxYm5ObGNtbGhiR2w2WlVWdWRXMDZJR1oxYm1OMGFXOXVLR1ZrWldOc0xIUmhaeWtnZXdvSkNXbG1LSFJvYVhNdVluVm1MbU5vWVhKRGIyUmxRWFFvZEdocGN5NXdiM01yS3lrZ0lUMGdOVGdwSUhzS0NRa0pkR2h5YjNjZ2JtVjNJR3B6WDE4a1FtOXZkRjlJWVhobFJYSnliM0lvSWtsdWRtRnNhV1FnWlc1MWJTQm1iM0p0WVhRaUtUc0tDUWw5Q2drSmRtRnlJRzVoY21keklEMGdkR2hwY3k1eVpXRmtSR2xuYVhSektDazdDZ2tKYVdZb2JtRnlaM01nUFQwZ01Da2dld29KQ1FseVpYUjFjbTRnVkhsd1pTNWpjbVZoZEdWRmJuVnRLR1ZrWldOc0xIUmhaeWs3Q2drSmZRb0pDWFpoY2lCaGNtZHpJRDBnVzEwN0Nna0pkMmhwYkdVb2JtRnlaM010TFNBK0lEQXBJR0Z5WjNNdWNIVnphQ2gwYUdsekxuVnVjMlZ5YVdGc2FYcGxLQ2twT3dvSkNYSmxkSFZ5YmlCVWVYQmxMbU55WldGMFpVVnVkVzBvWldSbFkyd3NkR0ZuTEdGeVozTXBPd29KZlFvSkxIVnVjMlZ5YVdGc2FYcGxPaUJtZFc1amRHbHZiaWdwSUhzS0NRbHpkMmwwWTJnb2RHaHBjeTVpZFdZdVkyaGhja052WkdWQmRDaDBhR2x6TG5CdmN5c3JLU2tnZXdvSkNXTmhjMlVnTmpVNkNna0pDWFpoY2lCdVlXMWxJRDBnZEdocGN5NTFibk5sY21saGJHbDZaU2dwT3dvSkNRbDJZWElnWTJ3Z1BTQjBhR2x6TG5KbGMyOXNkbVZ5TG5KbGMyOXNkbVZEYkdGemN5aHVZVzFsS1RzS0NRa0phV1lvWTJ3Z1BUMGdiblZzYkNrZ2V3b0pDUWtKZEdoeWIzY2dibVYzSUdwelgxOGtRbTl2ZEY5SVlYaGxSWEp5YjNJb0lrTnNZWE56SUc1dmRDQm1iM1Z1WkNBaUlDc2dibUZ0WlNrN0Nna0pDWDBLQ1FrSmNtVjBkWEp1SUdOc093b0pDV05oYzJVZ05qWTZDZ2tKQ1haaGNpQnVZVzFsTVNBOUlIUm9hWE11ZFc1elpYSnBZV3hwZW1Vb0tUc0tDUWtKZG1GeUlHVWdQU0IwYUdsekxuSmxjMjlzZG1WeUxuSmxjMjlzZG1WRmJuVnRLRzVoYldVeEtUc0tDUWtKYVdZb1pTQTlQU0J1ZFd4c0tTQjdDZ2tKQ1FsMGFISnZkeUJ1WlhjZ2FuTmZYeVJDYjI5MFgwaGhlR1ZGY25KdmNpZ2lSVzUxYlNCdWIzUWdabTkxYm1RZ0lpQXJJRzVoYldVeEtUc0tDUWtKZlFvSkNRbHlaWFIxY200Z1pUc0tDUWxqWVhObElEWTNPZ29KQ1FsMllYSWdibUZ0WlRJZ1BTQjBhR2x6TG5WdWMyVnlhV0ZzYVhwbEtDazdDZ2tKQ1haaGNpQmpiREVnUFNCMGFHbHpMbkpsYzI5c2RtVnlMbkpsYzI5c2RtVkRiR0Z6Y3lodVlXMWxNaWs3Q2drSkNXbG1LR05zTVNBOVBTQnVkV3hzS1NCN0Nna0pDUWwwYUhKdmR5QnVaWGNnYW5OZlh5UkNiMjkwWDBoaGVHVkZjbkp2Y2lnaVEyeGhjM01nYm05MElHWnZkVzVrSUNJZ0t5QnVZVzFsTWlrN0Nna0pDWDBLQ1FrSmRtRnlJRzhnUFNCUFltcGxZM1F1WTNKbFlYUmxLR05zTVM1d2NtOTBiM1I1Y0dVcE93b0pDUWwwYUdsekxtTmhZMmhsTG5CMWMyZ29ieWs3Q2drSkNXOHVhSGhWYm5ObGNtbGhiR2w2WlNoMGFHbHpLVHNLQ1FrSmFXWW9kR2hwY3k1aWRXWXVZMmhoY2tOdlpHVkJkQ2gwYUdsekxuQnZjeXNyS1NBaFBTQXhNRE1wSUhzS0NRa0pDWFJvY205M0lHNWxkeUJxYzE5ZkpFSnZiM1JmU0dGNFpVVnljbTl5S0NKSmJuWmhiR2xrSUdOMWMzUnZiU0JrWVhSaElpazdDZ2tKQ1gwS0NRa0pjbVYwZFhKdUlHODdDZ2tKWTJGelpTQTNOem9LQ1FrSmRtRnlJR2dnUFNCdVpYY2dhR0Y0WlY5a2MxOVBZbXBsWTNSTllYQW9LVHNLQ1FrSmRHaHBjeTVqWVdOb1pTNXdkWE5vS0dncE93b0pDUWwyWVhJZ1luVm1JRDBnZEdocGN5NWlkV1k3Q2drSkNYZG9hV3hsS0hSb2FYTXVZblZtTG1Ob1lYSkRiMlJsUVhRb2RHaHBjeTV3YjNNcElDRTlJREV3TkNrZ2V3b0pDUWtKZG1GeUlITWdQU0IwYUdsekxuVnVjMlZ5YVdGc2FYcGxLQ2s3Q2drSkNRbG9Mbk5sZENoekxIUm9hWE11ZFc1elpYSnBZV3hwZW1Vb0tTazdDZ2tKQ1gwS0NRa0pkR2hwY3k1d2IzTXJLenNLQ1FrSmNtVjBkWEp1SUdnN0Nna0pZMkZ6WlNBNE1qb0tDUWtKZG1GeUlHNGdQU0IwYUdsekxuSmxZV1JFYVdkcGRITW9LVHNLQ1FrSmFXWW9iaUE4SURBZ2ZId2diaUErUFNCMGFHbHpMbk5qWVdOb1pTNXNaVzVuZEdncElIc0tDUWtKQ1hSb2NtOTNJRzVsZHlCcWMxOWZKRUp2YjNSZlNHRjRaVVZ5Y205eUtDSkpiblpoYkdsa0lITjBjbWx1WnlCeVpXWmxjbVZ1WTJVaUtUc0tDUWtKZlFvSkNRbHlaWFIxY200Z2RHaHBjeTV6WTJGamFHVmJibDA3Q2drSlkyRnpaU0E1TnpvS0NRa0pkbUZ5SUdKMVpqRWdQU0IwYUdsekxtSjFaanNLQ1FrSmRtRnlJR0VnUFNCYlhUc0tDUWtKZEdocGN5NWpZV05vWlM1d2RYTm9LR0VwT3dvSkNRbDNhR2xzWlNoMGNuVmxLU0I3Q2drSkNRbDJZWElnWXlBOUlIUm9hWE11WW5WbUxtTm9ZWEpEYjJSbFFYUW9kR2hwY3k1d2IzTXBPd29KQ1FrSmFXWW9ZeUE5UFNBeE1EUXBJSHNLQ1FrSkNRbDBhR2x6TG5CdmN5c3JPd29KQ1FrSkNXSnlaV0ZyT3dvSkNRa0pmUW9KQ1FrSmFXWW9ZeUE5UFNBeE1UY3BJSHNLQ1FrSkNRbDBhR2x6TG5CdmN5c3JPd29KQ1FrSkNYWmhjaUJ1TVNBOUlIUm9hWE11Y21WaFpFUnBaMmwwY3lncE93b0pDUWtKQ1dGYllTNXNaVzVuZEdnZ0t5QnVNU0F0SURGZElEMGdiblZzYkRzS0NRa0pDWDBnWld4elpTQjdDZ2tKQ1FrSllTNXdkWE5vS0hSb2FYTXVkVzV6WlhKcFlXeHBlbVVvS1NrN0Nna0pDUWw5Q2drSkNYMEtDUWtKY21WMGRYSnVJR0U3Q2drSlkyRnpaU0E1T0RvS0NRa0pkbUZ5SUdneElEMGdibVYzSUdoaGVHVmZaSE5mVTNSeWFXNW5UV0Z3S0NrN0Nna0pDWFJvYVhNdVkyRmphR1V1Y0hWemFDaG9NU2s3Q2drSkNYWmhjaUJpZFdZeUlEMGdkR2hwY3k1aWRXWTdDZ2tKQ1hkb2FXeGxLSFJvYVhNdVluVm1MbU5vWVhKRGIyUmxRWFFvZEdocGN5NXdiM01wSUNFOUlERXdOQ2tnZXdvSkNRa0pkbUZ5SUhNeElEMGdkR2hwY3k1MWJuTmxjbWxoYkdsNlpTZ3BPd29KQ1FrSmRtRnlJSFpoYkhWbElEMGdkR2hwY3k1MWJuTmxjbWxoYkdsNlpTZ3BPd29KQ1FrSmFXWW9YMTl0WVhCZmNtVnpaWEoyWldSYmN6RmRJQ0U5SUc1MWJHd3BJSHNLQ1FrSkNRbG9NUzV6WlhSU1pYTmxjblpsWkNoek1TeDJZV3gxWlNrN0Nna0pDUWw5SUdWc2MyVWdld29KQ1FrSkNXZ3hMbWhiY3pGZElEMGdkbUZzZFdVN0Nna0pDUWw5Q2drSkNYMEtDUWtKZEdocGN5NXdiM01yS3pzS0NRa0pjbVYwZFhKdUlHZ3hPd29KQ1dOaGMyVWdPVGs2Q2drSkNYWmhjaUJ1WVcxbE15QTlJSFJvYVhNdWRXNXpaWEpwWVd4cGVtVW9LVHNLQ1FrSmRtRnlJR05zTWlBOUlIUm9hWE11Y21WemIyeDJaWEl1Y21WemIyeDJaVU5zWVhOektHNWhiV1V6S1RzS0NRa0phV1lvWTJ3eUlEMDlJRzUxYkd3cElIc0tDUWtKQ1hSb2NtOTNJRzVsZHlCcWMxOWZKRUp2YjNSZlNHRjRaVVZ5Y205eUtDSkRiR0Z6Y3lCdWIzUWdabTkxYm1RZ0lpQXJJRzVoYldVektUc0tDUWtKZlFvSkNRbDJZWElnYnpFZ1BTQlBZbXBsWTNRdVkzSmxZWFJsS0dOc01pNXdjbTkwYjNSNWNHVXBPd29KQ1FsMGFHbHpMbU5oWTJobExuQjFjMmdvYnpFcE93b0pDUWwwYUdsekxuVnVjMlZ5YVdGc2FYcGxUMkpxWldOMEtHOHhLVHNLQ1FrSmNtVjBkWEp1SUc4eE93b0pDV05oYzJVZ01UQXdPZ29KQ1FseVpYUjFjbTRnZEdocGN5NXlaV0ZrUm14dllYUW9LVHNLQ1FsallYTmxJREV3TWpvS0NRa0pjbVYwZFhKdUlHWmhiSE5sT3dvSkNXTmhjMlVnTVRBMU9nb0pDUWx5WlhSMWNtNGdkR2hwY3k1eVpXRmtSR2xuYVhSektDazdDZ2tKWTJGelpTQXhNRFk2Q2drSkNYWmhjaUJ1WVcxbE5DQTlJSFJvYVhNdWRXNXpaWEpwWVd4cGVtVW9LVHNLQ1FrSmRtRnlJR1ZrWldOc0lEMGdkR2hwY3k1eVpYTnZiSFpsY2k1eVpYTnZiSFpsUlc1MWJTaHVZVzFsTkNrN0Nna0pDV2xtS0dWa1pXTnNJRDA5SUc1MWJHd3BJSHNLQ1FrSkNYUm9jbTkzSUc1bGR5QnFjMTlmSkVKdmIzUmZTR0Y0WlVWeWNtOXlLQ0pGYm5WdElHNXZkQ0JtYjNWdVpDQWlJQ3NnYm1GdFpUUXBPd29KQ1FsOUNna0pDWFJvYVhNdWNHOXpLeXM3Q2drSkNYWmhjaUJwYm1SbGVDQTlJSFJvYVhNdWNtVmhaRVJwWjJsMGN5Z3BPd29KQ1FsMllYSWdkR0ZuSUQwZ1pXUmxZMnd1WDE5amIyNXpkSEoxWTNSelgxOHVjMnhwWTJVb0tWdHBibVJsZUYwN0Nna0pDV2xtS0hSaFp5QTlQU0J1ZFd4c0tTQjdDZ2tKQ1FsMGFISnZkeUJ1WlhjZ2FuTmZYeVJDYjI5MFgwaGhlR1ZGY25KdmNpZ2lWVzVyYm05M2JpQmxiblZ0SUdsdVpHVjRJQ0lnS3lCdVlXMWxOQ0FySUNKQUlpQXJJR2x1WkdWNEtUc0tDUWtKZlFvSkNRbDJZWElnWlRFZ1BTQjBhR2x6TG5WdWMyVnlhV0ZzYVhwbFJXNTFiU2hsWkdWamJDeDBZV2NwT3dvSkNRbDBhR2x6TG1OaFkyaGxMbkIxYzJnb1pURXBPd29KQ1FseVpYUjFjbTRnWlRFN0Nna0pZMkZ6WlNBeE1EYzZDZ2tKQ1hKbGRIVnliaUJPWVU0N0Nna0pZMkZ6WlNBeE1EZzZDZ2tKQ1haaGNpQnNJRDBnYm1WM0lHaGhlR1ZmWkhOZlRHbHpkQ2dwT3dvSkNRbDBhR2x6TG1OaFkyaGxMbkIxYzJnb2JDazdDZ2tKQ1haaGNpQmlkV1l6SUQwZ2RHaHBjeTVpZFdZN0Nna0pDWGRvYVd4bEtIUm9hWE11WW5WbUxtTm9ZWEpEYjJSbFFYUW9kR2hwY3k1d2IzTXBJQ0U5SURFd05Da2diQzVoWkdRb2RHaHBjeTUxYm5ObGNtbGhiR2w2WlNncEtUc0tDUWtKZEdocGN5NXdiM01yS3pzS0NRa0pjbVYwZFhKdUlHdzdDZ2tKWTJGelpTQXhNRGs2Q2drSkNYSmxkSFZ5YmlBdFNXNW1hVzVwZEhrN0Nna0pZMkZ6WlNBeE1UQTZDZ2tKQ1hKbGRIVnliaUJ1ZFd4c093b0pDV05oYzJVZ01URXhPZ29KQ1FsMllYSWdieklnUFNCN0lIMDdDZ2tKQ1hSb2FYTXVZMkZqYUdVdWNIVnphQ2h2TWlrN0Nna0pDWFJvYVhNdWRXNXpaWEpwWVd4cGVtVlBZbXBsWTNRb2J6SXBPd29KQ1FseVpYUjFjbTRnYnpJN0Nna0pZMkZ6WlNBeE1USTZDZ2tKQ1hKbGRIVnliaUJKYm1acGJtbDBlVHNLQ1FsallYTmxJREV4TXpvS0NRa0pkbUZ5SUdneUlEMGdibVYzSUdoaGVHVmZaSE5mU1c1MFRXRndLQ2s3Q2drSkNYUm9hWE11WTJGamFHVXVjSFZ6YUNob01pazdDZ2tKQ1haaGNpQmlkV1kwSUQwZ2RHaHBjeTVpZFdZN0Nna0pDWFpoY2lCak1TQTlJSFJvYVhNdVluVm1MbU5vWVhKRGIyUmxRWFFvZEdocGN5NXdiM01yS3lrN0Nna0pDWGRvYVd4bEtHTXhJRDA5SURVNEtTQjdDZ2tKQ1FsMllYSWdhU0E5SUhSb2FYTXVjbVZoWkVScFoybDBjeWdwT3dvSkNRa0pkbUZ5SUhaaGJIVmxNU0E5SUhSb2FYTXVkVzV6WlhKcFlXeHBlbVVvS1RzS0NRa0pDV2d5TG1oYmFWMGdQU0IyWVd4MVpURTdDZ2tKQ1Fsak1TQTlJSFJvYVhNdVluVm1MbU5vWVhKRGIyUmxRWFFvZEdocGN5NXdiM01yS3lrN0Nna0pDWDBLQ1FrSmFXWW9ZekVnSVQwZ01UQTBLU0I3Q2drSkNRbDBhSEp2ZHlCdVpYY2dhbk5mWHlSQ2IyOTBYMGhoZUdWRmNuSnZjaWdpU1c1MllXeHBaQ0JKYm5STllYQWdabTl5YldGMElpazdDZ2tKQ1gwS0NRa0pjbVYwZFhKdUlHZ3lPd29KQ1dOaGMyVWdNVEUwT2dvSkNRbDJZWElnYmpJZ1BTQjBhR2x6TG5KbFlXUkVhV2RwZEhNb0tUc0tDUWtKYVdZb2JqSWdQQ0F3SUh4OElHNHlJRDQ5SUhSb2FYTXVZMkZqYUdVdWJHVnVaM1JvS1NCN0Nna0pDUWwwYUhKdmR5QnVaWGNnYW5OZlh5UkNiMjkwWDBoaGVHVkZjbkp2Y2lnaVNXNTJZV3hwWkNCeVpXWmxjbVZ1WTJVaUtUc0tDUWtKZlFvSkNRbHlaWFIxY200Z2RHaHBjeTVqWVdOb1pWdHVNbDA3Q2drSlkyRnpaU0F4TVRVNkNna0pDWFpoY2lCc1pXNGdQU0IwYUdsekxuSmxZV1JFYVdkcGRITW9LVHNLQ1FrSmRtRnlJR0oxWmpVZ1BTQjBhR2x6TG1KMVpqc0tDUWtKYVdZb2RHaHBjeTVpZFdZdVkyaGhja052WkdWQmRDaDBhR2x6TG5CdmN5c3JLU0FoUFNBMU9DQjhmQ0IwYUdsekxteGxibWQwYUNBdElIUm9hWE11Y0c5eklEd2diR1Z1S1NCN0Nna0pDUWwwYUhKdmR5QnVaWGNnYW5OZlh5UkNiMjkwWDBoaGVHVkZjbkp2Y2lnaVNXNTJZV3hwWkNCaWVYUmxjeUJzWlc1bmRHZ2lLVHNLQ1FrSmZRb0pDUWwyWVhJZ1kyOWtaWE1nUFNCb1lYaGxYMVZ1YzJWeWFXRnNhWHBsY2k1RFQwUkZVenNLQ1FrSmFXWW9ZMjlrWlhNZ1BUMGdiblZzYkNrZ2V3b0pDUWtKWTI5a1pYTWdQU0JvWVhobFgxVnVjMlZ5YVdGc2FYcGxjaTVwYm1sMFEyOWtaWE1vS1RzS0NRa0pDV2hoZUdWZlZXNXpaWEpwWVd4cGVtVnlMa05QUkVWVElEMGdZMjlrWlhNN0Nna0pDWDBLQ1FrSmRtRnlJR2t4SUQwZ2RHaHBjeTV3YjNNN0Nna0pDWFpoY2lCeVpYTjBJRDBnYkdWdUlDWWdNenNLQ1FrSmRtRnlJSE5wZW1VZ1BTQW9iR1Z1SUQ0K0lESXBJQ29nTXlBcklDaHlaWE4wSUQ0OUlESWdQeUJ5WlhOMElDMGdNU0E2SURBcE93b0pDUWwyWVhJZ2JXRjRJRDBnYVRFZ0t5QW9iR1Z1SUMwZ2NtVnpkQ2s3Q2drSkNYWmhjaUJpZVhSbGN5QTlJRzVsZHlCb1lYaGxYMmx2WDBKNWRHVnpLRzVsZHlCQmNuSmhlVUoxWm1abGNpaHphWHBsS1NrN0Nna0pDWFpoY2lCaWNHOXpJRDBnTURzS0NRa0pkMmhwYkdVb2FURWdQQ0J0WVhncElIc0tDUWtKQ1haaGNpQmpNVEVnUFNCamIyUmxjMXRpZFdZMUxtTm9ZWEpEYjJSbFFYUW9hVEVyS3lsZE93b0pDUWtKZG1GeUlHTXlJRDBnWTI5a1pYTmJZblZtTlM1amFHRnlRMjlrWlVGMEtHa3hLeXNwWFRzS0NRa0pDV0o1ZEdWekxtSmJZbkJ2Y3lzclhTQTlJR014TVNBOFBDQXlJSHdnWXpJZ1BqNGdORHNLQ1FrSkNYWmhjaUJqTXlBOUlHTnZaR1Z6VzJKMVpqVXVZMmhoY2tOdlpHVkJkQ2hwTVNzcktWMDdDZ2tKQ1FsaWVYUmxjeTVpVzJKd2IzTXJLMTBnUFNCak1pQThQQ0EwSUh3Z1l6TWdQajRnTWpzS0NRa0pDWFpoY2lCak5DQTlJR052WkdWelcySjFaalV1WTJoaGNrTnZaR1ZCZENocE1Tc3JLVjA3Q2drSkNRbGllWFJsY3k1aVcySndiM01ySzEwZ1BTQmpNeUE4UENBMklId2dZelE3Q2drSkNYMEtDUWtKYVdZb2NtVnpkQ0ErUFNBeUtTQjdDZ2tKQ1FsMllYSWdZekV5SUQwZ1kyOWtaWE5iWW5WbU5TNWphR0Z5UTI5a1pVRjBLR2t4S3lzcFhUc0tDUWtKQ1haaGNpQmpNakVnUFNCamIyUmxjMXRpZFdZMUxtTm9ZWEpEYjJSbFFYUW9hVEVyS3lsZE93b0pDUWtKWW5sMFpYTXVZbHRpY0c5ekt5dGRJRDBnWXpFeUlEdzhJRElnZkNCak1qRWdQajRnTkRzS0NRa0pDV2xtS0hKbGMzUWdQVDBnTXlrZ2V3b0pDUWtKQ1haaGNpQmpNekVnUFNCamIyUmxjMXRpZFdZMUxtTm9ZWEpEYjJSbFFYUW9hVEVyS3lsZE93b0pDUWtKQ1dKNWRHVnpMbUpiWW5CdmN5c3JYU0E5SUdNeU1TQThQQ0EwSUh3Z1l6TXhJRDQrSURJN0Nna0pDUWw5Q2drSkNYMEtDUWtKZEdocGN5NXdiM01nS3owZ2JHVnVPd29KQ1FsMGFHbHpMbU5oWTJobExuQjFjMmdvWW5sMFpYTXBPd29KQ1FseVpYUjFjbTRnWW5sMFpYTTdDZ2tKWTJGelpTQXhNVFk2Q2drSkNYSmxkSFZ5YmlCMGNuVmxPd29KQ1dOaGMyVWdNVEU0T2dvSkNRbDJZWElnWkRzS0NRa0phV1lvZEdocGN5NWlkV1l1WTJoaGNrTnZaR1ZCZENoMGFHbHpMbkJ2Y3lrZ1BqMGdORGdnSmlZZ2RHaHBjeTVpZFdZdVkyaGhja052WkdWQmRDaDBhR2x6TG5CdmN5a2dQRDBnTlRjZ0ppWWdkR2hwY3k1aWRXWXVZMmhoY2tOdlpHVkJkQ2gwYUdsekxuQnZjeUFySURFcElENDlJRFE0SUNZbUlIUm9hWE11WW5WbUxtTm9ZWEpEYjJSbFFYUW9kR2hwY3k1d2IzTWdLeUF4S1NBOFBTQTFOeUFtSmlCMGFHbHpMbUoxWmk1amFHRnlRMjlrWlVGMEtIUm9hWE11Y0c5eklDc2dNaWtnUGowZ05EZ2dKaVlnZEdocGN5NWlkV1l1WTJoaGNrTnZaR1ZCZENoMGFHbHpMbkJ2Y3lBcklESXBJRHc5SURVM0lDWW1JSFJvYVhNdVluVm1MbU5vWVhKRGIyUmxRWFFvZEdocGN5NXdiM01nS3lBektTQStQU0EwT0NBbUppQjBhR2x6TG1KMVppNWphR0Z5UTI5a1pVRjBLSFJvYVhNdWNHOXpJQ3NnTXlrZ1BEMGdOVGNnSmlZZ2RHaHBjeTVpZFdZdVkyaGhja052WkdWQmRDaDBhR2x6TG5CdmN5QXJJRFFwSUQwOUlEUTFLU0I3Q2drSkNRbGtJRDBnU0hoUGRtVnljbWxrWlhNdWMzUnlSR0YwWlNoSWVFOTJaWEp5YVdSbGN5NXpkV0p6ZEhJb2RHaHBjeTVpZFdZc2RHaHBjeTV3YjNNc01Ua3BLVHNLQ1FrSkNYUm9hWE11Y0c5eklDczlJREU1T3dvSkNRbDlJR1ZzYzJVZ2V3b0pDUWtKWkNBOUlHNWxkeUJFWVhSbEtIUm9hWE11Y21WaFpFWnNiMkYwS0NrcE93b0pDUWw5Q2drSkNYUm9hWE11WTJGamFHVXVjSFZ6YUNoa0tUc0tDUWtKY21WMGRYSnVJR1E3Q2drSlkyRnpaU0F4TVRrNkNna0pDWFpoY2lCdVlXMWxOU0E5SUhSb2FYTXVkVzV6WlhKcFlXeHBlbVVvS1RzS0NRa0pkbUZ5SUdWa1pXTnNNU0E5SUhSb2FYTXVjbVZ6YjJ4MlpYSXVjbVZ6YjJ4MlpVVnVkVzBvYm1GdFpUVXBPd29KQ1FscFppaGxaR1ZqYkRFZ1BUMGdiblZzYkNrZ2V3b0pDUWtKZEdoeWIzY2dibVYzSUdwelgxOGtRbTl2ZEY5SVlYaGxSWEp5YjNJb0lrVnVkVzBnYm05MElHWnZkVzVrSUNJZ0t5QnVZVzFsTlNrN0Nna0pDWDBLQ1FrSmRtRnlJR1V5SUQwZ2RHaHBjeTUxYm5ObGNtbGhiR2w2WlVWdWRXMG9aV1JsWTJ3eExIUm9hWE11ZFc1elpYSnBZV3hwZW1Vb0tTazdDZ2tKQ1hSb2FYTXVZMkZqYUdVdWNIVnphQ2hsTWlrN0Nna0pDWEpsZEhWeWJpQmxNanNLQ1FsallYTmxJREV5TURvS0NRa0pkR2h5YjNjZ2FuTmZYeVJDYjI5MFgwaGhlR1ZGY25KdmNpNTNjbUZ3S0hSb2FYTXVkVzV6WlhKcFlXeHBlbVVvS1NrN0Nna0pZMkZ6WlNBeE1qRTZDZ2tKQ1haaGNpQnNaVzR4SUQwZ2RHaHBjeTV5WldGa1JHbG5hWFJ6S0NrN0Nna0pDV2xtS0hSb2FYTXVZblZtTG1Ob1lYSkRiMlJsUVhRb2RHaHBjeTV3YjNNckt5a2dJVDBnTlRnZ2ZId2dkR2hwY3k1c1pXNW5kR2dnTFNCMGFHbHpMbkJ2Y3lBOElHeGxiakVwSUhzS0NRa0pDWFJvY205M0lHNWxkeUJxYzE5ZkpFSnZiM1JmU0dGNFpVVnljbTl5S0NKSmJuWmhiR2xrSUhOMGNtbHVaeUJzWlc1bmRHZ2lLVHNLQ1FrSmZRb0pDUWwyWVhJZ2N6SWdQU0JJZUU5MlpYSnlhV1JsY3k1emRXSnpkSElvZEdocGN5NWlkV1lzZEdocGN5NXdiM01zYkdWdU1TazdDZ2tKQ1hSb2FYTXVjRzl6SUNzOUlHeGxiakU3Q2drSkNYTXlJRDBnWkdWamIyUmxWVkpKUTI5dGNHOXVaVzUwS0hNeUxuTndiR2wwS0NJcklpa3VhbTlwYmlnaUlDSXBLVHNLQ1FrSmRHaHBjeTV6WTJGamFHVXVjSFZ6YUNoek1pazdDZ2tKQ1hKbGRIVnliaUJ6TWpzS0NRbGpZWE5sSURFeU1qb0tDUWtKY21WMGRYSnVJREE3Q2drSlpHVm1ZWFZzZERvS0NRbDlDZ2tKZEdocGN5NXdiM010TFRzS0NRbDBhSEp2ZHlCdVpYY2dhbk5mWHlSQ2IyOTBYMGhoZUdWRmNuSnZjaWdpU1c1MllXeHBaQ0JqYUdGeUlDSWdLeUIwYUdsekxtSjFaaTVqYUdGeVFYUW9kR2hwY3k1d2IzTXBJQ3NnSWlCaGRDQndiM05wZEdsdmJpQWlJQ3NnZEdocGN5NXdiM01wT3dvSmZRcDlPd3AyWVhJZ2FHRjRaVjlwYjE5Q2VYUmxjeUE5SUdaMWJtTjBhVzl1S0dSaGRHRXBJSHNLQ1hSb2FYTXViR1Z1WjNSb0lEMGdaR0YwWVM1aWVYUmxUR1Z1WjNSb093b0pkR2hwY3k1aUlEMGdibVYzSUZWcGJuUTRRWEp5WVhrb1pHRjBZU2s3Q2dsMGFHbHpMbUl1WW5WbVptVnlWbUZzZFdVZ1BTQmtZWFJoT3dvSlpHRjBZUzVvZUVKNWRHVnpJRDBnZEdocGN6c0tDV1JoZEdFdVlubDBaWE1nUFNCMGFHbHpMbUk3Q24wN0NpUm9lRU5zWVhOelpYTmJJbWhoZUdVdWFXOHVRbmwwWlhNaVhTQTlJR2hoZUdWZmFXOWZRbmwwWlhNN0NtaGhlR1ZmYVc5ZlFubDBaWE11WDE5dVlXMWxYMThnUFNCMGNuVmxPd3BvWVhobFgybHZYMEo1ZEdWekxtOW1VM1J5YVc1bklEMGdablZ1WTNScGIyNG9jeXhsYm1OdlpHbHVaeWtnZXdvSmFXWW9aVzVqYjJScGJtY2dQVDBnYUdGNFpWOXBiMTlGYm1OdlpHbHVaeTVTWVhkT1lYUnBkbVVwSUhzS0NRbDJZWElnWW5WbUlEMGdibVYzSUZWcGJuUTRRWEp5WVhrb2N5NXNaVzVuZEdnZ1BEd2dNU2s3Q2drSmRtRnlJRjluSUQwZ01Ec0tDUWwyWVhJZ1gyY3hJRDBnY3k1c1pXNW5kR2c3Q2drSmQyaHBiR1VvWDJjZ1BDQmZaekVwSUhzS0NRa0pkbUZ5SUdrZ1BTQmZaeXNyT3dvSkNRbDJZWElnWXlBOUlITXVZMmhoY2tOdlpHVkJkQ2hwS1RzS0NRa0pZblZtVzJrZ1BEd2dNVjBnUFNCaklDWWdNalUxT3dvSkNRbGlkV1piYVNBOFBDQXhJSHdnTVYwZ1BTQmpJRDQrSURnN0Nna0pmUW9KQ1hKbGRIVnliaUJ1WlhjZ2FHRjRaVjlwYjE5Q2VYUmxjeWhpZFdZdVluVm1abVZ5S1RzS0NYMEtDWFpoY2lCaElEMGdXMTA3Q2dsMllYSWdhVEVnUFNBd093b0pkMmhwYkdVb2FURWdQQ0J6TG14bGJtZDBhQ2tnZXdvSkNYWmhjaUJqTVNBOUlITXVZMmhoY2tOdlpHVkJkQ2hwTVNzcktUc0tDUWxwWmlnMU5USTVOaUE4UFNCak1TQW1KaUJqTVNBOFBTQTFOak14T1NrZ2V3b0pDUWxqTVNBOUlHTXhJQzBnTlRVeU16SWdQRHdnTVRBZ2ZDQnpMbU5vWVhKRGIyUmxRWFFvYVRFckt5a2dKaUF4TURJek93b0pDWDBLQ1FscFppaGpNU0E4UFNBeE1qY3BJSHNLQ1FrSllTNXdkWE5vS0dNeEtUc0tDUWw5SUdWc2MyVWdhV1lvWXpFZ1BEMGdNakEwTnlrZ2V3b0pDUWxoTG5CMWMyZ29NVGt5SUh3Z1l6RWdQajRnTmlrN0Nna0pDV0V1Y0hWemFDZ3hNamdnZkNCak1TQW1JRFl6S1RzS0NRbDlJR1ZzYzJVZ2FXWW9ZekVnUEQwZ05qVTFNelVwSUhzS0NRa0pZUzV3ZFhOb0tESXlOQ0I4SUdNeElENCtJREV5S1RzS0NRa0pZUzV3ZFhOb0tERXlPQ0I4SUdNeElENCtJRFlnSmlBMk15azdDZ2tKQ1dFdWNIVnphQ2d4TWpnZ2ZDQmpNU0FtSURZektUc0tDUWw5SUdWc2MyVWdld29KQ1FsaExuQjFjMmdvTWpRd0lId2dZekVnUGo0Z01UZ3BPd29KQ1FsaExuQjFjMmdvTVRJNElId2dZekVnUGo0Z01USWdKaUEyTXlrN0Nna0pDV0V1Y0hWemFDZ3hNamdnZkNCak1TQStQaUEySUNZZ05qTXBPd29KQ1FsaExuQjFjMmdvTVRJNElId2dZekVnSmlBMk15azdDZ2tKZlFvSmZRb0pjbVYwZFhKdUlHNWxkeUJvWVhobFgybHZYMEo1ZEdWektHNWxkeUJWYVc1ME9FRnljbUY1S0dFcExtSjFabVpsY2lrN0NuMDdDbWhoZUdWZmFXOWZRbmwwWlhNdWNISnZkRzkwZVhCbElEMGdld29KWjJWMFUzUnlhVzVuT2lCbWRXNWpkR2x2Ymlod2IzTXNiR1Z1TEdWdVkyOWthVzVuS1NCN0Nna0phV1lvY0c5eklEd2dNQ0I4ZkNCc1pXNGdQQ0F3SUh4OElIQnZjeUFySUd4bGJpQStJSFJvYVhNdWJHVnVaM1JvS1NCN0Nna0pDWFJvY205M0lHNWxkeUJxYzE5ZkpFSnZiM1JmU0dGNFpVVnljbTl5S0doaGVHVmZhVzlmUlhKeWIzSXVUM1YwYzJsa1pVSnZkVzVrY3lrN0Nna0pmUW9KQ1dsbUtHVnVZMjlrYVc1bklEMDlJRzUxYkd3cElIc0tDUWtKWlc1amIyUnBibWNnUFNCb1lYaGxYMmx2WDBWdVkyOWthVzVuTGxWVVJqZzdDZ2tKZlFvSkNYWmhjaUJ6SUQwZ0lpSTdDZ2tKZG1GeUlHSWdQU0IwYUdsekxtSTdDZ2tKZG1GeUlHa2dQU0J3YjNNN0Nna0pkbUZ5SUcxaGVDQTlJSEJ2Y3lBcklHeGxianNLQ1FsemQybDBZMmdvWlc1amIyUnBibWN1WDJoNFgybHVaR1Y0S1NCN0Nna0pZMkZ6WlNBd09nb0pDUWwyWVhJZ1pHVmlkV2NnUFNCd2IzTWdQaUF3T3dvSkNRbDNhR2xzWlNocElEd2diV0Y0S1NCN0Nna0pDUWwyWVhJZ1l5QTlJR0piYVNzclhUc0tDUWtKQ1dsbUtHTWdQQ0F4TWpncElIc0tDUWtKQ1FscFppaGpJRDA5SURBcElIc0tDUWtKQ1FrSlluSmxZV3M3Q2drSkNRa0pmUW9KQ1FrSkNYTWdLejBnVTNSeWFXNW5MbVp5YjIxRGIyUmxVRzlwYm5Rb1l5azdDZ2tKQ1FsOUlHVnNjMlVnYVdZb1l5QThJREl5TkNrZ2V3b0pDUWtKQ1haaGNpQmpiMlJsSUQwZ0tHTWdKaUEyTXlrZ1BEd2dOaUI4SUdKYmFTc3JYU0FtSURFeU56c0tDUWtKQ1FseklDczlJRk4wY21sdVp5NW1jbTl0UTI5a1pWQnZhVzUwS0dOdlpHVXBPd29KQ1FrSmZTQmxiSE5sSUdsbUtHTWdQQ0F5TkRBcElIc0tDUWtKQ1FsMllYSWdZeklnUFNCaVcya3JLMTA3Q2drSkNRa0pkbUZ5SUdOdlpHVXhJRDBnS0dNZ0ppQXpNU2tnUER3Z01USWdmQ0FvWXpJZ0ppQXhNamNwSUR3OElEWWdmQ0JpVzJrcksxMGdKaUF4TWpjN0Nna0pDUWtKY3lBclBTQlRkSEpwYm1jdVpuSnZiVU52WkdWUWIybHVkQ2hqYjJSbE1TazdDZ2tKQ1FsOUlHVnNjMlVnZXdvSkNRa0pDWFpoY2lCak1qRWdQU0JpVzJrcksxMDdDZ2tKQ1FrSmRtRnlJR016SUQwZ1lsdHBLeXRkT3dvSkNRa0pDWFpoY2lCMUlEMGdLR01nSmlBeE5Ta2dQRHdnTVRnZ2ZDQW9Zekl4SUNZZ01USTNLU0E4UENBeE1pQjhJQ2hqTXlBbUlERXlOeWtnUER3Z05pQjhJR0piYVNzclhTQW1JREV5TnpzS0NRa0pDUWx6SUNzOUlGTjBjbWx1Wnk1bWNtOXRRMjlrWlZCdmFXNTBLSFVwT3dvSkNRa0pmUW9KQ1FsOUNna0pDV0p5WldGck93b0pDV05oYzJVZ01Ub0tDUWtKZDJocGJHVW9hU0E4SUcxaGVDa2dld29KQ1FrSmRtRnlJR014SUQwZ1lsdHBLeXRkSUh3Z1lsdHBLeXRkSUR3OElEZzdDZ2tKQ1FseklDczlJRk4wY21sdVp5NW1jbTl0UTI5a1pWQnZhVzUwS0dNeEtUc0tDUWtKZlFvSkNRbGljbVZoYXpzS0NRbDlDZ2tKY21WMGRYSnVJSE03Q2dsOUNna3NkRzlUZEhKcGJtYzZJR1oxYm1OMGFXOXVLQ2tnZXdvSkNYSmxkSFZ5YmlCMGFHbHpMbWRsZEZOMGNtbHVaeWd3TEhSb2FYTXViR1Z1WjNSb0tUc0tDWDBLZlRzS2RtRnlJR2hoZUdWZmFXOWZSVzVqYjJScGJtY2dQU0FrYUhoRmJuVnRjMXNpYUdGNFpTNXBieTVGYm1OdlpHbHVaeUpkSUQwZ2V5QmZYMlZ1WVcxbFgxOGdPaUIwY25WbExDQmZYMk52Ym5OMGNuVmpkSE5mWHlBNklGc2lWVlJHT0NJc0lsSmhkMDVoZEdsMlpTSmRDZ2tzVlZSR09Eb2dlMTlvZUY5cGJtUmxlRG93TEY5ZlpXNTFiVjlmT2lKb1lYaGxMbWx2TGtWdVkyOWthVzVuSWl4MGIxTjBjbWx1Wnpva1pYTjBjbjBLQ1N4U1lYZE9ZWFJwZG1VNklIdGZhSGhmYVc1a1pYZzZNU3hmWDJWdWRXMWZYem9pYUdGNFpTNXBieTVGYm1OdlpHbHVaeUlzZEc5VGRISnBibWM2SkdWemRISjlDbjA3Q25aaGNpQm9ZWGhsWDJOeWVYQjBiMTlDWVhObE5qUWdQU0JtZFc1amRHbHZiaWdwSUhzZ2ZUc0tKR2g0UTJ4aGMzTmxjMXNpYUdGNFpTNWpjbmx3ZEc4dVFtRnpaVFkwSWwwZ1BTQm9ZWGhsWDJOeWVYQjBiMTlDWVhObE5qUTdDbWhoZUdWZlkzSjVjSFJ2WDBKaGMyVTJOQzVmWDI1aGJXVmZYeUE5SUhSeWRXVTdDbWhoZUdWZlkzSjVjSFJ2WDBKaGMyVTJOQzVrWldOdlpHVWdQU0JtZFc1amRHbHZiaWh6ZEhJc1kyOXRjR3hsYldWdWRDa2dld29KYVdZb1kyOXRjR3hsYldWdWRDQTlQU0J1ZFd4c0tTQjdDZ2tKWTI5dGNHeGxiV1Z1ZENBOUlIUnlkV1U3Q2dsOUNnbHBaaWhqYjIxd2JHVnRaVzUwS1NCN0Nna0pkMmhwYkdVb1NIaFBkbVZ5Y21sa1pYTXVZMk5oS0hOMGNpeHpkSEl1YkdWdVozUm9JQzBnTVNrZ1BUMGdOakVwSUhOMGNpQTlJRWg0VDNabGNuSnBaR1Z6TG5OMVluTjBjaWh6ZEhJc01Dd3RNU2s3Q2dsOUNnbHlaWFIxY200Z2JtVjNJR2hoZUdWZlkzSjVjSFJ2WDBKaGMyVkRiMlJsS0doaGVHVmZZM0o1Y0hSdlgwSmhjMlUyTkM1Q1dWUkZVeWt1WkdWamIyUmxRbmwwWlhNb2FHRjRaVjlwYjE5Q2VYUmxjeTV2WmxOMGNtbHVaeWh6ZEhJcEtUc0tmVHNLZG1GeUlHaGhlR1ZmWTNKNWNIUnZYMEpoYzJWRGIyUmxJRDBnWm5WdVkzUnBiMjRvWW1GelpTa2dld29KZG1GeUlHeGxiaUE5SUdKaGMyVXViR1Z1WjNSb093b0pkbUZ5SUc1aWFYUnpJRDBnTVRzS0NYZG9hV3hsS0d4bGJpQStJREVnUER3Z2JtSnBkSE1wSUNzcmJtSnBkSE03Q2dscFppaHVZbWwwY3lBK0lEZ2dmSHdnYkdWdUlDRTlJREVnUER3Z2JtSnBkSE1wSUhzS0NRbDBhSEp2ZHlCdVpYY2dhbk5mWHlSQ2IyOTBYMGhoZUdWRmNuSnZjaWdpUW1GelpVTnZaR1VnT2lCaVlYTmxJR3hsYm1kMGFDQnRkWE4wSUdKbElHRWdjRzkzWlhJZ2IyWWdkSGR2TGlJcE93b0pmUW9KZEdocGN5NWlZWE5sSUQwZ1ltRnpaVHNLQ1hSb2FYTXVibUpwZEhNZ1BTQnVZbWwwY3pzS2ZUc0tKR2g0UTJ4aGMzTmxjMXNpYUdGNFpTNWpjbmx3ZEc4dVFtRnpaVU52WkdVaVhTQTlJR2hoZUdWZlkzSjVjSFJ2WDBKaGMyVkRiMlJsT3dwb1lYaGxYMk55ZVhCMGIxOUNZWE5sUTI5a1pTNWZYMjVoYldWZlh5QTlJSFJ5ZFdVN0NtaGhlR1ZmWTNKNWNIUnZYMEpoYzJWRGIyUmxMbkJ5YjNSdmRIbHdaU0E5SUhzS0NXbHVhWFJVWVdKc1pUb2dablZ1WTNScGIyNG9LU0I3Q2drSmRtRnlJSFJpYkNBOUlGdGRPd29KQ1haaGNpQmZaeUE5SURBN0Nna0pkMmhwYkdVb1gyY2dQQ0F5TlRZcElIc0tDUWtKZG1GeUlHa2dQU0JmWnlzck93b0pDUWwwWW14YmFWMGdQU0F0TVRzS0NRbDlDZ2tKZG1GeUlGOW5NU0E5SURBN0Nna0pkbUZ5SUY5bk1pQTlJSFJvYVhNdVltRnpaUzVzWlc1bmRHZzdDZ2tKZDJocGJHVW9YMmN4SUR3Z1gyY3lLU0I3Q2drSkNYWmhjaUJwTVNBOUlGOW5NU3NyT3dvSkNRbDBZbXhiZEdocGN5NWlZWE5sTG1KYmFURmRYU0E5SUdreE93b0pDWDBLQ1FsMGFHbHpMblJpYkNBOUlIUmliRHNLQ1gwS0NTeGtaV052WkdWQ2VYUmxjem9nWm5WdVkzUnBiMjRvWWlrZ2V3b0pDWFpoY2lCdVltbDBjeUE5SUhSb2FYTXVibUpwZEhNN0Nna0pkbUZ5SUdKaGMyVWdQU0IwYUdsekxtSmhjMlU3Q2drSmFXWW9kR2hwY3k1MFltd2dQVDBnYm5Wc2JDa2dld29KQ1FsMGFHbHpMbWx1YVhSVVlXSnNaU2dwT3dvSkNYMEtDUWwyWVhJZ2RHSnNJRDBnZEdocGN5NTBZbXc3Q2drSmRtRnlJSE5wZW1VZ1BTQmlMbXhsYm1kMGFDQXFJRzVpYVhSeklENCtJRE03Q2drSmRtRnlJRzkxZENBOUlHNWxkeUJvWVhobFgybHZYMEo1ZEdWektHNWxkeUJCY25KaGVVSjFabVpsY2loemFYcGxLU2s3Q2drSmRtRnlJR0oxWmlBOUlEQTdDZ2tKZG1GeUlHTjFjbUpwZEhNZ1BTQXdPd29KQ1haaGNpQndhVzRnUFNBd093b0pDWFpoY2lCd2IzVjBJRDBnTURzS0NRbDNhR2xzWlNod2IzVjBJRHdnYzJsNlpTa2dld29KQ1FsM2FHbHNaU2hqZFhKaWFYUnpJRHdnT0NrZ2V3b0pDUWtKWTNWeVltbDBjeUFyUFNCdVltbDBjenNLQ1FrSkNXSjFaaUE4UEQwZ2JtSnBkSE03Q2drSkNRbDJZWElnYVNBOUlIUmliRnRpTG1KYmNHbHVLeXRkWFRzS0NRa0pDV2xtS0drZ1BUMGdMVEVwSUhzS0NRa0pDUWwwYUhKdmR5QnVaWGNnYW5OZlh5UkNiMjkwWDBoaGVHVkZjbkp2Y2lnaVFtRnpaVU52WkdVZ09pQnBiblpoYkdsa0lHVnVZMjlrWldRZ1kyaGhjaUlwT3dvSkNRa0pmUW9KQ1FrSlluVm1JSHc5SUdrN0Nna0pDWDBLQ1FrSlkzVnlZbWwwY3lBdFBTQTRPd29KQ1FsdmRYUXVZbHR3YjNWMEt5dGRJRDBnWW5WbUlENCtJR04xY21KcGRITWdKaUF5TlRVN0Nna0pmUW9KQ1hKbGRIVnliaUJ2ZFhRN0NnbDlDbjA3Q25aaGNpQm9ZWGhsWDJSelgwbHVkRTFoY0NBOUlHWjFibU4wYVc5dUtDa2dld29KZEdocGN5NW9JRDBnZXlCOU93cDlPd29rYUhoRGJHRnpjMlZ6V3lKb1lYaGxMbVJ6TGtsdWRFMWhjQ0pkSUQwZ2FHRjRaVjlrYzE5SmJuUk5ZWEE3Q21oaGVHVmZaSE5mU1c1MFRXRndMbDlmYm1GdFpWOWZJRDBnZEhKMVpUc0tkbUZ5SUdoaGVHVmZaSE5mVEdsemRDQTlJR1oxYm1OMGFXOXVLQ2tnZXdvSmRHaHBjeTVzWlc1bmRHZ2dQU0F3T3dwOU93b2thSGhEYkdGemMyVnpXeUpvWVhobExtUnpMa3hwYzNRaVhTQTlJR2hoZUdWZlpITmZUR2x6ZERzS2FHRjRaVjlrYzE5TWFYTjBMbDlmYm1GdFpWOWZJRDBnZEhKMVpUc0thR0Y0WlY5a2MxOU1hWE4wTG5CeWIzUnZkSGx3WlNBOUlIc0tDV0ZrWkRvZ1puVnVZM1JwYjI0b2FYUmxiU2tnZXdvSkNYWmhjaUI0SUQwZ2JtVjNJR2hoZUdWZlpITmZYeVJNYVhOMFgweHBjM1JPYjJSbEtHbDBaVzBzYm5Wc2JDazdDZ2tKYVdZb2RHaHBjeTVvSUQwOUlHNTFiR3dwSUhzS0NRa0pkR2hwY3k1b0lEMGdlRHNLQ1FsOUlHVnNjMlVnZXdvSkNRbDBhR2x6TG5FdWJtVjRkQ0E5SUhnN0Nna0pmUW9KQ1hSb2FYTXVjU0E5SUhnN0Nna0pkR2hwY3k1c1pXNW5kR2dyS3pzS0NYMEtmVHNLZG1GeUlHaGhlR1ZmWkhOZlh5Uk1hWE4wWDB4cGMzUk9iMlJsSUQwZ1puVnVZM1JwYjI0b2FYUmxiU3h1WlhoMEtTQjdDZ2wwYUdsekxtbDBaVzBnUFNCcGRHVnRPd29KZEdocGN5NXVaWGgwSUQwZ2JtVjRkRHNLZlRzS0pHaDRRMnhoYzNObGMxc2lhR0Y0WlM1a2N5NWZUR2x6ZEM1TWFYTjBUbTlrWlNKZElEMGdhR0Y0WlY5a2MxOWZKRXhwYzNSZlRHbHpkRTV2WkdVN0NtaGhlR1ZmWkhOZlh5Uk1hWE4wWDB4cGMzUk9iMlJsTGw5ZmJtRnRaVjlmSUQwZ2RISjFaVHNLZG1GeUlHaGhlR1ZmWkhOZlQySnFaV04wVFdGd0lEMGdablZ1WTNScGIyNG9LU0I3Q2dsMGFHbHpMbWdnUFNCN0lGOWZhMlY1YzE5ZklEb2dleUI5ZlRzS2ZUc0tKR2g0UTJ4aGMzTmxjMXNpYUdGNFpTNWtjeTVQWW1wbFkzUk5ZWEFpWFNBOUlHaGhlR1ZmWkhOZlQySnFaV04wVFdGd093cG9ZWGhsWDJSelgwOWlhbVZqZEUxaGNDNWZYMjVoYldWZlh5QTlJSFJ5ZFdVN0NtaGhlR1ZmWkhOZlQySnFaV04wVFdGd0xuQnliM1J2ZEhsd1pTQTlJSHNLQ1hObGREb2dablZ1WTNScGIyNG9hMlY1TEhaaGJIVmxLU0I3Q2drSmRtRnlJR2xrSUQwZ2EyVjVMbDlmYVdSZlh5QjhmQ0FvYTJWNUxsOWZhV1JmWHlBOUlDc3JhR0Y0WlY5a2MxOVBZbXBsWTNSTllYQXVZMjkxYm5RcE93b0pDWFJvYVhNdWFGdHBaRjBnUFNCMllXeDFaVHNLQ1FsMGFHbHpMbWd1WDE5clpYbHpYMTliYVdSZElEMGdhMlY1T3dvSmZRcDlPd3AyWVhJZ2FHRjRaVjlrYzE5VGRISnBibWROWVhBZ1BTQm1kVzVqZEdsdmJpZ3BJSHNLQ1hSb2FYTXVhQ0E5SUhzZ2ZUc0tmVHNLSkdoNFEyeGhjM05sYzFzaWFHRjRaUzVrY3k1VGRISnBibWROWVhBaVhTQTlJR2hoZUdWZlpITmZVM1J5YVc1blRXRndPd3BvWVhobFgyUnpYMU4wY21sdVowMWhjQzVmWDI1aGJXVmZYeUE5SUhSeWRXVTdDbWhoZUdWZlpITmZVM1J5YVc1blRXRndMbkJ5YjNSdmRIbHdaU0E5SUhzS0NYTmxkRkpsYzJWeWRtVmtPaUJtZFc1amRHbHZiaWhyWlhrc2RtRnNkV1VwSUhzS0NRbHBaaWgwYUdsekxuSm9JRDA5SUc1MWJHd3BJSHNLQ1FrSmRHaHBjeTV5YUNBOUlIc2dmVHNLQ1FsOUNna0pkR2hwY3k1eWFGc2lKQ0lnS3lCclpYbGRJRDBnZG1Gc2RXVTdDZ2w5Q2drc1oyVjBVbVZ6WlhKMlpXUTZJR1oxYm1OMGFXOXVLR3RsZVNrZ2V3b0pDV2xtS0hSb2FYTXVjbWdnUFQwZ2JuVnNiQ2tnZXdvSkNRbHlaWFIxY200Z2JuVnNiRHNLQ1FsOUlHVnNjMlVnZXdvSkNRbHlaWFIxY200Z2RHaHBjeTV5YUZzaUpDSWdLeUJyWlhsZE93b0pDWDBLQ1gwS0NTeGxlR2x6ZEhOU1pYTmxjblpsWkRvZ1puVnVZM1JwYjI0b2EyVjVLU0I3Q2drSmFXWW9kR2hwY3k1eWFDQTlQU0J1ZFd4c0tTQjdDZ2tKQ1hKbGRIVnliaUJtWVd4elpUc0tDUWw5Q2drSmNtVjBkWEp1SUhSb2FYTXVjbWd1YUdGelQzZHVVSEp2Y0dWeWRIa29JaVFpSUNzZ2EyVjVLVHNLQ1gwS0NTeHJaWGx6T2lCbWRXNWpkR2x2YmlncElIc0tDUWx5WlhSMWNtNGdTSGhQZG1WeWNtbGtaWE11YVhSbGNpaDBhR2x6TG1GeWNtRjVTMlY1Y3lncEtUc0tDWDBLQ1N4aGNuSmhlVXRsZVhNNklHWjFibU4wYVc5dUtDa2dld29KQ1haaGNpQnZkWFFnUFNCYlhUc0tDUWxtYjNJb0lIWmhjaUJyWlhrZ2FXNGdkR2hwY3k1b0lDa2dld29KQ1dsbUtIUm9hWE11YUM1b1lYTlBkMjVRY205d1pYSjBlU2hyWlhrcEtTQjdDZ2tKQ1c5MWRDNXdkWE5vS0d0bGVTazdDZ2tKZlFvSkNYMEtDUWxwWmloMGFHbHpMbkpvSUNFOUlHNTFiR3dwSUhzS0NRa0pabTl5S0NCMllYSWdhMlY1SUdsdUlIUm9hWE11Y21nZ0tTQjdDZ2tKQ1dsbUtHdGxlUzVqYUdGeVEyOWtaVUYwS0RBcElEMDlJRE0yS1NCN0Nna0pDUWx2ZFhRdWNIVnphQ2hyWlhrdWMzVmljM1J5S0RFcEtUc0tDUWtKZlFvSkNRbDlDZ2tKZlFvSkNYSmxkSFZ5YmlCdmRYUTdDZ2w5Q24wN0NuWmhjaUJvWVhobFgybHZYMFZ5Y205eUlEMGdKR2g0Ulc1MWJYTmJJbWhoZUdVdWFXOHVSWEp5YjNJaVhTQTlJSHNnWDE5bGJtRnRaVjlmSURvZ2RISjFaU3dnWDE5amIyNXpkSEoxWTNSelgxOGdPaUJiSWtKc2IyTnJaV1FpTENKUGRtVnlabXh2ZHlJc0lrOTFkSE5wWkdWQ2IzVnVaSE1pTENKRGRYTjBiMjBpWFFvSkxFSnNiMk5yWldRNklIdGZhSGhmYVc1a1pYZzZNQ3hmWDJWdWRXMWZYem9pYUdGNFpTNXBieTVGY25KdmNpSXNkRzlUZEhKcGJtYzZKR1Z6ZEhKOUNna3NUM1psY21ac2IzYzZJSHRmYUhoZmFXNWtaWGc2TVN4ZlgyVnVkVzFmWHpvaWFHRjRaUzVwYnk1RmNuSnZjaUlzZEc5VGRISnBibWM2SkdWemRISjlDZ2tzVDNWMGMybGtaVUp2ZFc1a2N6b2dlMTlvZUY5cGJtUmxlRG95TEY5ZlpXNTFiVjlmT2lKb1lYaGxMbWx2TGtWeWNtOXlJaXgwYjFOMGNtbHVaem9rWlhOMGNuMEtDU3hEZFhOMGIyMDZJQ2drWHoxbWRXNWpkR2x2YmlobEtTQjdJSEpsZEhWeWJpQjdYMmg0WDJsdVpHVjRPak1zWlRwbExGOWZaVzUxYlY5Zk9pSm9ZWGhsTG1sdkxrVnljbTl5SWl4MGIxTjBjbWx1Wnpva1pYTjBjbjA3SUgwc0pGOHVYMTl3WVhKaGJYTmZYeUE5SUZzaVpTSmRMQ1JmS1FwOU93cDJZWElnYW5OZlh5UkNiMjkwWDBoaGVHVkZjbkp2Y2lBOUlHWjFibU4wYVc5dUtIWmhiQ2tnZXdvSlJYSnliM0l1WTJGc2JDaDBhR2x6S1RzS0NYUm9hWE11ZG1Gc0lEMGdkbUZzT3dvSmFXWW9SWEp5YjNJdVkyRndkSFZ5WlZOMFlXTnJWSEpoWTJVcElIc0tDUWxGY25KdmNpNWpZWEIwZFhKbFUzUmhZMnRVY21GalpTaDBhR2x6TEdwelgxOGtRbTl2ZEY5SVlYaGxSWEp5YjNJcE93b0pmUXA5T3dva2FIaERiR0Z6YzJWeld5SnFjeTVmUW05dmRDNUlZWGhsUlhKeWIzSWlYU0E5SUdwelgxOGtRbTl2ZEY5SVlYaGxSWEp5YjNJN0NtcHpYMThrUW05dmRGOUlZWGhsUlhKeWIzSXVYMTl1WVcxbFgxOGdQU0IwY25WbE93cHFjMTlmSkVKdmIzUmZTR0Y0WlVWeWNtOXlMbmR5WVhBZ1BTQm1kVzVqZEdsdmJpaDJZV3dwSUhzS0NXbG1LQ2dvZG1Gc0tTQnBibk4wWVc1alpXOW1JRVZ5Y205eUtTa2dld29KQ1hKbGRIVnliaUIyWVd3N0NnbDlJR1ZzYzJVZ2V3b0pDWEpsZEhWeWJpQnVaWGNnYW5OZlh5UkNiMjkwWDBoaGVHVkZjbkp2Y2loMllXd3BPd29KZlFwOU93cHFjMTlmSkVKdmIzUmZTR0Y0WlVWeWNtOXlMbDlmYzNWd1pYSmZYeUE5SUVWeWNtOXlPd3BxYzE5ZkpFSnZiM1JmU0dGNFpVVnljbTl5TG5CeWIzUnZkSGx3WlNBOUlDUmxlSFJsYm1Rb1JYSnliM0l1Y0hKdmRHOTBlWEJsTEhzS2ZTazdDblpoY2lCcWMxOUNiMjkwSUQwZ1puVnVZM1JwYjI0b0tTQjdJSDA3Q2lSb2VFTnNZWE56WlhOYkltcHpMa0p2YjNRaVhTQTlJR3B6WDBKdmIzUTdDbXB6WDBKdmIzUXVYMTl1WVcxbFgxOGdQU0IwY25WbE93cHFjMTlDYjI5MExsOWZjM1J5YVc1blgzSmxZeUE5SUdaMWJtTjBhVzl1S0c4c2N5a2dld29KYVdZb2J5QTlQU0J1ZFd4c0tTQjdDZ2tKY21WMGRYSnVJQ0p1ZFd4c0lqc0tDWDBLQ1dsbUtITXViR1Z1WjNSb0lENDlJRFVwSUhzS0NRbHlaWFIxY200Z0lqd3VMaTQrSWpzS0NYMEtDWFpoY2lCMElEMGdkSGx3Wlc5bUtHOHBPd29KYVdZb2RDQTlQU0FpWm5WdVkzUnBiMjRpSUNZbUlDaHZMbDlmYm1GdFpWOWZJSHg4SUc4dVgxOWxibUZ0WlY5ZktTa2dld29KQ1hRZ1BTQWliMkpxWldOMElqc0tDWDBLQ1hOM2FYUmphQ2gwS1NCN0NnbGpZWE5sSUNKbWRXNWpkR2x2YmlJNkNna0pjbVYwZFhKdUlDSThablZ1WTNScGIyNCtJanNLQ1dOaGMyVWdJbTlpYW1WamRDSTZDZ2tKYVdZb2J5NWZYMlZ1ZFcxZlh5a2dld29KQ1FsMllYSWdaU0E5SUNSb2VFVnVkVzF6VzI4dVgxOWxiblZ0WDE5ZE93b0pDUWwyWVhJZ2JpQTlJR1V1WDE5amIyNXpkSEoxWTNSelgxOWJieTVmYUhoZmFXNWtaWGhkT3dvSkNRbDJZWElnWTI5dUlEMGdaVnR1WFRzS0NRa0phV1lvWTI5dUxsOWZjR0Z5WVcxelgxOHBJSHNLQ1FrSkNYTWdLejBnSWx4MElqc0tDUWtKQ1haaGNpQjBiWEFnUFNCdUlDc2dJaWdpT3dvSkNRa0pkbUZ5SUY5bklEMGdXMTA3Q2drSkNRbDJZWElnWDJjeElEMGdNRHNLQ1FrSkNYWmhjaUJmWnpJZ1BTQmpiMjR1WDE5d1lYSmhiWE5mWHpzS0NRa0pDWGRvYVd4bEtGOW5NU0E4SUY5bk1pNXNaVzVuZEdncElIc0tDUWtKQ1FsMllYSWdjQ0E5SUY5bk1sdGZaekZkT3dvSkNRa0pDU3NyWDJjeE93b0pDUWtKQ1Y5bkxuQjFjMmdvYW5OZlFtOXZkQzVmWDNOMGNtbHVaMTl5WldNb2IxdHdYU3h6S1NrN0Nna0pDUWw5Q2drSkNRbHlaWFIxY200Z2RHMXdJQ3NnWDJjdWFtOXBiaWdpTENJcElDc2dJaWtpT3dvSkNRbDlJR1ZzYzJVZ2V3b0pDUWtKY21WMGRYSnVJRzQ3Q2drSkNYMEtDUWw5Q2drSmFXWW9LQ2h2S1NCcGJuTjBZVzVqWlc5bUlFRnljbUY1S1NrZ2V3b0pDUWwyWVhJZ2JDQTlJRzh1YkdWdVozUm9Pd29KQ1FsMllYSWdhVHNLQ1FrSmRtRnlJSE4wY2lBOUlDSmJJanNLQ1FrSmN5QXJQU0FpWEhRaU93b0pDUWwyWVhJZ1gyY3pJRDBnTURzS0NRa0pkbUZ5SUY5bk1URWdQU0JzT3dvSkNRbDNhR2xzWlNoZlp6TWdQQ0JmWnpFeEtTQjdDZ2tKQ1FsMllYSWdhVEVnUFNCZlp6TXJLenNLQ1FrSkNYTjBjaUFyUFNBb2FURWdQaUF3SUQ4Z0lpd2lJRG9nSWlJcElDc2dhbk5mUW05dmRDNWZYM04wY21sdVoxOXlaV01vYjF0cE1WMHNjeWs3Q2drSkNYMEtDUWtKYzNSeUlDczlJQ0pkSWpzS0NRa0pjbVYwZFhKdUlITjBjanNLQ1FsOUNna0pkbUZ5SUhSdmMzUnlPd29KQ1hSeWVTQjdDZ2tKQ1hSdmMzUnlJRDBnYnk1MGIxTjBjbWx1WnpzS0NRbDlJR05oZEdOb0tDQmxNU0FwSUhzS0NRa0pkbUZ5SUdVeUlEMGdLQ2hsTVNrZ2FXNXpkR0Z1WTJWdlppQnFjMTlmSkVKdmIzUmZTR0Y0WlVWeWNtOXlLU0EvSUdVeExuWmhiQ0E2SUdVeE93b0pDUWx5WlhSMWNtNGdJajgvUHlJN0Nna0pmUW9KQ1dsbUtIUnZjM1J5SUNFOUlHNTFiR3dnSmlZZ2RHOXpkSElnSVQwZ1QySnFaV04wTG5SdlUzUnlhVzVuSUNZbUlIUjVjR1Z2WmloMGIzTjBjaWtnUFQwZ0ltWjFibU4wYVc5dUlpa2dld29KQ1FsMllYSWdjeklnUFNCdkxuUnZVM1J5YVc1bktDazdDZ2tKQ1dsbUtITXlJQ0U5SUNKYmIySnFaV04wSUU5aWFtVmpkRjBpS1NCN0Nna0pDUWx5WlhSMWNtNGdjekk3Q2drSkNYMEtDUWw5Q2drSmRtRnlJR3NnUFNCdWRXeHNPd29KQ1haaGNpQnpkSEl4SUQwZ0ludGNiaUk3Q2drSmN5QXJQU0FpWEhRaU93b0pDWFpoY2lCb1lYTndJRDBnYnk1b1lYTlBkMjVRY205d1pYSjBlU0FoUFNCdWRXeHNPd29KQ1dadmNpZ2dkbUZ5SUdzZ2FXNGdieUFwSUhzS0NRbHBaaWhvWVhOd0lDWW1JQ0Z2TG1oaGMwOTNibEJ5YjNCbGNuUjVLR3NwS1NCN0Nna0pDV052Ym5ScGJuVmxPd29KQ1gwS0NRbHBaaWhySUQwOUlDSndjbTkwYjNSNWNHVWlJSHg4SUdzZ1BUMGdJbDlmWTJ4aGMzTmZYeUlnZkh3Z2F5QTlQU0FpWDE5emRYQmxjbDlmSWlCOGZDQnJJRDA5SUNKZlgybHVkR1Z5Wm1GalpYTmZYeUlnZkh3Z2F5QTlQU0FpWDE5d2NtOXdaWEowYVdWelgxOGlLU0I3Q2drSkNXTnZiblJwYm5WbE93b0pDWDBLQ1FscFppaHpkSEl4TG14bGJtZDBhQ0FoUFNBeUtTQjdDZ2tKQ1hOMGNqRWdLejBnSWl3Z1hHNGlPd29KQ1gwS0NRbHpkSEl4SUNzOUlITWdLeUJySUNzZ0lpQTZJQ0lnS3lCcWMxOUNiMjkwTGw5ZmMzUnlhVzVuWDNKbFl5aHZXMnRkTEhNcE93b0pDWDBLQ1FseklEMGdjeTV6ZFdKemRISnBibWNvTVNrN0Nna0pjM1J5TVNBclBTQWlYRzRpSUNzZ2N5QXJJQ0o5SWpzS0NRbHlaWFIxY200Z2MzUnlNVHNLQ1dOaGMyVWdJbk4wY21sdVp5STZDZ2tKY21WMGRYSnVJRzg3Q2dsa1pXWmhkV3gwT2dvSkNYSmxkSFZ5YmlCVGRISnBibWNvYnlrN0NnbDlDbjA3Q2lSb2VFTnNZWE56WlhOYklrMWhkR2dpWFNBOUlFMWhkR2c3Q21sbUtDQlRkSEpwYm1jdVpuSnZiVU52WkdWUWIybHVkQ0E5UFNCdWRXeHNJQ2tnVTNSeWFXNW5MbVp5YjIxRGIyUmxVRzlwYm5RZ1BTQm1kVzVqZEdsdmJpaGpLU0I3SUhKbGRIVnliaUJqSUR3Z01IZ3hNREF3TUNBL0lGTjBjbWx1Wnk1bWNtOXRRMmhoY2tOdlpHVW9ZeWtnT2lCVGRISnBibWN1Wm5KdmJVTm9ZWEpEYjJSbEtDaGpQajR4TUNrck1IaEVOME13S1N0VGRISnBibWN1Wm5KdmJVTm9ZWEpEYjJSbEtDaGpKakI0TTBaR0tTc3dlRVJETURBcE95QjlDbE4wY21sdVp5NWZYMjVoYldWZlh5QTlJSFJ5ZFdVN0NpUm9lRU5zWVhOelpYTmJJa0Z5Y21GNUlsMGdQU0JCY25KaGVUc0tRWEp5WVhrdVgxOXVZVzFsWDE4Z1BTQjBjblZsT3dwRVlYUmxMbDlmYm1GdFpWOWZJRDBnSWtSaGRHVWlPd3BvWVhobFgxSmxjMjkxY21ObExtTnZiblJsYm5RZ1BTQmJleUJ1WVcxbElEb2dJbDlvWld4d1gyMWhjQ0lzSUdSaGRHRWdPaUFpV1c1cmVFOVVjR3RqYlRGbVl6SldlV1J0Vm5sWU0yUndXa2RXTW1GWE5XeGlNMnN3VDIxb2JHSklRalZOVkdjMldUSTVkRXh1WkhCYVIxWXlZVmMxYkV4dFJuTmpSMmhvWlZSbk5scEhWbTFaV0ZaelpFWTVOVTlFUVRaS1ZGWkRXa2RXYlZsWVZuTmtRMVY2VVZOVmVVMUZUbFJrU0Vwd1ltMWpiRTFxYUc5a1NGSjNZM2xWZWxGVFZYbFNhVlY1VW01a2NGcEhWakpoVnpWc1RGaENlV0l6YURWTWJVWjNZMGhPZDJJelVYVlpNamwwU2xSS1IyTklTblpsU0d0c1RXcHJiRTVWVW01bFZFbDNUMjFTZVdKV09YcGFXRW95V2xoS1ptTkhlR2hsV0Vwc1dWZFNOV0l4U1hobFZFbDZUMjFPZG1KVE5YUmhWMDU1WWpOT2RscHVVWFZqUjNob1pWaEtiRmxYVWpWVmFrNDFUV3BCTkU5cFZURlJiVkpzV20xR01XSklVV3hOTUVWc1RXcENSRlV6VW5saFZ6VnVTbFJKTkdGSVVqQmpTRTFzVFRCRmJFMXJXV3hOYTFwM1lrZEdOV050Vm1oYVNHdDFXa2RzZVZwWFRqQmtSMFozWTNrMWRWcFlVV3hOYTFwM1kybFZlVkp1VGpKWmVWVjVVbTVLY0ZveWFEQmpNakZvWW0xR2JscFlTWFZaV0U1MFpVTlZlbEpzUW5OWldHeFRZVmRrYjJSRFZYcFNSRVZzVFdwYVZtTXlWbFJoVnpGM1lrZFdUMkl5TlZGYVdFcDZZVmhPTUZwWE5UQlVSMnhxV2xjMWVscFRWWHBTUkVWc1RXcGFVV0pIUmpWU1Z6Vm9XVzE0YkdOdVRXeE5NRkV6VDBSWk1rMXFaRVZQUXpGRVRXdEZNa3hVVVRCUmExVjBUMFZaTkU5RE1IZFBSVVpHVFdwVk1WRnFRWGhSVkdOc1RXcHJiRTVWVW01aFFTSjlYVHNLYUdGNFpWOWtjMTlQWW1wbFkzUk5ZWEF1WTI5MWJuUWdQU0F3T3dwMllYSWdYMTl0WVhCZmNtVnpaWEoyWldRZ1BTQjdmVHNLVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHcHpYMThrUW05dmRGOUlZWGhsUlhKeWIzSXVjSEp2ZEc5MGVYQmxMQ0p0WlhOellXZGxJaXg3SUdkbGRDQTZJR1oxYm1OMGFXOXVLQ2tnZXdvSmNtVjBkWEp1SUZOMGNtbHVaeWgwYUdsekxuWmhiQ2s3Q24xOUtUc0thbk5mUW05dmRDNWZYM1J2VTNSeUlEMGdLSHNnZlNrdWRHOVRkSEpwYm1jN0NrRnlaMkZ1TGtoRlRGQmZVa1ZUVDFWU1EwVmZTMFZaSUQwZ0lsOW9aV3h3WDIxaGNDSTdDbWhoZUdWZlZXNXpaWEpwWVd4cGVtVnlMa1JGUmtGVlRGUmZVa1ZUVDB4V1JWSWdQU0J1WlhjZ2FHRjRaVjlmSkZWdWMyVnlhV0ZzYVhwbGNsOUVaV1poZFd4MFVtVnpiMngyWlhJb0tUc0thR0Y0WlY5VmJuTmxjbWxoYkdsNlpYSXVRa0ZUUlRZMElEMGdJa0ZDUTBSRlJrZElTVXBMVEUxT1QxQlJVbE5VVlZaWFdGbGFZV0pqWkdWbVoyaHBhbXRzYlc1dmNIRnljM1IxZG5kNGVYb3dNVEl6TkRVMk56ZzVKVG9pT3dwb1lYaGxYMk55ZVhCMGIxOUNZWE5sTmpRdVEwaEJVbE1nUFNBaVFVSkRSRVZHUjBoSlNrdE1UVTVQVUZGU1UxUlZWbGRZV1ZwaFltTmtaV1puYUdscWEyeHRibTl3Y1hKemRIVjJkM2g1ZWpBeE1qTTBOVFkzT0Rrckx5STdDbWhoZUdWZlkzSjVjSFJ2WDBKaGMyVTJOQzVDV1ZSRlV5QTlJR2hoZUdWZmFXOWZRbmwwWlhNdWIyWlRkSEpwYm1jb2FHRjRaVjlqY25sd2RHOWZRbUZ6WlRZMExrTklRVkpUS1RzS1NHRnpVR3hoZVdWeUxtMWhhVzRvS1RzS2ZTa29LVHNL"},{ name : "dashjs-src", data : "ewogICAgIjIuOS4zIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi45LjMvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjkuMiI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuOS4yL2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi45LjEiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjkuMS9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuOS4wIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi45LjAvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjguMCI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuOC4wL2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi43LjAiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjcuMC9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuNi44IjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi42LjgvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjYuNyI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuNi43L2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi42LjYiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjYuNi9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuNi41IjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi42LjUvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjYuNCI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuNi40L2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi42LjMiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjYuMy9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuNi4yIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi42LjIvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjYuMSI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuNi4xL2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi42LjAiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjYuMC9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuNS4wIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi41LjAvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjQuMSI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuNC4xL2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi40LjAiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjQuMC9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuMy4wIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi4zLjAvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjIuMCI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuMi4wL2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi4xLjEiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjEuMS9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuMS4wIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi4xLjAvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjAuMC1yYzUiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjAuMC1yYzUvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjAuMC1yYzQiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjAuMC1yYzQvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjAuMCI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuMC4wL2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMS42LjAiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8xLjYuMC9kYXNoLmRlYnVnLmpzIl0sCiAgICAiMS41LjEiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8xLjUuMS9kYXNoLmRlYnVnLmpzIl0sCiAgICAiMS41LjAiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8xLjUuMC9kYXNoLmRlYnVnLmpzIl0sCiAgICAiMS40IjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMS40L2Rhc2guZGVidWcuanMiXSwKICAgICIxLjMuMCI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzEuMy4wL2Rhc2guZGVidWcuanMiXSwKICAgICIxLjIuMCI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzEuMi4wL2Rhc2guYWxsLmpzIl0sCiAgICAiMS4xLjIiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8xLjEuMi9kYXNoLmFsbC5qcyJdLAogICAgIjEuMC4wIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMS4wLjAvZGFzaC5hbGwuanMiXSwKICAgICIwLjIuNSI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzAuMi41L2Rhc2guYWxsLmpzIl0sCiAgICAiMC4yLjQiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8wLjIuNC9kYXNoLmFsbC5qcyJdCn0"},{ name : "hlsjs", data : ""},{ name : "logo", data : "PHN2ZyB2aWV3Qm94PSIwIDAgMjM1IDI2MCIgdmVyc2lvbj0iMS4xIiAKICAgICAgICAgICAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciPgogICAgPHN0eWxlIHR5cGU9InRleHQvY3NzIiA+CiAgICAgICAgPCFbQ0RBVEFbCiAgICAgICAgICAgIC5saW5lIGxpbmUgewogICAgICAgICAgICAgICAgbWFya2VyLWVuZDogdXJsKCNjYXBweSk7CiAgICAgICAgICAgICAgICBzdHJva2UtbGluZWNhcDogInJvdW5kIjsKICAgICAgICAgICAgICAgIHN0cm9rZS13aWR0aDogMTQ7CiAgICAgICAgICAgICAgICBzdHJva2U6IGN1cnJlbnRDb2xvcjsKICAgICAgICAgICAgICAgIHN0cm9rZS1kYXNoYXJyYXk6IDEwMCAxMDA7CiAgICAgICAgICAgICAgICBzdHJva2UtZGFzaG9mZnNldDogLTQ7CiAgICAgICAgICAgIH0KICAgICAgICBdXT4KICAgIDwvc3R5bGU+CiAgICA8ZGVmcz4KICAgIDxtYXJrZXIgaWQ9ImNhcHB5IgogICAgICAgIHZpZXdCb3g9Ii0yIDAgMzAgMTAiIHJlZlg9IjAiIHJlZlk9IjUiIAogICAgICAgIG1hcmtlclVuaXRzPSJzdHJva2VXaWR0aCIKICAgICAgICBtYXJrZXJXaWR0aD0iMy4wIiBtYXJrZXJIZWlnaHQ9IjEiCiAgICAgICAgb3JpZW50PSJhdXRvIj4KICAgICAgICA8cmVjdCBmaWxsPSJjdXJyZW50Q29sb3IiIHg9Ii01IiB3aWR0aD0iMzAiIGhlaWdodD0iMTAiIHJ4PSI1IiByeT0iNSI+PC9yZWN0PgogICAgPC9tYXJrZXI+CiAgICA8L2RlZnM+CiAgICA8ZyBjbGFzcz0ibGluZSIgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMzAsMzApIj4KICAgICAgICA8cG9seWxpbmUgaWQ9ImhleGFnb24iIHBvaW50cz0iODcsMCAxNzQsNTAgMTc0LDE1MCA4NywyMDAgMCwxNTAgMCw1MCA4NywwIiBmaWxsPSIjRUJFQkVCMDAiPjwvcG9seWxpbmU+CiAgICAgICAgPGxpbmUgeDE9Ijg3IiAgIHkxPSIwIiAgICAgIHgyPSIxNzQiICAgIHkyPSI1MCIgLz4KICAgICAgICA8bGluZSB4MT0iMTc0IiAgeTE9IjUwIiAgICAgeDI9IjE3NCIgICAgeTI9IjE1MCIvPgogICAgICAgIDxsaW5lIHgxPSIxNzQiICB5MT0iMTUwIiAgICB4Mj0iODciICAgICB5Mj0iMjAwIi8+CiAgICAgICAgPGxpbmUgeDE9Ijg3IiAgIHkxPSIyMDAiICAgIHgyPSIwIiAgICAgIHkyPSIxNTAiLz4KICAgICAgICA8bGluZSB4MT0iMCIgICAgeTE9IjE1MCIgICAgeDI9IjAiICAgICAgeTI9IjUwIiAvPgogICAgICAgIDxsaW5lIHgxPSIwIiAgICB5MT0iNTAiICAgIHgyPSI4NyIgICAgICB5Mj0iMCIgIC8+CiAgICAgICAgPGcgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoNzAsNzUpIj4KICAgICAgICAgICAgPCEtLXBvbHlsaW5lIGlkPSJwbGF5IiBwb2ludHM9IjAsMCA1MCwyNSAwLDUwIDAsMCIgZmlsbD0iY3VycmVudENvbG9yIi8tLT4KICAgICAgICA8L2c+CiAgICA8L2c+Cjwvc3ZnPg"},{ name : "hlsjs-argan", data : "eyJlbmFibGVXb3JrZXIiOnsiaGVscCI6ImVuYWJsZVdvcmtlciIsImRlZmF1bHRfIjoiW2RlZmF1bHQ6IENTdHJpbmcodHJ1ZSldIn0sImRybV9zZXJ2ZXJfd2lkZXZpbmUiOnsiaGVscCI6ImNvbS53aWRldmluZS5hbHBoYSIsImRlZmF1bHRfIjoiW2RlZmF1bHQ6IENTdHJpbmcoaHR0cHM6Ly93aWRldmluZS1wcm94eS5hcHBzcG90LmNvbS9wcm94eSldIn0sInN0cmV0Y2hTaG9ydFZpZGVvVHJhY2siOnsiaGVscCI6InN0cmV0Y2hTaG9ydFZpZGVvVHJhY2siLCJkZWZhdWx0XyI6IltkZWZhdWx0OiBDU3RyaW5nKGZhbHNlKV0ifX0"},{ name : "controls_template", data : "PGRpdiBpZD0iY29udHJvbHNfZWxlbWVudHMiPgogICAgPHNjcmlwdD4KICAgICAgICAvKgogICAgICAgIHZhciBjb250cm9sc19lbGVtZW50cyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgIHZhciB0YXJnZXQgPSB3aW5kb3cuZnJhbWVFbGVtZW50LnBhcmVudEVsZW1lbnQ7CiAgICAgICAgdGFyZ2V0LnBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNvbnRyb2xzX2VsZW1lbnRzLCB0YXJnZXQubmV4dFNpYmxpbmcpOwogICAgICAgICovCiAgICAgICAgdmFyIGxvYWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJsb2FkZXIiKTsKICAgICAgICAKICAgICAgICB2YXIgY29udGFpbmVyID0gd2luZG93LmZyYW1lRWxlbWVudC5wYXJlbnRFbGVtZW50OwogICAgICAgIGNsZWFyTWVudSA9IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHdoaWxlKGNvbnRyb2xzX2VsZW1lbnRzLmZpcnN0Q2hpbGQpCiAgICAgICAgICAgICAgICBjb250cm9sc19lbGVtZW50cy5yZW1vdmVDaGlsZChjb250cm9sc19lbGVtZW50cy5maXJzdENoaWxkKTsKICAgICAgICB9CiAgICAgICAgdmFyIHJlc2V0Q29udHJvbHNIZWlnaHQgPSBmdW5jdGlvbigpewogICAgICAgICAgICAvL29mZnNldCBjb250YWluZXIgaGVpZ2h0IHdpdGggaGVpZ2h0IG9mIGNvbnRyb2xzCiAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBjb250cm9sc19lbGVtZW50cy5wYXJlbnRFbGVtZW50Lm9mZnNldEhlaWdodCArICJweCI7CiAgICAgICAgfQogICAgICAgIHZhciByZXNldEFzcGVjdFJhdGlvID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgLy9jb3JyZWN0IGNvbnRhaW5lciBhc3BlY3QgcmF0aW8gd2l0aCB2aWRlbyBhc3BlY3QgcmF0aW8KICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLnBhZGRpbmdCb3R0b20gPSAxMDAvdmlkZW8ub2Zmc2V0V2lkdGgqdmlkZW8ub2Zmc2V0SGVpZ2h0ICsgIiUiOwogICAgICAgICAgICBsb2FkZXIuc3R5bGUuaGVpZ2h0ID0gdmlkZW8ub2Zmc2V0SGVpZ2h0ICsgInB4IjsKICAgICAgICB9CiAgICAgICAgdmFyIG1lbnVzID0ge307CiAgICAgICAgcmVtb3ZlTWVudSA9IGZ1bmN0aW9uKHRpdGxlKSB7CiAgICAgICAgICAgIGlmKHRpdGxlIGluIG1lbnVzKXsKICAgICAgICAgICAgICAgIG1lbnVzW3RpdGxlXS5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKG1lbnVzW3RpdGxlXSk7CiAgICAgICAgICAgICAgICBkZWxldGUgbWVudXNbdGl0bGVdOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGFkZE1lbnUgPSBmdW5jdGlvbih0aXRsZSwgb3B0aW9ucywgaGFuZGxlciwgc2VsZWN0ZWRJbmRleCl7CiAgICAgICAgICAgIHZhciBkaXYgPSBtZW51c1t0aXRsZV0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgICAgICAgICAgdmFyIGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgibGFiZWwiKTsKICAgICAgICAgICAgbGFiZWwuaW5uZXJUZXh0ID0gdGl0bGU7CiAgICAgICAgICAgIGRpdi5hcHBlbmRDaGlsZChsYWJlbCk7CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNlbGVjdCIpOwogICAgICAgICAgICBsYWJlbC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIGZ1bmN0aW9uKGUpewogICAgICAgICAgICAgICAgc2VsZWN0LmNsaWNrKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgb3B0aW9ucy5sZW5ndGg7IGkrKyl7CiAgICAgICAgICAgICAgICB2YXIgbyA9IG9wdGlvbnNbaV07CiAgICAgICAgICAgICAgICB2YXIgb3B0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgib3B0aW9uIik7CiAgICAgICAgICAgICAgICBvcHQuaW5uZXJUZXh0ID0gby50aXRsZTsKICAgICAgICAgICAgICAgIG9wdC5pbmZvID0gby5pbmZvOwogICAgICAgICAgICAgICAgaWYoaSA9PSBzZWxlY3RlZEluZGV4KQogICAgICAgICAgICAgICAgICAgIG9wdC5zZWxlY3RlZCA9IHRydWU7CiAgICAgICAgICAgICAgICBzZWxlY3QuYXBwZW5kQ2hpbGQob3B0KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoc2VsZWN0KTsKICAgICAgICAgICAgc2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoImNoYW5nZSIsIGhhbmRsZXIpOwogICAgICAgICAgICBjb250cm9sc19lbGVtZW50cy5hcHBlbmRDaGlsZChkaXYpOwogICAgICAgICAgICAKICAgICAgICAgICAgcmVzZXRDb250cm9sc0hlaWdodCgpOwogICAgICAgIH07CiAgICAgICAgdmFyIGxvYWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJsb2FkZXIiKTsKICAgICAgICBmdW5jdGlvbiBoaWRlTG9hZGVyKCl7CiAgICAgICAgICAgIGlmKCFsb2FkZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCJoaWRlIikpCiAgICAgICAgICAgICAgICBsb2FkZXIuY2xhc3NMaXN0LmFkZCgiaGlkZSIpOwogICAgICAgIH0KICAgICAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCJsb2FkZWRkYXRhIiwgcmVzZXRBc3BlY3RSYXRpbyk7CiAgICAgICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcigiZXJyb3IiLCBoaWRlTG9hZGVyKTsKICAgICAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCJsb2Fkc3RhcnQiLCByZXNldEFzcGVjdFJhdGlvKTsKICAgICAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCJwbGF5aW5nIiwgcmVzZXRBc3BlY3RSYXRpbyk7CiAgICAgICAgdmFyIGJvdGggPSBmdW5jdGlvbihlKXsKICAgICAgICAgICAgcmVzZXRBc3BlY3RSYXRpbygpOwogICAgICAgICAgICByZXNldENvbnRyb2xzSGVpZ2h0KCk7CiAgICAgICAgICAgIGhpZGVMb2FkZXIoKTsKICAgICAgICB9OwogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJyZXNpemUiLCBib3RoKTsKICAgICAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCJsb2FkZWRtZXRhZGF0YSIsIGJvdGgpOwogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJsb2FkIiwgYm90aCk7CiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoImtleWRvd24iLCBmdW5jdGlvbihlKXsKICAgICAgICAgICAgY29udGFpbmVyLmRpc3BhdGNoRXZlbnQobmV3IGUuY29uc3RydWN0b3IoZS50eXBlLCBlKSk7CiAgICAgICAgfSk7CiAgICA8L3NjcmlwdD4KPC9kaXY+Cg"},{ name : "dashjs-argan", data : "eyJkcm1fc2VydmVyX3BsYXlyZWFkeSI6eyJoZWxwIjoiY29tLm1pY3Jvc29mdC5wbGF5cmVhZHkiLCJkZWZhdWx0XyI6IltkZWZhdWx0OiBDU3RyaW5nKGh0dHBzOi8vcGxheXJlYWR5LmRpcmVjdHRhcHMubmV0L3ByL3N2Yy9yaWdodHNtYW5hZ2VyLmFzbXg/UGxheVJpZ2h0PTEmVXNlU2ltcGxlTm9uUGVyc2lzdGVudExpY2Vuc2U9MSZQbGF5RW5hYmxlcnM9Nzg2NjI3RDgtQzJBNi00NEJFLThGODgtMDhBRTI1NUIwMUE3KV0ifSwic2V0QUJSU3RyYXRlZ3kiOnsiaGVscCI6ImFickR5bmFtaWMgLyBhYnJCb2xhIC8gYWJyVGhyb3VnaHB1dCIsImRlZmF1bHRfIjoiW2RlZmF1bHQ6IENTdHJpbmcoYWJyRHluYW1pYyldIn0sInNldEp1bXBHYXBzIjp7ImhlbHAiOiJzZXRKdW1wR2FwcyIsImRlZmF1bHRfIjoiW2RlZmF1bHQ6IENJZGVudCh0cnVlKV0ifSwiZHJtX3NlcnZlcl93aWRldmluZSI6eyJoZWxwIjoiY29tLndpZGV2aW5lLmFscGhhIiwiZGVmYXVsdF8iOiJbZGVmYXVsdDogQ1N0cmluZyhodHRwczovL3dpZGV2aW5lLXByb3h5LmFwcHNwb3QuY29tL3Byb3h5KV0ifSwic2V0RmFzdFN3aXRjaEVuYWJsZWQiOnsiaGVscCI6InNldEZhc3RTd2l0Y2hFbmFibGVkIiwiZGVmYXVsdF8iOiJbZGVmYXVsdDogQ0lkZW50KHRydWUpXSJ9LCJkYXNoanNfbG9nbGV2ZWwiOnsiaGVscCI6IjAgPT0gbm9uZSB0byA1ID09IGRlYnVnIiwiZGVmYXVsdF8iOiJbZGVmYXVsdDogQ0ludCg0KV0ifSwic2V0TG93TGF0ZW5jeUVuYWJsZWQiOnsiaGVscCI6InNldExvd0xhdGVuY3lFbmFibGVkIiwiZGVmYXVsdF8iOiJbZGVmYXVsdDogQ0lkZW50KGZhbHNlKV0ifSwic2V0TGl2ZURlbGF5Ijp7ImhlbHAiOiJzZXRMaXZlRGVsYXkiLCJkZWZhdWx0XyI6IltkZWZhdWx0OiBDRmxvYXQoMTAuMCldIn19"}];
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
Argan.HELP_RESOURCE_KEY = "_help_map";
Main.playerSrcExtended = new haxe_ds_StringMap();
Main.id = 0;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
haxe_Template.splitter = new EReg("(::[A-Za-z0-9_ ()&|!+=/><*.\"-]+::|\\$\\$([A-Za-z0-9_-]+)\\()","");
haxe_Template.expr_splitter = new EReg("(\\(|\\)|[ \r\n\t]*\"[^\"]*\"[ \r\n\t]*|[!+=/><*.&|-]+)","");
haxe_Template.expr_trim = new EReg("^[ ]*([^ ]+)[ ]*$","");
haxe_Template.expr_int = new EReg("^[0-9]+$","");
haxe_Template.expr_float = new EReg("^([+-]?)(?=\\d|,\\d)\\d*(,\\d*)?([Ee]([+-]?\\d+))?$","");
haxe_Template.globals = { };
haxe_Template.hxKeepArrayIterator = HxOverrides.iter([]);
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved["lt"] != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved["gt"] != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved["amp"] != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved["quot"] != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved["apos"] != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
uapi_ui_Timeline.dragging = false;
uapi_ui_Tree.ID = "mse-toolbox-tree-";
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
